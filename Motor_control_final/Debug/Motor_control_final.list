
Motor_control_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08009df8  08009df8  00019df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a354  0800a354  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a354  0800a354  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a354  0800a354  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a354  0800a354  0001a354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a358  0800a358  0001a358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a35c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001e8  0800a544  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  0800a544  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1f0  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f5c  00000000  00000000  0002d401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002f360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00030070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188e3  00000000  00000000  00030cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cef6  00000000  00000000  000495ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be58  00000000  00000000  000564a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e22f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f94  00000000  00000000  000e234c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ddc 	.word	0x08009ddc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009ddc 	.word	0x08009ddc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	460c      	mov	r4, r1
 8001160:	4605      	mov	r5, r0
 8001162:	4621      	mov	r1, r4
 8001164:	4628      	mov	r0, r5
 8001166:	2200      	movs	r2, #0
 8001168:	2300      	movs	r3, #0
 800116a:	f7ff fc27 	bl	80009bc <__aeabi_dcmplt>
 800116e:	b928      	cbnz	r0, 800117c <__aeabi_d2lz+0x20>
 8001170:	4628      	mov	r0, r5
 8001172:	4621      	mov	r1, r4
 8001174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001178:	f000 b80a 	b.w	8001190 <__aeabi_d2ulz>
 800117c:	4628      	mov	r0, r5
 800117e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001182:	f000 f805 	bl	8001190 <__aeabi_d2ulz>
 8001186:	4240      	negs	r0, r0
 8001188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800118c:	bd38      	pop	{r3, r4, r5, pc}
 800118e:	bf00      	nop

08001190 <__aeabi_d2ulz>:
 8001190:	b5d0      	push	{r4, r6, r7, lr}
 8001192:	2200      	movs	r2, #0
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__aeabi_d2ulz+0x34>)
 8001196:	4606      	mov	r6, r0
 8001198:	460f      	mov	r7, r1
 800119a:	f7ff f99d 	bl	80004d8 <__aeabi_dmul>
 800119e:	f7ff fc73 	bl	8000a88 <__aeabi_d2uiz>
 80011a2:	4604      	mov	r4, r0
 80011a4:	f7ff f91e 	bl	80003e4 <__aeabi_ui2d>
 80011a8:	2200      	movs	r2, #0
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <__aeabi_d2ulz+0x38>)
 80011ac:	f7ff f994 	bl	80004d8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4630      	mov	r0, r6
 80011b6:	4639      	mov	r1, r7
 80011b8:	f7fe ffd6 	bl	8000168 <__aeabi_dsub>
 80011bc:	f7ff fc64 	bl	8000a88 <__aeabi_d2uiz>
 80011c0:	4621      	mov	r1, r4
 80011c2:	bdd0      	pop	{r4, r6, r7, pc}
 80011c4:	3df00000 	.word	0x3df00000
 80011c8:	41f00000 	.word	0x41f00000

080011cc <read_encoder>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void read_encoder()
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	tempPos = (int16_t)(htim1.Instance->CNT);
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <read_encoder+0x30>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <read_encoder+0x34>)
 80011dc:	601a      	str	r2, [r3, #0]
	EncPos += tempPos;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <read_encoder+0x38>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <read_encoder+0x34>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <read_encoder+0x38>)
 80011ea:	6013      	str	r3, [r2, #0]
	htim1.Instance->CNT=0;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <read_encoder+0x30>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	200002b4 	.word	0x200002b4
 8001200:	200002fc 	.word	0x200002fc
 8001204:	2000037c 	.word	0x2000037c

08001208 <GetPPR>:


void GetPPR(uint16_t local_rpm, uint16_t *p_ppr)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	80fb      	strh	r3, [r7, #6]
	u_control = 1;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <GetPPR+0x4c>)
 8001216:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800121a:	601a      	str	r2, [r3, #0]
	if(count_60s == T_60S)
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <GetPPR+0x50>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001224:	4293      	cmp	r3, r2
 8001226:	d110      	bne.n	800124a <GetPPR+0x42>
	{
		*p_ppr = EncPos/local_rpm;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <GetPPR+0x54>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001232:	b29a      	uxth	r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	801a      	strh	r2, [r3, #0]
		count_60s = 0;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <GetPPR+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	801a      	strh	r2, [r3, #0]
		PPRFlag = 1;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <GetPPR+0x58>)
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
		EncPos = 0;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <GetPPR+0x54>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
	}
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	20000220 	.word	0x20000220
 8001258:	2000020c 	.word	0x2000020c
 800125c:	2000037c 	.word	0x2000037c
 8001260:	2000020a 	.word	0x2000020a

08001264 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == htim2.Instance)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d110      	bne.n	800129a <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		read_encoder();
 8001278:	f7ff ffa8 	bl	80011cc <read_encoder>
		ProcessFlag=1;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
		if(count_60s < T_60S) count_60s +=1;
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800128a:	4293      	cmp	r3, r2
 800128c:	d805      	bhi.n	800129a <HAL_TIM_PeriodElapsedCallback+0x36>
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001298:	801a      	strh	r2, [r3, #0]
	}
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000334 	.word	0x20000334
 80012a8:	20000208 	.word	0x20000208
 80012ac:	2000020c 	.word	0x2000020c

080012b0 <PID_controller>:


void PID_controller(float SP, float PV, PID_t *pid, float *u)
{
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
	float ek;
	ek = SP - PV;
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff fc55 	bl	8000b70 <__aeabi_fsub>
 80012c6:	4603      	mov	r3, r0
 80012c8:	617b      	str	r3, [r7, #20]
	pid->I_part += Ts*ek;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691c      	ldr	r4, [r3, #16]
 80012ce:	4923      	ldr	r1, [pc, #140]	; (800135c <PID_controller+0xac>)
 80012d0:	6978      	ldr	r0, [r7, #20]
 80012d2:	f7ff fd57 	bl	8000d84 <__aeabi_fmul>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4619      	mov	r1, r3
 80012da:	4620      	mov	r0, r4
 80012dc:	f7ff fc4a 	bl	8000b74 <__addsf3>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	611a      	str	r2, [r3, #16]
	*u = pid->Kp*ek + pid->Ki*pid->I_part + pid->Kd*(ek-pid->ek_1)/Ts;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6979      	ldr	r1, [r7, #20]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fd48 	bl	8000d84 <__aeabi_fmul>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461c      	mov	r4, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	4619      	mov	r1, r3
 8001302:	4610      	mov	r0, r2
 8001304:	f7ff fd3e 	bl	8000d84 <__aeabi_fmul>
 8001308:	4603      	mov	r3, r0
 800130a:	4619      	mov	r1, r3
 800130c:	4620      	mov	r0, r4
 800130e:	f7ff fc31 	bl	8000b74 <__addsf3>
 8001312:	4603      	mov	r3, r0
 8001314:	461d      	mov	r5, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689c      	ldr	r4, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	4619      	mov	r1, r3
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	f7ff fc25 	bl	8000b70 <__aeabi_fsub>
 8001326:	4603      	mov	r3, r0
 8001328:	4619      	mov	r1, r3
 800132a:	4620      	mov	r0, r4
 800132c:	f7ff fd2a 	bl	8000d84 <__aeabi_fmul>
 8001330:	4603      	mov	r3, r0
 8001332:	490a      	ldr	r1, [pc, #40]	; (800135c <PID_controller+0xac>)
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fdd9 	bl	8000eec <__aeabi_fdiv>
 800133a:	4603      	mov	r3, r0
 800133c:	4619      	mov	r1, r3
 800133e:	4628      	mov	r0, r5
 8001340:	f7ff fc18 	bl	8000b74 <__addsf3>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	601a      	str	r2, [r3, #0]
	pid->ek_1 = ek;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	60da      	str	r2, [r3, #12]
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bdb0      	pop	{r4, r5, r7, pc}
 800135a:	bf00      	nop
 800135c:	3ca3d70a 	.word	0x3ca3d70a

08001360 <xuat_PWM>:


void xuat_PWM(float duty)  //use timer 2 to export PWM, 50Hz
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	if (duty >= 1) duty = 1;
 8001368:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff febb 	bl	80010e8 <__aeabi_fcmpge>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <xuat_PWM+0x20>
 8001378:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	e008      	b.n	8001392 <xuat_PWM+0x32>
	else if (duty <= -1) duty = -1;
 8001380:	491a      	ldr	r1, [pc, #104]	; (80013ec <xuat_PWM+0x8c>)
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fea6 	bl	80010d4 <__aeabi_fcmple>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <xuat_PWM+0x32>
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <xuat_PWM+0x8c>)
 8001390:	607b      	str	r3, [r7, #4]

	int16_t pwm = duty*900;
 8001392:	4917      	ldr	r1, [pc, #92]	; (80013f0 <xuat_PWM+0x90>)
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff fcf5 	bl	8000d84 <__aeabi_fmul>
 800139a:	4603      	mov	r3, r0
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff feb7 	bl	8001110 <__aeabi_f2iz>
 80013a2:	4603      	mov	r3, r0
 80013a4:	81fb      	strh	r3, [r7, #14]
	if (pwm>=0)
 80013a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db09      	blt.n	80013c2 <xuat_PWM+0x62>
		{
			htim3.Instance->CCR1=0;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <xuat_PWM+0x94>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2=pwm;
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <xuat_PWM+0x94>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013be:	639a      	str	r2, [r3, #56]	; 0x38
		{
			pwm *= -1;
			htim3.Instance->CCR2=0;
			htim3.Instance->CCR1=pwm;
		}
}
 80013c0:	e010      	b.n	80013e4 <xuat_PWM+0x84>
	else if(pwm < 0)
 80013c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da0c      	bge.n	80013e4 <xuat_PWM+0x84>
			pwm *= -1;
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	425b      	negs	r3, r3
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	81fb      	strh	r3, [r7, #14]
			htim3.Instance->CCR2=0;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <xuat_PWM+0x94>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR1=pwm;
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <xuat_PWM+0x94>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	bf800000 	.word	0xbf800000
 80013f0:	44610000 	.word	0x44610000
 80013f4:	20000240 	.word	0x20000240

080013f8 <process_RXData>:



void process_RXData()
{
 80013f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013fc:	b088      	sub	sp, #32
 80013fe:	af08      	add	r7, sp, #32
	if(RXData_Buff[0] == '0')
 8001400:	4b68      	ldr	r3, [pc, #416]	; (80015a4 <process_RXData+0x1ac>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b30      	cmp	r3, #48	; 0x30
 8001406:	d12f      	bne.n	8001468 <process_RXData+0x70>
	{
		sscanf(RXData_Buff, "%u %u %u", &Temp, &SysQuest, &ProcessMode);
 8001408:	4b67      	ldr	r3, [pc, #412]	; (80015a8 <process_RXData+0x1b0>)
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	4b67      	ldr	r3, [pc, #412]	; (80015ac <process_RXData+0x1b4>)
 800140e:	4a68      	ldr	r2, [pc, #416]	; (80015b0 <process_RXData+0x1b8>)
 8001410:	4968      	ldr	r1, [pc, #416]	; (80015b4 <process_RXData+0x1bc>)
 8001412:	4864      	ldr	r0, [pc, #400]	; (80015a4 <process_RXData+0x1ac>)
 8001414:	f004 fb38 	bl	8005a88 <siscanf>
		if(SysQuest == 0)
		{

		}
		if(SysQuest == 1)
 8001418:	4b64      	ldr	r3, [pc, #400]	; (80015ac <process_RXData+0x1b4>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d106      	bne.n	800142e <process_RXData+0x36>
		{
			EncPos = 0;
 8001420:	4b65      	ldr	r3, [pc, #404]	; (80015b8 <process_RXData+0x1c0>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
			u_control = 0;
 8001426:	4b65      	ldr	r3, [pc, #404]	; (80015bc <process_RXData+0x1c4>)
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
		}
		if(SysQuest == 2)
 800142e:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <process_RXData+0x1b4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d118      	bne.n	8001468 <process_RXData+0x70>
		{
			memset(&ParaPID, 0, sizeof(PID_t));
 8001436:	2214      	movs	r2, #20
 8001438:	2100      	movs	r1, #0
 800143a:	4861      	ldr	r0, [pc, #388]	; (80015c0 <process_RXData+0x1c8>)
 800143c:	f003 fc86 	bl	8004d4c <memset>
			memset(speed,0 , strlen(TXData));
 8001440:	4860      	ldr	r0, [pc, #384]	; (80015c4 <process_RXData+0x1cc>)
 8001442:	f7fe fe85 	bl	8000150 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	2100      	movs	r1, #0
 800144c:	485e      	ldr	r0, [pc, #376]	; (80015c8 <process_RXData+0x1d0>)
 800144e:	f003 fc7d 	bl	8004d4c <memset>
			setpoint =0;
 8001452:	4b5e      	ldr	r3, [pc, #376]	; (80015cc <process_RXData+0x1d4>)
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
			EncPos = 0;
 800145a:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <process_RXData+0x1c0>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
			u_control = 0;
 8001460:	4b56      	ldr	r3, [pc, #344]	; (80015bc <process_RXData+0x1c4>)
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
		}
	}
	if(RXData_Buff[0] == '1')
 8001468:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <process_RXData+0x1ac>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b31      	cmp	r3, #49	; 0x31
 800146e:	d13e      	bne.n	80014ee <process_RXData+0xf6>
	{
		sscanf(RXData_Buff, "%u %f %f %f %f", &Temp, &ParaPID.Kp, &ParaPID.Ki, &ParaPID.Kd, &setpoint);
 8001470:	4b56      	ldr	r3, [pc, #344]	; (80015cc <process_RXData+0x1d4>)
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	4b56      	ldr	r3, [pc, #344]	; (80015d0 <process_RXData+0x1d8>)
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <process_RXData+0x1dc>)
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <process_RXData+0x1c8>)
 800147e:	4a4c      	ldr	r2, [pc, #304]	; (80015b0 <process_RXData+0x1b8>)
 8001480:	4955      	ldr	r1, [pc, #340]	; (80015d8 <process_RXData+0x1e0>)
 8001482:	4848      	ldr	r0, [pc, #288]	; (80015a4 <process_RXData+0x1ac>)
 8001484:	f004 fb00 	bl	8005a88 <siscanf>
		sprintf(TXData, "%u %.2f %.4f %.2f %.2f\n", 2, ParaPID.Kp, ParaPID.Ki, ParaPID.Kd, setpoint);
 8001488:	4b4d      	ldr	r3, [pc, #308]	; (80015c0 <process_RXData+0x1c8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe ffcb 	bl	8000428 <__aeabi_f2d>
 8001492:	4604      	mov	r4, r0
 8001494:	460d      	mov	r5, r1
 8001496:	4b4a      	ldr	r3, [pc, #296]	; (80015c0 <process_RXData+0x1c8>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ffc4 	bl	8000428 <__aeabi_f2d>
 80014a0:	4680      	mov	r8, r0
 80014a2:	4689      	mov	r9, r1
 80014a4:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <process_RXData+0x1c8>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ffbd 	bl	8000428 <__aeabi_f2d>
 80014ae:	4682      	mov	sl, r0
 80014b0:	468b      	mov	fp, r1
 80014b2:	4b46      	ldr	r3, [pc, #280]	; (80015cc <process_RXData+0x1d4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7fe ffb6 	bl	8000428 <__aeabi_f2d>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80014c4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80014c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014cc:	e9cd 4500 	strd	r4, r5, [sp]
 80014d0:	2202      	movs	r2, #2
 80014d2:	4942      	ldr	r1, [pc, #264]	; (80015dc <process_RXData+0x1e4>)
 80014d4:	483b      	ldr	r0, [pc, #236]	; (80015c4 <process_RXData+0x1cc>)
 80014d6:	f004 fab7 	bl	8005a48 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)TXData, strlen(TXData), 30);
 80014da:	483a      	ldr	r0, [pc, #232]	; (80015c4 <process_RXData+0x1cc>)
 80014dc:	f7fe fe38 	bl	8000150 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	231e      	movs	r3, #30
 80014e6:	4937      	ldr	r1, [pc, #220]	; (80015c4 <process_RXData+0x1cc>)
 80014e8:	483d      	ldr	r0, [pc, #244]	; (80015e0 <process_RXData+0x1e8>)
 80014ea:	f002 ff1a 	bl	8004322 <HAL_UART_Transmit>
	}
	if(RXData_Buff[0] == '2')
 80014ee:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <process_RXData+0x1ac>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b32      	cmp	r3, #50	; 0x32
 80014f4:	d11b      	bne.n	800152e <process_RXData+0x136>
	{
		sscanf(RXData_Buff, "%u %u %u %u", &Temp, &rpm, &ppr, &ProcessMode);
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <process_RXData+0x1b0>)
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <process_RXData+0x1ec>)
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <process_RXData+0x1f0>)
 8001500:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <process_RXData+0x1b8>)
 8001502:	493a      	ldr	r1, [pc, #232]	; (80015ec <process_RXData+0x1f4>)
 8001504:	4827      	ldr	r0, [pc, #156]	; (80015a4 <process_RXData+0x1ac>)
 8001506:	f004 fabf 	bl	8005a88 <siscanf>
		sprintf(TXData, "%u\n", 3);
 800150a:	2203      	movs	r2, #3
 800150c:	4938      	ldr	r1, [pc, #224]	; (80015f0 <process_RXData+0x1f8>)
 800150e:	482d      	ldr	r0, [pc, #180]	; (80015c4 <process_RXData+0x1cc>)
 8001510:	f004 fa9a 	bl	8005a48 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)TXData, strlen(TXData),30);
 8001514:	482b      	ldr	r0, [pc, #172]	; (80015c4 <process_RXData+0x1cc>)
 8001516:	f7fe fe1b 	bl	8000150 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	b29a      	uxth	r2, r3
 800151e:	231e      	movs	r3, #30
 8001520:	4928      	ldr	r1, [pc, #160]	; (80015c4 <process_RXData+0x1cc>)
 8001522:	482f      	ldr	r0, [pc, #188]	; (80015e0 <process_RXData+0x1e8>)
 8001524:	f002 fefd 	bl	8004322 <HAL_UART_Transmit>
		EncPos = 0;
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <process_RXData+0x1c0>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
	}
	if(RXData_Buff[0] == '3')
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <process_RXData+0x1ac>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b33      	cmp	r3, #51	; 0x33
 8001534:	d131      	bne.n	800159a <process_RXData+0x1a2>
	{
		sscanf(RXData_Buff, "%u %u %u", &Temp, &EncMode, &ProcessMode);
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <process_RXData+0x1b0>)
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <process_RXData+0x1fc>)
 800153c:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <process_RXData+0x1b8>)
 800153e:	491d      	ldr	r1, [pc, #116]	; (80015b4 <process_RXData+0x1bc>)
 8001540:	4818      	ldr	r0, [pc, #96]	; (80015a4 <process_RXData+0x1ac>)
 8001542:	f004 faa1 	bl	8005a88 <siscanf>
		if(EncMode == 1)
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <process_RXData+0x1fc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d110      	bne.n	8001570 <process_RXData+0x178>
		{
			sprintf(TXData, "%u\n", 4);
 800154e:	2204      	movs	r2, #4
 8001550:	4927      	ldr	r1, [pc, #156]	; (80015f0 <process_RXData+0x1f8>)
 8001552:	481c      	ldr	r0, [pc, #112]	; (80015c4 <process_RXData+0x1cc>)
 8001554:	f004 fa78 	bl	8005a48 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)TXData, strlen(TXData), 30);
 8001558:	481a      	ldr	r0, [pc, #104]	; (80015c4 <process_RXData+0x1cc>)
 800155a:	f7fe fdf9 	bl	8000150 <strlen>
 800155e:	4603      	mov	r3, r0
 8001560:	b29a      	uxth	r2, r3
 8001562:	231e      	movs	r3, #30
 8001564:	4917      	ldr	r1, [pc, #92]	; (80015c4 <process_RXData+0x1cc>)
 8001566:	481e      	ldr	r0, [pc, #120]	; (80015e0 <process_RXData+0x1e8>)
 8001568:	f002 fedb 	bl	8004322 <HAL_UART_Transmit>
			init_Encx1();
 800156c:	f000 fb24 	bl	8001bb8 <init_Encx1>
		}
		if( EncMode == 4)
 8001570:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <process_RXData+0x1fc>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d110      	bne.n	800159a <process_RXData+0x1a2>
		{
			sprintf(TXData, "%u\n", 5);
 8001578:	2205      	movs	r2, #5
 800157a:	491d      	ldr	r1, [pc, #116]	; (80015f0 <process_RXData+0x1f8>)
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <process_RXData+0x1cc>)
 800157e:	f004 fa63 	bl	8005a48 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)TXData, strlen(TXData), 30);
 8001582:	4810      	ldr	r0, [pc, #64]	; (80015c4 <process_RXData+0x1cc>)
 8001584:	f7fe fde4 	bl	8000150 <strlen>
 8001588:	4603      	mov	r3, r0
 800158a:	b29a      	uxth	r2, r3
 800158c:	231e      	movs	r3, #30
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <process_RXData+0x1cc>)
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <process_RXData+0x1e8>)
 8001592:	f002 fec6 	bl	8004322 <HAL_UART_Transmit>
			init_Encx4();
 8001596:	f000 fb63 	bl	8001c60 <init_Encx4>
		}
	}
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015a2:	bf00      	nop
 80015a4:	20000300 	.word	0x20000300
 80015a8:	20000204 	.word	0x20000204
 80015ac:	20000000 	.word	0x20000000
 80015b0:	2000023c 	.word	0x2000023c
 80015b4:	08009df8 	.word	0x08009df8
 80015b8:	2000037c 	.word	0x2000037c
 80015bc:	20000220 	.word	0x20000220
 80015c0:	20000224 	.word	0x20000224
 80015c4:	2000028c 	.word	0x2000028c
 80015c8:	20000328 	.word	0x20000328
 80015cc:	20000238 	.word	0x20000238
 80015d0:	2000022c 	.word	0x2000022c
 80015d4:	20000228 	.word	0x20000228
 80015d8:	08009e04 	.word	0x08009e04
 80015dc:	08009e14 	.word	0x08009e14
 80015e0:	20000380 	.word	0x20000380
 80015e4:	20000004 	.word	0x20000004
 80015e8:	20000002 	.word	0x20000002
 80015ec:	08009e2c 	.word	0x08009e2c
 80015f0:	08009e38 	.word	0x08009e38
 80015f4:	20000330 	.word	0x20000330

080015f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_UART_RxCpltCallback+0x58>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d11d      	bne.n	8001648 <HAL_UART_RxCpltCallback+0x50>
	{
		if(RXData != '\n') //line feed Ascii
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_UART_RxCpltCallback+0x5c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b0a      	cmp	r3, #10
 8001612:	d00b      	beq.n	800162c <HAL_UART_RxCpltCallback+0x34>
		{
			RXData_Buff[RXIndex++] = RXData; //Save data in Rxbuff
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_UART_RxCpltCallback+0x60>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	b2d1      	uxtb	r1, r2
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_UART_RxCpltCallback+0x60>)
 800161e:	7011      	strb	r1, [r2, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_UART_RxCpltCallback+0x5c>)
 8001624:	7819      	ldrb	r1, [r3, #0]
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_UART_RxCpltCallback+0x64>)
 8001628:	5499      	strb	r1, [r3, r2]
 800162a:	e008      	b.n	800163e <HAL_UART_RxCpltCallback+0x46>
		}
		else if (RXData == '\n')
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_UART_RxCpltCallback+0x5c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b0a      	cmp	r3, #10
 8001632:	d104      	bne.n	800163e <HAL_UART_RxCpltCallback+0x46>
		{
			RXIndex = 0;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_UART_RxCpltCallback+0x60>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
			process_RXData();
 800163a:	f7ff fedd 	bl	80013f8 <process_RXData>
		}
		HAL_UART_Receive_IT(&huart2, &RXData, 1);
 800163e:	2201      	movs	r2, #1
 8001640:	4904      	ldr	r1, [pc, #16]	; (8001654 <HAL_UART_RxCpltCallback+0x5c>)
 8001642:	4803      	ldr	r0, [pc, #12]	; (8001650 <HAL_UART_RxCpltCallback+0x58>)
 8001644:	f002 feff 	bl	8004446 <HAL_UART_Receive_IT>
	}
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000380 	.word	0x20000380
 8001654:	20000288 	.word	0x20000288
 8001658:	20000209 	.word	0x20000209
 800165c:	20000300 	.word	0x20000300

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001666:	f000 fdb3 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166a:	f000 f8ed 	bl	8001848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166e:	f000 fa65 	bl	8001b3c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001672:	f000 f987 	bl	8001984 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001676:	f000 f9d3 	bl	8001a20 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800167a:	f000 fa35 	bl	8001ae8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800167e:	f000 f929 	bl	80018d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001682:	485e      	ldr	r0, [pc, #376]	; (80017fc <main+0x19c>)
 8001684:	f001 fdca 	bl	800321c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001688:	2104      	movs	r1, #4
 800168a:	485d      	ldr	r0, [pc, #372]	; (8001800 <main+0x1a0>)
 800168c:	f001 ffac 	bl	80035e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001690:	2100      	movs	r1, #0
 8001692:	485c      	ldr	r0, [pc, #368]	; (8001804 <main+0x1a4>)
 8001694:	f001 fe64 	bl	8003360 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001698:	2104      	movs	r1, #4
 800169a:	485a      	ldr	r0, [pc, #360]	; (8001804 <main+0x1a4>)
 800169c:	f001 fe60 	bl	8003360 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart2, &RXData, 1);
 80016a0:	2201      	movs	r2, #1
 80016a2:	4959      	ldr	r1, [pc, #356]	; (8001808 <main+0x1a8>)
 80016a4:	4859      	ldr	r0, [pc, #356]	; (800180c <main+0x1ac>)
 80016a6:	f002 fece 	bl	8004446 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2110      	movs	r1, #16
 80016ae:	4858      	ldr	r0, [pc, #352]	; (8001810 <main+0x1b0>)
 80016b0:	f001 f932 	bl	8002918 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80016b4:	2201      	movs	r2, #1
 80016b6:	2120      	movs	r1, #32
 80016b8:	4855      	ldr	r0, [pc, #340]	; (8001810 <main+0x1b0>)
 80016ba:	f001 f92d 	bl	8002918 <HAL_GPIO_WritePin>
	  xuat_PWM(u_control);
 80016be:	4b55      	ldr	r3, [pc, #340]	; (8001814 <main+0x1b4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fe4c 	bl	8001360 <xuat_PWM>
	  if(ProcessFlag == 1)
 80016c8:	4b53      	ldr	r3, [pc, #332]	; (8001818 <main+0x1b8>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	f040 8090 	bne.w	80017f2 <main+0x192>
	  {
		  ProcessFlag = 0;
 80016d2:	4b51      	ldr	r3, [pc, #324]	; (8001818 <main+0x1b8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
		  switch(ProcessMode)
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <main+0x1bc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d05f      	beq.n	80017a0 <main+0x140>
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d8e2      	bhi.n	80016aa <main+0x4a>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <main+0x8e>
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d005      	beq.n	80016f8 <main+0x98>
 80016ec:	e084      	b.n	80017f8 <main+0x198>
		  {
		  case ModeIdle:
			  u_control = 0;
 80016ee:	4b49      	ldr	r3, [pc, #292]	; (8001814 <main+0x1b4>)
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
			  break;
 80016f6:	e07f      	b.n	80017f8 <main+0x198>
		  case ModePidPos:
			  PID_controller(setpoint, (float)EncPos/ppr*360, &ParaPID, &u_control);
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <main+0x1c0>)
 80016fa:	681c      	ldr	r4, [r3, #0]
 80016fc:	4b49      	ldr	r3, [pc, #292]	; (8001824 <main+0x1c4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff faeb 	bl	8000cdc <__aeabi_i2f>
 8001706:	4605      	mov	r5, r0
 8001708:	4b47      	ldr	r3, [pc, #284]	; (8001828 <main+0x1c8>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fae5 	bl	8000cdc <__aeabi_i2f>
 8001712:	4603      	mov	r3, r0
 8001714:	4619      	mov	r1, r3
 8001716:	4628      	mov	r0, r5
 8001718:	f7ff fbe8 	bl	8000eec <__aeabi_fdiv>
 800171c:	4603      	mov	r3, r0
 800171e:	4943      	ldr	r1, [pc, #268]	; (800182c <main+0x1cc>)
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fb2f 	bl	8000d84 <__aeabi_fmul>
 8001726:	4603      	mov	r3, r0
 8001728:	4619      	mov	r1, r3
 800172a:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <main+0x1b4>)
 800172c:	4a40      	ldr	r2, [pc, #256]	; (8001830 <main+0x1d0>)
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff fdbe 	bl	80012b0 <PID_controller>
			  sprintf(TXData, "%u %.1f %.2f\n", 0, ((float)EncPos/ppr*360), u_control);
 8001734:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <main+0x1c4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff facf 	bl	8000cdc <__aeabi_i2f>
 800173e:	4604      	mov	r4, r0
 8001740:	4b39      	ldr	r3, [pc, #228]	; (8001828 <main+0x1c8>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fac9 	bl	8000cdc <__aeabi_i2f>
 800174a:	4603      	mov	r3, r0
 800174c:	4619      	mov	r1, r3
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff fbcc 	bl	8000eec <__aeabi_fdiv>
 8001754:	4603      	mov	r3, r0
 8001756:	4935      	ldr	r1, [pc, #212]	; (800182c <main+0x1cc>)
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fb13 	bl	8000d84 <__aeabi_fmul>
 800175e:	4603      	mov	r3, r0
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fe61 	bl	8000428 <__aeabi_f2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <main+0x1b4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fe5a 	bl	8000428 <__aeabi_f2d>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800177c:	e9cd 4500 	strd	r4, r5, [sp]
 8001780:	2200      	movs	r2, #0
 8001782:	492c      	ldr	r1, [pc, #176]	; (8001834 <main+0x1d4>)
 8001784:	482c      	ldr	r0, [pc, #176]	; (8001838 <main+0x1d8>)
 8001786:	f004 f95f 	bl	8005a48 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t *)TXData, strlen(TXData), 30);
 800178a:	482b      	ldr	r0, [pc, #172]	; (8001838 <main+0x1d8>)
 800178c:	f7fe fce0 	bl	8000150 <strlen>
 8001790:	4603      	mov	r3, r0
 8001792:	b29a      	uxth	r2, r3
 8001794:	231e      	movs	r3, #30
 8001796:	4928      	ldr	r1, [pc, #160]	; (8001838 <main+0x1d8>)
 8001798:	481c      	ldr	r0, [pc, #112]	; (800180c <main+0x1ac>)
 800179a:	f002 fdc2 	bl	8004322 <HAL_UART_Transmit>
			  break;
 800179e:	e02b      	b.n	80017f8 <main+0x198>
		  case ModePPR:
			  if(ppr == 0)
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <main+0x1c8>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d126      	bne.n	80017f6 <main+0x196>
			  {
				  GetPPR(rpm, &ppr);
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <main+0x1dc>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	491e      	ldr	r1, [pc, #120]	; (8001828 <main+0x1c8>)
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fd2a 	bl	8001208 <GetPPR>
				  if(PPRFlag)
 80017b4:	4b22      	ldr	r3, [pc, #136]	; (8001840 <main+0x1e0>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d01c      	beq.n	80017f6 <main+0x196>
				  {
					  sprintf(TXData, "%u %u\n", 1, ppr);
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <main+0x1c8>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	2201      	movs	r2, #1
 80017c2:	4920      	ldr	r1, [pc, #128]	; (8001844 <main+0x1e4>)
 80017c4:	481c      	ldr	r0, [pc, #112]	; (8001838 <main+0x1d8>)
 80017c6:	f004 f93f 	bl	8005a48 <siprintf>
					  HAL_UART_Transmit(&huart2, (uint8_t *)TXData, strlen(TXData), 30);
 80017ca:	481b      	ldr	r0, [pc, #108]	; (8001838 <main+0x1d8>)
 80017cc:	f7fe fcc0 	bl	8000150 <strlen>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	231e      	movs	r3, #30
 80017d6:	4918      	ldr	r1, [pc, #96]	; (8001838 <main+0x1d8>)
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <main+0x1ac>)
 80017da:	f002 fda2 	bl	8004322 <HAL_UART_Transmit>
					  PPRFlag =0;
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <main+0x1e0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
					  ProcessMode = ModeIdle;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <main+0x1bc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
					  EncPos = 0;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <main+0x1c4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
				  }
			  }
			  break;
 80017f0:	e001      	b.n	80017f6 <main+0x196>
		  }

	  }
 80017f2:	bf00      	nop
 80017f4:	e759      	b.n	80016aa <main+0x4a>
			  break;
 80017f6:	bf00      	nop
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80017f8:	e757      	b.n	80016aa <main+0x4a>
 80017fa:	bf00      	nop
 80017fc:	20000334 	.word	0x20000334
 8001800:	200002b4 	.word	0x200002b4
 8001804:	20000240 	.word	0x20000240
 8001808:	20000288 	.word	0x20000288
 800180c:	20000380 	.word	0x20000380
 8001810:	40010800 	.word	0x40010800
 8001814:	20000220 	.word	0x20000220
 8001818:	20000208 	.word	0x20000208
 800181c:	20000204 	.word	0x20000204
 8001820:	20000238 	.word	0x20000238
 8001824:	2000037c 	.word	0x2000037c
 8001828:	20000004 	.word	0x20000004
 800182c:	43b40000 	.word	0x43b40000
 8001830:	20000224 	.word	0x20000224
 8001834:	08009e3c 	.word	0x08009e3c
 8001838:	2000028c 	.word	0x2000028c
 800183c:	20000002 	.word	0x20000002
 8001840:	2000020a 	.word	0x2000020a
 8001844:	08009e4c 	.word	0x08009e4c

08001848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b090      	sub	sp, #64	; 0x40
 800184c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	2228      	movs	r2, #40	; 0x28
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fa78 	bl	8004d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800186a:	2301      	movs	r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800186e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001878:	2301      	movs	r3, #1
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187c:	2302      	movs	r3, #2
 800187e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001886:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800188a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188c:	f107 0318 	add.w	r3, r7, #24
 8001890:	4618      	mov	r0, r3
 8001892:	f001 f859 	bl	8002948 <HAL_RCC_OscConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800189c:	f000 fa32 	bl	8001d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a0:	230f      	movs	r3, #15
 80018a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a4:	2302      	movs	r3, #2
 80018a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2102      	movs	r1, #2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 fac4 	bl	8002e48 <HAL_RCC_ClockConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018c6:	f000 fa1d 	bl	8001d04 <Error_Handler>
  }
}
 80018ca:	bf00      	nop
 80018cc:	3740      	adds	r7, #64	; 0x40
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	2224      	movs	r2, #36	; 0x24
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 fa32 	bl	8004d4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <MX_TIM1_Init+0xa8>)
 80018f2:	4a23      	ldr	r2, [pc, #140]	; (8001980 <MX_TIM1_Init+0xac>)
 80018f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <MX_TIM1_Init+0xa8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <MX_TIM1_Init+0xa8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <MX_TIM1_Init+0xa8>)
 8001904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001908:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190a:	4b1c      	ldr	r3, [pc, #112]	; (800197c <MX_TIM1_Init+0xa8>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <MX_TIM1_Init+0xa8>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <MX_TIM1_Init+0xa8>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800191c:	2303      	movs	r3, #3
 800191e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001924:	2301      	movs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001934:	2301      	movs	r3, #1
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	4619      	mov	r1, r3
 8001946:	480d      	ldr	r0, [pc, #52]	; (800197c <MX_TIM1_Init+0xa8>)
 8001948:	f001 fdac 	bl	80034a4 <HAL_TIM_Encoder_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001952:	f000 f9d7 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <MX_TIM1_Init+0xa8>)
 8001964:	f002 fc20 	bl	80041a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800196e:	f000 f9c9 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	3730      	adds	r7, #48	; 0x30
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200002b4 	.word	0x200002b4
 8001980:	40012c00 	.word	0x40012c00

08001984 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001998:	463b      	mov	r3, r7
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <MX_TIM2_Init+0x98>)
 80019a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 288-1;
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <MX_TIM2_Init+0x98>)
 80019aa:	f240 121f 	movw	r2, #287	; 0x11f
 80019ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_TIM2_Init+0x98>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_TIM2_Init+0x98>)
 80019b8:	f241 3287 	movw	r2, #4999	; 0x1387
 80019bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MX_TIM2_Init+0x98>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <MX_TIM2_Init+0x98>)
 80019c6:	2280      	movs	r2, #128	; 0x80
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ca:	4814      	ldr	r0, [pc, #80]	; (8001a1c <MX_TIM2_Init+0x98>)
 80019cc:	f001 fbd6 	bl	800317c <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019d6:	f000 f995 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	4619      	mov	r1, r3
 80019e6:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_TIM2_Init+0x98>)
 80019e8:	f002 f852 	bl	8003a90 <HAL_TIM_ConfigClockSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019f2:	f000 f987 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fe:	463b      	mov	r3, r7
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <MX_TIM2_Init+0x98>)
 8001a04:	f002 fbd0 	bl	80041a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a0e:	f000 f979 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000334 	.word	0x20000334

08001a20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a42:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <MX_TIM3_Init+0xc0>)
 8001a44:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <MX_TIM3_Init+0xc4>)
 8001a46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <MX_TIM3_Init+0xc0>)
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <MX_TIM3_Init+0xc0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <MX_TIM3_Init+0xc0>)
 8001a56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <MX_TIM3_Init+0xc0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <MX_TIM3_Init+0xc0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a68:	481d      	ldr	r0, [pc, #116]	; (8001ae0 <MX_TIM3_Init+0xc0>)
 8001a6a:	f001 fc29 	bl	80032c0 <HAL_TIM_PWM_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a74:	f000 f946 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a80:	f107 0320 	add.w	r3, r7, #32
 8001a84:	4619      	mov	r1, r3
 8001a86:	4816      	ldr	r0, [pc, #88]	; (8001ae0 <MX_TIM3_Init+0xc0>)
 8001a88:	f002 fb8e 	bl	80041a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a92:	f000 f937 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a96:	2360      	movs	r3, #96	; 0x60
 8001a98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <MX_TIM3_Init+0xc0>)
 8001aae:	f001 ff31 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001ab8:	f000 f924 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2204      	movs	r2, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <MX_TIM3_Init+0xc0>)
 8001ac4:	f001 ff26 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001ace:	f000 f919 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ad2:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <MX_TIM3_Init+0xc0>)
 8001ad4:	f000 f9d0 	bl	8001e78 <HAL_TIM_MspPostInit>

}
 8001ad8:	bf00      	nop
 8001ada:	3728      	adds	r7, #40	; 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000240 	.word	0x20000240
 8001ae4:	40000400 	.word	0x40000400

08001ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <MX_USART2_UART_Init+0x50>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b20:	f002 fbb2 	bl	8004288 <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b2a:	f000 f8eb 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000380 	.word	0x20000380
 8001b38:	40004400 	.word	0x40004400

08001b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_GPIO_Init+0x74>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <MX_GPIO_Init+0x74>)
 8001b56:	f043 0320 	orr.w	r3, r3, #32
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <MX_GPIO_Init+0x74>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_GPIO_Init+0x74>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <MX_GPIO_Init+0x74>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_GPIO_Init+0x74>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2130      	movs	r1, #48	; 0x30
 8001b84:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <MX_GPIO_Init+0x78>)
 8001b86:	f000 fec7 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b8a:	2330      	movs	r3, #48	; 0x30
 8001b8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2302      	movs	r3, #2
 8001b98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <MX_GPIO_Init+0x78>)
 8001ba2:	f000 fd35 	bl	8002610 <HAL_GPIO_Init>

}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010800 	.word	0x40010800

08001bb8 <init_Encx1>:

/* USER CODE BEGIN 4 */

void init_Encx1(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN TIM3_Init 0 */

	  /* USER CODE END TIM3_Init 0 */

	  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	2224      	movs	r2, #36	; 0x24
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 f8c0 	bl	8004d4c <memset>
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]


	  htim1.Instance = TIM1;
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <init_Encx1+0xa0>)
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <init_Encx1+0xa4>)
 8001bd8:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 3;
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <init_Encx1+0xa0>)
 8001bdc:	2203      	movs	r2, #3
 8001bde:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <init_Encx1+0xa0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = 65535;
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <init_Encx1+0xa0>)
 8001be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bec:	60da      	str	r2, [r3, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <init_Encx1+0xa0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <init_Encx1+0xa0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
	  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	60fb      	str	r3, [r7, #12]
	  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
	  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c02:	2301      	movs	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
	  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
	  sConfig.IC1Filter = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
	  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
	  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c12:	2301      	movs	r3, #1
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
	  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
	  sConfig.IC2Filter = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4619      	mov	r1, r3
 8001c24:	480c      	ldr	r0, [pc, #48]	; (8001c58 <init_Encx1+0xa0>)
 8001c26:	f001 fc3d 	bl	80034a4 <HAL_TIM_Encoder_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <init_Encx1+0x7c>
	  {
	    Error_Handler();
 8001c30:	f000 f868 	bl	8001d04 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <init_Encx1+0xa0>)
 8001c42:	f002 fab1 	bl	80041a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <init_Encx1+0x98>
	  {
	    Error_Handler();
 8001c4c:	f000 f85a 	bl	8001d04 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM3_Init 2 */

	  /* USER CODE END TIM3_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	3730      	adds	r7, #48	; 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200002b4 	.word	0x200002b4
 8001c5c:	40012c00 	.word	0x40012c00

08001c60 <init_Encx4>:

void init_Encx4(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN TIM3_Init 0 */

	  /* USER CODE END TIM3_Init 0 */

	  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	2224      	movs	r2, #36	; 0x24
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 f86c 	bl	8004d4c <memset>
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]

	  /* USER CODE BEGIN TIM3_Init 1 */

	  /* USER CODE END TIM3_Init 1 */
	  htim1.Instance = TIM1;
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <init_Encx4+0x9c>)
 8001c7e:	4a20      	ldr	r2, [pc, #128]	; (8001d00 <init_Encx4+0xa0>)
 8001c80:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 0;
 8001c82:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <init_Encx4+0x9c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c88:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <init_Encx4+0x9c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = 65535;
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <init_Encx4+0x9c>)
 8001c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c94:	60da      	str	r2, [r3, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <init_Encx4+0x9c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
	  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	60fb      	str	r3, [r7, #12]
	  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
	  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
	  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
	  sConfig.IC1Filter = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
	  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
	  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
	  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
	  sConfig.IC2Filter = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480d      	ldr	r0, [pc, #52]	; (8001cfc <init_Encx4+0x9c>)
 8001cc8:	f001 fbec 	bl	80034a4 <HAL_TIM_Encoder_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <init_Encx4+0x76>
	  {
	    Error_Handler();
 8001cd2:	f000 f817 	bl	8001d04 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4806      	ldr	r0, [pc, #24]	; (8001cfc <init_Encx4+0x9c>)
 8001ce4:	f002 fa60 	bl	80041a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <init_Encx4+0x92>
	  {
	    Error_Handler();
 8001cee:	f000 f809 	bl	8001d04 <Error_Handler>
	  }


}
 8001cf2:	bf00      	nop
 8001cf4:	3730      	adds	r7, #48	; 0x30
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200002b4 	.word	0x200002b4
 8001d00:	40012c00 	.word	0x40012c00

08001d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d08:	b672      	cpsid	i
}
 8001d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <Error_Handler+0x8>
	...

08001d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6193      	str	r3, [r2, #24]
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_MspInit+0x60>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_MspInit+0x60>)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010000 	.word	0x40010000

08001d74 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d124      	bne.n	8001dde <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d94:	4b15      	ldr	r3, [pc, #84]	; (8001dec <HAL_TIM_Encoder_MspInit+0x78>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <HAL_TIM_Encoder_MspInit+0x78>)
 8001d9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_TIM_Encoder_MspInit+0x78>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_TIM_Encoder_MspInit+0x78>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <HAL_TIM_Encoder_MspInit+0x78>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_TIM_Encoder_MspInit+0x78>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0310 	add.w	r3, r7, #16
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	; (8001df0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001dda:	f000 fc19 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40010800 	.word	0x40010800

08001df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e04:	d113      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_TIM_Base_MspInit+0x44>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <HAL_TIM_Base_MspInit+0x44>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_TIM_Base_MspInit+0x44>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2101      	movs	r1, #1
 8001e22:	201c      	movs	r0, #28
 8001e24:	f000 fb0d 	bl	8002442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e28:	201c      	movs	r0, #28
 8001e2a:	f000 fb26 	bl	800247a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000

08001e3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_TIM_PWM_MspInit+0x34>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10b      	bne.n	8001e66 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_TIM_PWM_MspInit+0x38>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a08      	ldr	r2, [pc, #32]	; (8001e74 <HAL_TIM_PWM_MspInit+0x38>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	61d3      	str	r3, [r2, #28]
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_TIM_PWM_MspInit+0x38>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	40000400 	.word	0x40000400
 8001e74:	40021000 	.word	0x40021000

08001e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_TIM_MspPostInit+0x58>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d117      	bne.n	8001ec8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_TIM_MspPostInit+0x5c>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <HAL_TIM_MspPostInit+0x5c>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_TIM_MspPostInit+0x5c>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eb0:	23c0      	movs	r3, #192	; 0xc0
 8001eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <HAL_TIM_MspPostInit+0x60>)
 8001ec4:	f000 fba4 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ec8:	bf00      	nop
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40010800 	.word	0x40010800

08001edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <HAL_UART_MspInit+0x98>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d137      	bne.n	8001f6c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_UART_MspInit+0x9c>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <HAL_UART_MspInit+0x9c>)
 8001f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f06:	61d3      	str	r3, [r2, #28]
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_UART_MspInit+0x9c>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_UART_MspInit+0x9c>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_UART_MspInit+0x9c>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_UART_MspInit+0x9c>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480f      	ldr	r0, [pc, #60]	; (8001f7c <HAL_UART_MspInit+0xa0>)
 8001f40:	f000 fb66 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f44:	2308      	movs	r3, #8
 8001f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	4619      	mov	r1, r3
 8001f56:	4809      	ldr	r0, [pc, #36]	; (8001f7c <HAL_UART_MspInit+0xa0>)
 8001f58:	f000 fb5a 	bl	8002610 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2101      	movs	r1, #1
 8001f60:	2026      	movs	r0, #38	; 0x26
 8001f62:	f000 fa6e 	bl	8002442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f66:	2026      	movs	r0, #38	; 0x26
 8001f68:	f000 fa87 	bl	800247a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f6c:	bf00      	nop
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40004400 	.word	0x40004400
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010800 	.word	0x40010800

08001f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <NMI_Handler+0x4>

08001f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <MemManage_Handler+0x4>

08001f92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <BusFault_Handler+0x4>

08001f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <UsageFault_Handler+0x4>

08001f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc6:	f000 f949 	bl	800225c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <TIM2_IRQHandler+0x10>)
 8001fd6:	f001 fb95 	bl	8003704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000334 	.word	0x20000334

08001fe4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <USART2_IRQHandler+0x10>)
 8001fea:	f002 fa5d 	bl	80044a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000380 	.word	0x20000380

08001ff8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
	return 1;
 8001ffc:	2301      	movs	r3, #1
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <_kill>:

int _kill(int pid, int sig)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002010:	f002 fe72 	bl	8004cf8 <__errno>
 8002014:	4603      	mov	r3, r0
 8002016:	2216      	movs	r2, #22
 8002018:	601a      	str	r2, [r3, #0]
	return -1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_exit>:

void _exit (int status)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800202e:	f04f 31ff 	mov.w	r1, #4294967295
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffe7 	bl	8002006 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002038:	e7fe      	b.n	8002038 <_exit+0x12>

0800203a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	e00a      	b.n	8002062 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800204c:	f3af 8000 	nop.w
 8002050:	4601      	mov	r1, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	60ba      	str	r2, [r7, #8]
 8002058:	b2ca      	uxtb	r2, r1
 800205a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	dbf0      	blt.n	800204c <_read+0x12>
	}

return len;
 800206a:	687b      	ldr	r3, [r7, #4]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e009      	b.n	800209a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	60ba      	str	r2, [r7, #8]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3301      	adds	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	429a      	cmp	r2, r3
 80020a0:	dbf1      	blt.n	8002086 <_write+0x12>
	}
	return len;
 80020a2:	687b      	ldr	r3, [r7, #4]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_close>:

int _close(int file)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	return -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d2:	605a      	str	r2, [r3, #4]
	return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <_isatty>:

int _isatty(int file)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	return 1;
 80020e8:	2301      	movs	r3, #1
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002114:	4a14      	ldr	r2, [pc, #80]	; (8002168 <_sbrk+0x5c>)
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <_sbrk+0x60>)
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <_sbrk+0x64>)
 800212a:	4a12      	ldr	r2, [pc, #72]	; (8002174 <_sbrk+0x68>)
 800212c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	429a      	cmp	r2, r3
 800213a:	d207      	bcs.n	800214c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800213c:	f002 fddc 	bl	8004cf8 <__errno>
 8002140:	4603      	mov	r3, r0
 8002142:	220c      	movs	r2, #12
 8002144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	e009      	b.n	8002160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <_sbrk+0x64>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <_sbrk+0x64>)
 800215c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215e:	68fb      	ldr	r3, [r7, #12]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20005000 	.word	0x20005000
 800216c:	00000400 	.word	0x00000400
 8002170:	20000210 	.word	0x20000210
 8002174:	200003d8 	.word	0x200003d8

08002178 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002184:	480c      	ldr	r0, [pc, #48]	; (80021b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002186:	490d      	ldr	r1, [pc, #52]	; (80021bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800219c:	4c0a      	ldr	r4, [pc, #40]	; (80021c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021aa:	f7ff ffe5 	bl	8002178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ae:	f002 fda9 	bl	8004d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021b2:	f7ff fa55 	bl	8001660 <main>
  bx lr
 80021b6:	4770      	bx	lr
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80021c0:	0800a35c 	.word	0x0800a35c
  ldr r2, =_sbss
 80021c4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80021c8:	200003d8 	.word	0x200003d8

080021cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC1_2_IRQHandler>
	...

080021d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_Init+0x28>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <HAL_Init+0x28>)
 80021da:	f043 0310 	orr.w	r3, r3, #16
 80021de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f000 f923 	bl	800242c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e6:	200f      	movs	r0, #15
 80021e8:	f000 f808 	bl	80021fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ec:	f7ff fd90 	bl	8001d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40022000 	.word	0x40022000

080021fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_InitTick+0x54>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_InitTick+0x58>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002212:	fbb3 f3f1 	udiv	r3, r3, r1
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f93b 	bl	8002496 <HAL_SYSTICK_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00e      	b.n	8002248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b0f      	cmp	r3, #15
 800222e:	d80a      	bhi.n	8002246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002230:	2200      	movs	r2, #0
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f000 f903 	bl	8002442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <HAL_InitTick+0x5c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000008 	.word	0x20000008
 8002254:	20000010 	.word	0x20000010
 8002258:	2000000c 	.word	0x2000000c

0800225c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_IncTick+0x1c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_IncTick+0x20>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a03      	ldr	r2, [pc, #12]	; (800227c <HAL_IncTick+0x20>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	20000010 	.word	0x20000010
 800227c:	200003c4 	.word	0x200003c4

08002280 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return uwTick;
 8002284:	4b02      	ldr	r3, [pc, #8]	; (8002290 <HAL_GetTick+0x10>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	200003c4 	.word	0x200003c4

08002294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b0:	4013      	ands	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c6:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	60d3      	str	r3, [r2, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <__NVIC_GetPriorityGrouping+0x18>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	f003 0307 	and.w	r3, r3, #7
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	2b00      	cmp	r3, #0
 8002308:	db0b      	blt.n	8002322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	4906      	ldr	r1, [pc, #24]	; (800232c <__NVIC_EnableIRQ+0x34>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2001      	movs	r0, #1
 800231a:	fa00 f202 	lsl.w	r2, r0, r2
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100

08002330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	2b00      	cmp	r3, #0
 8002342:	db0a      	blt.n	800235a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	490c      	ldr	r1, [pc, #48]	; (800237c <__NVIC_SetPriority+0x4c>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	440b      	add	r3, r1
 8002354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002358:	e00a      	b.n	8002370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4908      	ldr	r1, [pc, #32]	; (8002380 <__NVIC_SetPriority+0x50>)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3b04      	subs	r3, #4
 8002368:	0112      	lsls	r2, r2, #4
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	440b      	add	r3, r1
 800236e:	761a      	strb	r2, [r3, #24]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000e100 	.word	0xe000e100
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f1c3 0307 	rsb	r3, r3, #7
 800239e:	2b04      	cmp	r3, #4
 80023a0:	bf28      	it	cs
 80023a2:	2304      	movcs	r3, #4
 80023a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d902      	bls.n	80023b4 <NVIC_EncodePriority+0x30>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3b03      	subs	r3, #3
 80023b2:	e000      	b.n	80023b6 <NVIC_EncodePriority+0x32>
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43d9      	mvns	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	4313      	orrs	r3, r2
         );
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f8:	d301      	bcc.n	80023fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00f      	b.n	800241e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <SysTick_Config+0x40>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002406:	210f      	movs	r1, #15
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f7ff ff90 	bl	8002330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <SysTick_Config+0x40>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <SysTick_Config+0x40>)
 8002418:	2207      	movs	r2, #7
 800241a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	e000e010 	.word	0xe000e010

0800242c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff2d 	bl	8002294 <__NVIC_SetPriorityGrouping>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002454:	f7ff ff42 	bl	80022dc <__NVIC_GetPriorityGrouping>
 8002458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7ff ff90 	bl	8002384 <NVIC_EncodePriority>
 8002464:	4602      	mov	r2, r0
 8002466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff5f 	bl	8002330 <__NVIC_SetPriority>
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff35 	bl	80022f8 <__NVIC_EnableIRQ>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ffa2 	bl	80023e8 <SysTick_Config>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d008      	beq.n	80024d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2204      	movs	r2, #4
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e020      	b.n	8002518 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 020e 	bic.w	r2, r2, #14
 80024e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	2101      	movs	r1, #1
 8002500:	fa01 f202 	lsl.w	r2, r1, r2
 8002504:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002516:	7bfb      	ldrb	r3, [r7, #15]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
	...

08002524 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002536:	2b02      	cmp	r3, #2
 8002538:	d005      	beq.n	8002546 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2204      	movs	r2, #4
 800253e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	e051      	b.n	80025ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 020e 	bic.w	r2, r2, #14
 8002554:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <HAL_DMA_Abort_IT+0xd0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d029      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xa0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <HAL_DMA_Abort_IT+0xd4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d022      	beq.n	80025c0 <HAL_DMA_Abort_IT+0x9c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1f      	ldr	r2, [pc, #124]	; (80025fc <HAL_DMA_Abort_IT+0xd8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d01a      	beq.n	80025ba <HAL_DMA_Abort_IT+0x96>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <HAL_DMA_Abort_IT+0xdc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d012      	beq.n	80025b4 <HAL_DMA_Abort_IT+0x90>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <HAL_DMA_Abort_IT+0xe0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d00a      	beq.n	80025ae <HAL_DMA_Abort_IT+0x8a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <HAL_DMA_Abort_IT+0xe4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d102      	bne.n	80025a8 <HAL_DMA_Abort_IT+0x84>
 80025a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025a6:	e00e      	b.n	80025c6 <HAL_DMA_Abort_IT+0xa2>
 80025a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ac:	e00b      	b.n	80025c6 <HAL_DMA_Abort_IT+0xa2>
 80025ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b2:	e008      	b.n	80025c6 <HAL_DMA_Abort_IT+0xa2>
 80025b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b8:	e005      	b.n	80025c6 <HAL_DMA_Abort_IT+0xa2>
 80025ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025be:	e002      	b.n	80025c6 <HAL_DMA_Abort_IT+0xa2>
 80025c0:	2310      	movs	r3, #16
 80025c2:	e000      	b.n	80025c6 <HAL_DMA_Abort_IT+0xa2>
 80025c4:	2301      	movs	r3, #1
 80025c6:	4a11      	ldr	r2, [pc, #68]	; (800260c <HAL_DMA_Abort_IT+0xe8>)
 80025c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
    } 
  }
  return status;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40020008 	.word	0x40020008
 80025f8:	4002001c 	.word	0x4002001c
 80025fc:	40020030 	.word	0x40020030
 8002600:	40020044 	.word	0x40020044
 8002604:	40020058 	.word	0x40020058
 8002608:	4002006c 	.word	0x4002006c
 800260c:	40020000 	.word	0x40020000

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b08b      	sub	sp, #44	; 0x2c
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261a:	2300      	movs	r3, #0
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002622:	e169      	b.n	80028f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002624:	2201      	movs	r2, #1
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	429a      	cmp	r2, r3
 800263e:	f040 8158 	bne.w	80028f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a9a      	ldr	r2, [pc, #616]	; (80028b0 <HAL_GPIO_Init+0x2a0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d05e      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 800264c:	4a98      	ldr	r2, [pc, #608]	; (80028b0 <HAL_GPIO_Init+0x2a0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d875      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002652:	4a98      	ldr	r2, [pc, #608]	; (80028b4 <HAL_GPIO_Init+0x2a4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d058      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002658:	4a96      	ldr	r2, [pc, #600]	; (80028b4 <HAL_GPIO_Init+0x2a4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d86f      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800265e:	4a96      	ldr	r2, [pc, #600]	; (80028b8 <HAL_GPIO_Init+0x2a8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d052      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002664:	4a94      	ldr	r2, [pc, #592]	; (80028b8 <HAL_GPIO_Init+0x2a8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d869      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800266a:	4a94      	ldr	r2, [pc, #592]	; (80028bc <HAL_GPIO_Init+0x2ac>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d04c      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002670:	4a92      	ldr	r2, [pc, #584]	; (80028bc <HAL_GPIO_Init+0x2ac>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d863      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002676:	4a92      	ldr	r2, [pc, #584]	; (80028c0 <HAL_GPIO_Init+0x2b0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d046      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 800267c:	4a90      	ldr	r2, [pc, #576]	; (80028c0 <HAL_GPIO_Init+0x2b0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d85d      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002682:	2b12      	cmp	r3, #18
 8002684:	d82a      	bhi.n	80026dc <HAL_GPIO_Init+0xcc>
 8002686:	2b12      	cmp	r3, #18
 8002688:	d859      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800268a:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <HAL_GPIO_Init+0x80>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	0800270b 	.word	0x0800270b
 8002694:	080026e5 	.word	0x080026e5
 8002698:	080026f7 	.word	0x080026f7
 800269c:	08002739 	.word	0x08002739
 80026a0:	0800273f 	.word	0x0800273f
 80026a4:	0800273f 	.word	0x0800273f
 80026a8:	0800273f 	.word	0x0800273f
 80026ac:	0800273f 	.word	0x0800273f
 80026b0:	0800273f 	.word	0x0800273f
 80026b4:	0800273f 	.word	0x0800273f
 80026b8:	0800273f 	.word	0x0800273f
 80026bc:	0800273f 	.word	0x0800273f
 80026c0:	0800273f 	.word	0x0800273f
 80026c4:	0800273f 	.word	0x0800273f
 80026c8:	0800273f 	.word	0x0800273f
 80026cc:	0800273f 	.word	0x0800273f
 80026d0:	0800273f 	.word	0x0800273f
 80026d4:	080026ed 	.word	0x080026ed
 80026d8:	08002701 	.word	0x08002701
 80026dc:	4a79      	ldr	r2, [pc, #484]	; (80028c4 <HAL_GPIO_Init+0x2b4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026e2:	e02c      	b.n	800273e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	623b      	str	r3, [r7, #32]
          break;
 80026ea:	e029      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	3304      	adds	r3, #4
 80026f2:	623b      	str	r3, [r7, #32]
          break;
 80026f4:	e024      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	3308      	adds	r3, #8
 80026fc:	623b      	str	r3, [r7, #32]
          break;
 80026fe:	e01f      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	330c      	adds	r3, #12
 8002706:	623b      	str	r3, [r7, #32]
          break;
 8002708:	e01a      	b.n	8002740 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d102      	bne.n	8002718 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002712:	2304      	movs	r3, #4
 8002714:	623b      	str	r3, [r7, #32]
          break;
 8002716:	e013      	b.n	8002740 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002720:	2308      	movs	r3, #8
 8002722:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	611a      	str	r2, [r3, #16]
          break;
 800272a:	e009      	b.n	8002740 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800272c:	2308      	movs	r3, #8
 800272e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	615a      	str	r2, [r3, #20]
          break;
 8002736:	e003      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
          break;
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x130>
          break;
 800273e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	d801      	bhi.n	800274a <HAL_GPIO_Init+0x13a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	e001      	b.n	800274e <HAL_GPIO_Init+0x13e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2bff      	cmp	r3, #255	; 0xff
 8002754:	d802      	bhi.n	800275c <HAL_GPIO_Init+0x14c>
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	e002      	b.n	8002762 <HAL_GPIO_Init+0x152>
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	3b08      	subs	r3, #8
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	210f      	movs	r1, #15
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	401a      	ands	r2, r3
 8002774:	6a39      	ldr	r1, [r7, #32]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	431a      	orrs	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80b1 	beq.w	80028f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002790:	4b4d      	ldr	r3, [pc, #308]	; (80028c8 <HAL_GPIO_Init+0x2b8>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a4c      	ldr	r2, [pc, #304]	; (80028c8 <HAL_GPIO_Init+0x2b8>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <HAL_GPIO_Init+0x2b8>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027a8:	4a48      	ldr	r2, [pc, #288]	; (80028cc <HAL_GPIO_Init+0x2bc>)
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a40      	ldr	r2, [pc, #256]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d013      	beq.n	80027fc <HAL_GPIO_Init+0x1ec>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3f      	ldr	r2, [pc, #252]	; (80028d4 <HAL_GPIO_Init+0x2c4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00d      	beq.n	80027f8 <HAL_GPIO_Init+0x1e8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3e      	ldr	r2, [pc, #248]	; (80028d8 <HAL_GPIO_Init+0x2c8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d007      	beq.n	80027f4 <HAL_GPIO_Init+0x1e4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a3d      	ldr	r2, [pc, #244]	; (80028dc <HAL_GPIO_Init+0x2cc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_GPIO_Init+0x1e0>
 80027ec:	2303      	movs	r3, #3
 80027ee:	e006      	b.n	80027fe <HAL_GPIO_Init+0x1ee>
 80027f0:	2304      	movs	r3, #4
 80027f2:	e004      	b.n	80027fe <HAL_GPIO_Init+0x1ee>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e002      	b.n	80027fe <HAL_GPIO_Init+0x1ee>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_GPIO_Init+0x1ee>
 80027fc:	2300      	movs	r3, #0
 80027fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002800:	f002 0203 	and.w	r2, r2, #3
 8002804:	0092      	lsls	r2, r2, #2
 8002806:	4093      	lsls	r3, r2
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800280e:	492f      	ldr	r1, [pc, #188]	; (80028cc <HAL_GPIO_Init+0x2bc>)
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	3302      	adds	r3, #2
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002828:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	492c      	ldr	r1, [pc, #176]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e006      	b.n	8002844 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	43db      	mvns	r3, r3
 800283e:	4928      	ldr	r1, [pc, #160]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002840:	4013      	ands	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002850:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	4922      	ldr	r1, [pc, #136]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
 800285c:	e006      	b.n	800286c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	43db      	mvns	r3, r3
 8002866:	491e      	ldr	r1, [pc, #120]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002868:	4013      	ands	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	4918      	ldr	r1, [pc, #96]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]
 8002884:	e006      	b.n	8002894 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002886:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	43db      	mvns	r3, r3
 800288e:	4914      	ldr	r1, [pc, #80]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002890:	4013      	ands	r3, r2
 8002892:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d021      	beq.n	80028e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	490e      	ldr	r1, [pc, #56]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60cb      	str	r3, [r1, #12]
 80028ac:	e021      	b.n	80028f2 <HAL_GPIO_Init+0x2e2>
 80028ae:	bf00      	nop
 80028b0:	10320000 	.word	0x10320000
 80028b4:	10310000 	.word	0x10310000
 80028b8:	10220000 	.word	0x10220000
 80028bc:	10210000 	.word	0x10210000
 80028c0:	10120000 	.word	0x10120000
 80028c4:	10110000 	.word	0x10110000
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40010000 	.word	0x40010000
 80028d0:	40010800 	.word	0x40010800
 80028d4:	40010c00 	.word	0x40010c00
 80028d8:	40011000 	.word	0x40011000
 80028dc:	40011400 	.word	0x40011400
 80028e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_GPIO_Init+0x304>)
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	4909      	ldr	r1, [pc, #36]	; (8002914 <HAL_GPIO_Init+0x304>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3301      	adds	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	f47f ae8e 	bne.w	8002624 <HAL_GPIO_Init+0x14>
  }
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	372c      	adds	r7, #44	; 0x2c
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	40010400 	.word	0x40010400

08002918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
 8002924:	4613      	mov	r3, r2
 8002926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002928:	787b      	ldrb	r3, [r7, #1]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002934:	e003      	b.n	800293e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002936:	887b      	ldrh	r3, [r7, #2]
 8002938:	041a      	lsls	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	611a      	str	r2, [r3, #16]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e26c      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8087 	beq.w	8002a76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002968:	4b92      	ldr	r3, [pc, #584]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b04      	cmp	r3, #4
 8002972:	d00c      	beq.n	800298e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002974:	4b8f      	ldr	r3, [pc, #572]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b08      	cmp	r3, #8
 800297e:	d112      	bne.n	80029a6 <HAL_RCC_OscConfig+0x5e>
 8002980:	4b8c      	ldr	r3, [pc, #560]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d10b      	bne.n	80029a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298e:	4b89      	ldr	r3, [pc, #548]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d06c      	beq.n	8002a74 <HAL_RCC_OscConfig+0x12c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d168      	bne.n	8002a74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e246      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x76>
 80029b0:	4b80      	ldr	r3, [pc, #512]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7f      	ldr	r2, [pc, #508]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	e02e      	b.n	8002a1c <HAL_RCC_OscConfig+0xd4>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x98>
 80029c6:	4b7b      	ldr	r3, [pc, #492]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a7a      	ldr	r2, [pc, #488]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b78      	ldr	r3, [pc, #480]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a77      	ldr	r2, [pc, #476]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e01d      	b.n	8002a1c <HAL_RCC_OscConfig+0xd4>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0xbc>
 80029ea:	4b72      	ldr	r3, [pc, #456]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a71      	ldr	r2, [pc, #452]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b6f      	ldr	r3, [pc, #444]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6e      	ldr	r2, [pc, #440]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e00b      	b.n	8002a1c <HAL_RCC_OscConfig+0xd4>
 8002a04:	4b6b      	ldr	r3, [pc, #428]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a6a      	ldr	r2, [pc, #424]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b68      	ldr	r3, [pc, #416]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a67      	ldr	r2, [pc, #412]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7ff fc2c 	bl	8002280 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7ff fc28 	bl	8002280 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e1fa      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0xe4>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7ff fc18 	bl	8002280 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a54:	f7ff fc14 	bl	8002280 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1e6      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x10c>
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d063      	beq.n	8002b4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a82:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a8e:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d11c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x18c>
 8002a9a:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d116      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_RCC_OscConfig+0x176>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e1ba      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4939      	ldr	r1, [pc, #228]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad2:	e03a      	b.n	8002b4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_RCC_OscConfig+0x270>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7ff fbcd 	bl	8002280 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aea:	f7ff fbc9 	bl	8002280 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e19b      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b2a      	ldr	r3, [pc, #168]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4927      	ldr	r1, [pc, #156]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <HAL_RCC_OscConfig+0x270>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7ff fbac 	bl	8002280 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7ff fba8 	bl	8002280 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e17a      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d03a      	beq.n	8002bcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d019      	beq.n	8002b92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b64:	f7ff fb8c 	bl	8002280 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7ff fb88 	bl	8002280 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e15a      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f000 fad8 	bl	8003140 <RCC_Delay>
 8002b90:	e01c      	b.n	8002bcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b98:	f7ff fb72 	bl	8002280 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9e:	e00f      	b.n	8002bc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7ff fb6e 	bl	8002280 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d908      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e140      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	42420000 	.word	0x42420000
 8002bbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	4b9e      	ldr	r3, [pc, #632]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e9      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80a6 	beq.w	8002d26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bde:	4b97      	ldr	r3, [pc, #604]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	4b94      	ldr	r3, [pc, #592]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a93      	ldr	r2, [pc, #588]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	61d3      	str	r3, [r2, #28]
 8002bf6:	4b91      	ldr	r3, [pc, #580]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c02:	2301      	movs	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c06:	4b8e      	ldr	r3, [pc, #568]	; (8002e40 <HAL_RCC_OscConfig+0x4f8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d118      	bne.n	8002c44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c12:	4b8b      	ldr	r3, [pc, #556]	; (8002e40 <HAL_RCC_OscConfig+0x4f8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a8a      	ldr	r2, [pc, #552]	; (8002e40 <HAL_RCC_OscConfig+0x4f8>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1e:	f7ff fb2f 	bl	8002280 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c26:	f7ff fb2b 	bl	8002280 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b64      	cmp	r3, #100	; 0x64
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e0fd      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	4b81      	ldr	r3, [pc, #516]	; (8002e40 <HAL_RCC_OscConfig+0x4f8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x312>
 8002c4c:	4b7b      	ldr	r3, [pc, #492]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4a7a      	ldr	r2, [pc, #488]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6213      	str	r3, [r2, #32]
 8002c58:	e02d      	b.n	8002cb6 <HAL_RCC_OscConfig+0x36e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x334>
 8002c62:	4b76      	ldr	r3, [pc, #472]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4a75      	ldr	r2, [pc, #468]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6213      	str	r3, [r2, #32]
 8002c6e:	4b73      	ldr	r3, [pc, #460]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a72      	ldr	r2, [pc, #456]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	6213      	str	r3, [r2, #32]
 8002c7a:	e01c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x36e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d10c      	bne.n	8002c9e <HAL_RCC_OscConfig+0x356>
 8002c84:	4b6d      	ldr	r3, [pc, #436]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a6c      	ldr	r2, [pc, #432]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6213      	str	r3, [r2, #32]
 8002c90:	4b6a      	ldr	r3, [pc, #424]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4a69      	ldr	r2, [pc, #420]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6213      	str	r3, [r2, #32]
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x36e>
 8002c9e:	4b67      	ldr	r3, [pc, #412]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4a66      	ldr	r2, [pc, #408]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	6213      	str	r3, [r2, #32]
 8002caa:	4b64      	ldr	r3, [pc, #400]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4a63      	ldr	r2, [pc, #396]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002cb0:	f023 0304 	bic.w	r3, r3, #4
 8002cb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d015      	beq.n	8002cea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbe:	f7ff fadf 	bl	8002280 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7ff fadb 	bl	8002280 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e0ab      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	4b57      	ldr	r3, [pc, #348]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ee      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x37e>
 8002ce8:	e014      	b.n	8002d14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cea:	f7ff fac9 	bl	8002280 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7ff fac5 	bl	8002280 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e095      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	4b4c      	ldr	r3, [pc, #304]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ee      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b48      	ldr	r3, [pc, #288]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4a47      	ldr	r2, [pc, #284]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8081 	beq.w	8002e32 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d30:	4b42      	ldr	r3, [pc, #264]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d061      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d146      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <HAL_RCC_OscConfig+0x4fc>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4a:	f7ff fa99 	bl	8002280 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d52:	f7ff fa95 	bl	8002280 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e067      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d64:	4b35      	ldr	r3, [pc, #212]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d108      	bne.n	8002d8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d7a:	4b30      	ldr	r3, [pc, #192]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	492d      	ldr	r1, [pc, #180]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d8c:	4b2b      	ldr	r3, [pc, #172]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a19      	ldr	r1, [r3, #32]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	4927      	ldr	r1, [pc, #156]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_RCC_OscConfig+0x4fc>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7ff fa69 	bl	8002280 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db2:	f7ff fa65 	bl	8002280 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e037      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x46a>
 8002dd0:	e02f      	b.n	8002e32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <HAL_RCC_OscConfig+0x4fc>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7ff fa52 	bl	8002280 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7ff fa4e 	bl	8002280 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e020      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df2:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x498>
 8002dfe:	e018      	b.n	8002e32 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e013      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40007000 	.word	0x40007000
 8002e44:	42420060 	.word	0x42420060

08002e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0d0      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d910      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b67      	ldr	r3, [pc, #412]	; (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 0207 	bic.w	r2, r3, #7
 8002e72:	4965      	ldr	r1, [pc, #404]	; (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b63      	ldr	r3, [pc, #396]	; (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0b8      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d020      	beq.n	8002eda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea4:	4b59      	ldr	r3, [pc, #356]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a58      	ldr	r2, [pc, #352]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ebc:	4b53      	ldr	r3, [pc, #332]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a52      	ldr	r2, [pc, #328]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ec6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b50      	ldr	r3, [pc, #320]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	494d      	ldr	r1, [pc, #308]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d040      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d115      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e07f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e073      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	4b3d      	ldr	r3, [pc, #244]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e06b      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	4b39      	ldr	r3, [pc, #228]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4936      	ldr	r1, [pc, #216]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f38:	f7ff f9a2 	bl	8002280 <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7ff f99e 	bl	8002280 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e053      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 020c 	and.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1eb      	bne.n	8002f40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b27      	ldr	r3, [pc, #156]	; (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d210      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 0207 	bic.w	r2, r3, #7
 8002f7e:	4922      	ldr	r1, [pc, #136]	; (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b20      	ldr	r3, [pc, #128]	; (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e032      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4916      	ldr	r1, [pc, #88]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	490e      	ldr	r1, [pc, #56]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fd6:	f000 f821 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	490a      	ldr	r1, [pc, #40]	; (8003010 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe8:	5ccb      	ldrb	r3, [r1, r3]
 8002fea:	fa22 f303 	lsr.w	r3, r2, r3
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <HAL_RCC_ClockConfig+0x1cc>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_RCC_ClockConfig+0x1d0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff f900 	bl	80021fc <HAL_InitTick>

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40022000 	.word	0x40022000
 800300c:	40021000 	.word	0x40021000
 8003010:	08009e70 	.word	0x08009e70
 8003014:	20000008 	.word	0x20000008
 8003018:	2000000c 	.word	0x2000000c

0800301c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800301c:	b490      	push	{r4, r7}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003022:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003024:	1d3c      	adds	r4, r7, #4
 8003026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003028:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800302c:	f240 2301 	movw	r3, #513	; 0x201
 8003030:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	2300      	movs	r3, #0
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003046:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b04      	cmp	r3, #4
 8003054:	d002      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x40>
 8003056:	2b08      	cmp	r3, #8
 8003058:	d003      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0x46>
 800305a:	e02d      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800305c:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800305e:	623b      	str	r3, [r7, #32]
      break;
 8003060:	e02d      	b.n	80030be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	0c9b      	lsrs	r3, r3, #18
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800306e:	4413      	add	r3, r2
 8003070:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003074:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0c5b      	lsrs	r3, r3, #17
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800308e:	4413      	add	r3, r2
 8003090:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003094:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	4a0e      	ldr	r2, [pc, #56]	; (80030d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800309a:	fb02 f203 	mul.w	r2, r2, r3
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
 80030a6:	e004      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	623b      	str	r3, [r7, #32]
      break;
 80030b6:	e002      	b.n	80030be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ba:	623b      	str	r3, [r7, #32]
      break;
 80030bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030be:	6a3b      	ldr	r3, [r7, #32]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3728      	adds	r7, #40	; 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc90      	pop	{r4, r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	08009e54 	.word	0x08009e54
 80030d0:	40021000 	.word	0x40021000
 80030d4:	007a1200 	.word	0x007a1200
 80030d8:	003d0900 	.word	0x003d0900

080030dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e0:	4b02      	ldr	r3, [pc, #8]	; (80030ec <HAL_RCC_GetHCLKFreq+0x10>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	20000008 	.word	0x20000008

080030f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030f4:	f7ff fff2 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	4903      	ldr	r1, [pc, #12]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003106:	5ccb      	ldrb	r3, [r1, r3]
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	08009e80 	.word	0x08009e80

08003118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800311c:	f7ff ffde 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	0adb      	lsrs	r3, r3, #11
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	4903      	ldr	r1, [pc, #12]	; (800313c <HAL_RCC_GetPCLK2Freq+0x24>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40021000 	.word	0x40021000
 800313c:	08009e80 	.word	0x08009e80

08003140 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <RCC_Delay+0x34>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <RCC_Delay+0x38>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	0a5b      	lsrs	r3, r3, #9
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800315c:	bf00      	nop
  }
  while (Delay --);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1e5a      	subs	r2, r3, #1
 8003162:	60fa      	str	r2, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f9      	bne.n	800315c <RCC_Delay+0x1c>
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	20000008 	.word	0x20000008
 8003178:	10624dd3 	.word	0x10624dd3

0800317c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e041      	b.n	8003212 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fe fe26 	bl	8001df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f000 fd50 	bl	8003c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	d001      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e03a      	b.n	80032aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <HAL_TIM_Base_Start_IT+0x98>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00e      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x58>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325e:	d009      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x58>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d004      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x58>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a13      	ldr	r2, [pc, #76]	; (80032bc <HAL_TIM_Base_Start_IT+0xa0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d111      	bne.n	8003298 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b06      	cmp	r3, #6
 8003284:	d010      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003296:	e007      	b.n	80032a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800

080032c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e041      	b.n	8003356 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fe fda8 	bl	8001e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f000 fcae 	bl	8003c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_TIM_PWM_Start+0x24>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	bf14      	ite	ne
 800337c:	2301      	movne	r3, #1
 800337e:	2300      	moveq	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e022      	b.n	80033ca <HAL_TIM_PWM_Start+0x6a>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b04      	cmp	r3, #4
 8003388:	d109      	bne.n	800339e <HAL_TIM_PWM_Start+0x3e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	e015      	b.n	80033ca <HAL_TIM_PWM_Start+0x6a>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d109      	bne.n	80033b8 <HAL_TIM_PWM_Start+0x58>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	bf14      	ite	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	2300      	moveq	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	e008      	b.n	80033ca <HAL_TIM_PWM_Start+0x6a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e05e      	b.n	8003490 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_PWM_Start+0x82>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e0:	e013      	b.n	800340a <HAL_TIM_PWM_Start+0xaa>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_PWM_Start+0x92>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f0:	e00b      	b.n	800340a <HAL_TIM_PWM_Start+0xaa>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_PWM_Start+0xa2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003400:	e003      	b.n	800340a <HAL_TIM_PWM_Start+0xaa>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2201      	movs	r2, #1
 8003410:	6839      	ldr	r1, [r7, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fea4 	bl	8004160 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_TIM_PWM_Start+0x138>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d107      	bne.n	8003432 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a18      	ldr	r2, [pc, #96]	; (8003498 <HAL_TIM_PWM_Start+0x138>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00e      	beq.n	800345a <HAL_TIM_PWM_Start+0xfa>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003444:	d009      	beq.n	800345a <HAL_TIM_PWM_Start+0xfa>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a14      	ldr	r2, [pc, #80]	; (800349c <HAL_TIM_PWM_Start+0x13c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_TIM_PWM_Start+0xfa>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <HAL_TIM_PWM_Start+0x140>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d111      	bne.n	800347e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b06      	cmp	r3, #6
 800346a:	d010      	beq.n	800348e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	e007      	b.n	800348e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40000400 	.word	0x40000400
 80034a0:	40000800 	.word	0x40000800

080034a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e093      	b.n	80035e0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fe fc51 	bl	8001d74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e8:	f023 0307 	bic.w	r3, r3, #7
 80034ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f000 fbb1 	bl	8003c60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	4313      	orrs	r3, r2
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003544:	f023 030c 	bic.w	r3, r3, #12
 8003548:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003550:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	4313      	orrs	r3, r2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	011a      	lsls	r2, r3, #4
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	031b      	lsls	r3, r3, #12
 8003574:	4313      	orrs	r3, r2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003582:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	4313      	orrs	r3, r2
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003600:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003608:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003610:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d110      	bne.n	800363a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d102      	bne.n	8003624 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800361e:	7b7b      	ldrb	r3, [r7, #13]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d001      	beq.n	8003628 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e069      	b.n	80036fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003638:	e031      	b.n	800369e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d110      	bne.n	8003662 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003640:	7bbb      	ldrb	r3, [r7, #14]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d102      	bne.n	800364c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003646:	7b3b      	ldrb	r3, [r7, #12]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d001      	beq.n	8003650 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e055      	b.n	80036fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003660:	e01d      	b.n	800369e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d108      	bne.n	800367a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003668:	7bbb      	ldrb	r3, [r7, #14]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800366e:	7b7b      	ldrb	r3, [r7, #13]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d102      	bne.n	800367a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003674:	7b3b      	ldrb	r3, [r7, #12]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e03e      	b.n	80036fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2202      	movs	r2, #2
 800369a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_TIM_Encoder_Start+0xc4>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d008      	beq.n	80036bc <HAL_TIM_Encoder_Start+0xd4>
 80036aa:	e00f      	b.n	80036cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2201      	movs	r2, #1
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fd53 	bl	8004160 <TIM_CCxChannelCmd>
      break;
 80036ba:	e016      	b.n	80036ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2201      	movs	r2, #1
 80036c2:	2104      	movs	r1, #4
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fd4b 	bl	8004160 <TIM_CCxChannelCmd>
      break;
 80036ca:	e00e      	b.n	80036ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2201      	movs	r2, #1
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fd43 	bl	8004160 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2201      	movs	r2, #1
 80036e0:	2104      	movs	r1, #4
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fd3c 	bl	8004160 <TIM_CCxChannelCmd>
      break;
 80036e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b02      	cmp	r3, #2
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b02      	cmp	r3, #2
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0202 	mvn.w	r2, #2
 8003730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa6f 	bl	8003c2a <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa62 	bl	8003c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fa71 	bl	8003c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b04      	cmp	r3, #4
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0204 	mvn.w	r2, #4
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa45 	bl	8003c2a <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fa38 	bl	8003c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fa47 	bl	8003c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0208 	mvn.w	r2, #8
 80037d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2204      	movs	r2, #4
 80037de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa1b 	bl	8003c2a <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa0e 	bl	8003c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa1d 	bl	8003c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b10      	cmp	r3, #16
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b10      	cmp	r3, #16
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0210 	mvn.w	r2, #16
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2208      	movs	r2, #8
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9f1 	bl	8003c2a <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f9e4 	bl	8003c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f9f3 	bl	8003c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d10e      	bne.n	8003888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d107      	bne.n	8003888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0201 	mvn.w	r2, #1
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fcee 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b80      	cmp	r3, #128	; 0x80
 8003894:	d10e      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	2b80      	cmp	r3, #128	; 0x80
 80038a2:	d107      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fce1 	bl	8004276 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038be:	2b40      	cmp	r3, #64	; 0x40
 80038c0:	d10e      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d107      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f9b7 	bl	8003c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d10e      	bne.n	800390c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d107      	bne.n	800390c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0220 	mvn.w	r2, #32
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fcac 	bl	8004264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800392a:	2302      	movs	r3, #2
 800392c:	e0ac      	b.n	8003a88 <HAL_TIM_PWM_ConfigChannel+0x174>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b0c      	cmp	r3, #12
 800393a:	f200 809f 	bhi.w	8003a7c <HAL_TIM_PWM_ConfigChannel+0x168>
 800393e:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	08003979 	.word	0x08003979
 8003948:	08003a7d 	.word	0x08003a7d
 800394c:	08003a7d 	.word	0x08003a7d
 8003950:	08003a7d 	.word	0x08003a7d
 8003954:	080039b9 	.word	0x080039b9
 8003958:	08003a7d 	.word	0x08003a7d
 800395c:	08003a7d 	.word	0x08003a7d
 8003960:	08003a7d 	.word	0x08003a7d
 8003964:	080039fb 	.word	0x080039fb
 8003968:	08003a7d 	.word	0x08003a7d
 800396c:	08003a7d 	.word	0x08003a7d
 8003970:	08003a7d 	.word	0x08003a7d
 8003974:	08003a3b 	.word	0x08003a3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f9d0 	bl	8003d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0208 	orr.w	r2, r2, #8
 8003992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0204 	bic.w	r2, r2, #4
 80039a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6999      	ldr	r1, [r3, #24]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	619a      	str	r2, [r3, #24]
      break;
 80039b6:	e062      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fa16 	bl	8003df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6999      	ldr	r1, [r3, #24]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	021a      	lsls	r2, r3, #8
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	619a      	str	r2, [r3, #24]
      break;
 80039f8:	e041      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fa5f 	bl	8003ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0208 	orr.w	r2, r2, #8
 8003a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0204 	bic.w	r2, r2, #4
 8003a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69d9      	ldr	r1, [r3, #28]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	61da      	str	r2, [r3, #28]
      break;
 8003a38:	e021      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 faa9 	bl	8003f98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69d9      	ldr	r1, [r3, #28]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	021a      	lsls	r2, r3, #8
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	61da      	str	r2, [r3, #28]
      break;
 8003a7a:	e000      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003a7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_TIM_ConfigClockSource+0x18>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e0b3      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x180>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ace:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae0:	d03e      	beq.n	8003b60 <HAL_TIM_ConfigClockSource+0xd0>
 8003ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae6:	f200 8087 	bhi.w	8003bf8 <HAL_TIM_ConfigClockSource+0x168>
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aee:	f000 8085 	beq.w	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af6:	d87f      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x168>
 8003af8:	2b70      	cmp	r3, #112	; 0x70
 8003afa:	d01a      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0xa2>
 8003afc:	2b70      	cmp	r3, #112	; 0x70
 8003afe:	d87b      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x168>
 8003b00:	2b60      	cmp	r3, #96	; 0x60
 8003b02:	d050      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x116>
 8003b04:	2b60      	cmp	r3, #96	; 0x60
 8003b06:	d877      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x168>
 8003b08:	2b50      	cmp	r3, #80	; 0x50
 8003b0a:	d03c      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0xf6>
 8003b0c:	2b50      	cmp	r3, #80	; 0x50
 8003b0e:	d873      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x168>
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d058      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x136>
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d86f      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x168>
 8003b18:	2b30      	cmp	r3, #48	; 0x30
 8003b1a:	d064      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x156>
 8003b1c:	2b30      	cmp	r3, #48	; 0x30
 8003b1e:	d86b      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x168>
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d060      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x156>
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d867      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x168>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d05c      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x156>
 8003b2c:	2b10      	cmp	r3, #16
 8003b2e:	d05a      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b30:	e062      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6899      	ldr	r1, [r3, #8]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f000 faee 	bl	8004122 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	609a      	str	r2, [r3, #8]
      break;
 8003b5e:	e04e      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6899      	ldr	r1, [r3, #8]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f000 fad7 	bl	8004122 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b82:	609a      	str	r2, [r3, #8]
      break;
 8003b84:	e03b      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	461a      	mov	r2, r3
 8003b94:	f000 fa4e 	bl	8004034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2150      	movs	r1, #80	; 0x50
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 faa5 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003ba4:	e02b      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6859      	ldr	r1, [r3, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f000 fa6c 	bl	8004090 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2160      	movs	r1, #96	; 0x60
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fa95 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003bc4:	e01b      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f000 fa2e 	bl	8004034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2140      	movs	r1, #64	; 0x40
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fa85 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003be4:	e00b      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f000 fa7c 	bl	80040ee <TIM_ITRx_SetConfig>
        break;
 8003bf6:	e002      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bf8:	bf00      	nop
 8003bfa:	e000      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr

08003c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a29      	ldr	r2, [pc, #164]	; (8003d18 <TIM_Base_SetConfig+0xb8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00b      	beq.n	8003c90 <TIM_Base_SetConfig+0x30>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7e:	d007      	beq.n	8003c90 <TIM_Base_SetConfig+0x30>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a26      	ldr	r2, [pc, #152]	; (8003d1c <TIM_Base_SetConfig+0xbc>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_Base_SetConfig+0x30>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a25      	ldr	r2, [pc, #148]	; (8003d20 <TIM_Base_SetConfig+0xc0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d108      	bne.n	8003ca2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a1c      	ldr	r2, [pc, #112]	; (8003d18 <TIM_Base_SetConfig+0xb8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <TIM_Base_SetConfig+0x62>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb0:	d007      	beq.n	8003cc2 <TIM_Base_SetConfig+0x62>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <TIM_Base_SetConfig+0xbc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_Base_SetConfig+0x62>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <TIM_Base_SetConfig+0xc0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d108      	bne.n	8003cd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a07      	ldr	r2, [pc, #28]	; (8003d18 <TIM_Base_SetConfig+0xb8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d103      	bne.n	8003d08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	615a      	str	r2, [r3, #20]
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	40012c00 	.word	0x40012c00
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800

08003d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f023 0201 	bic.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0303 	bic.w	r3, r3, #3
 8003d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f023 0302 	bic.w	r3, r3, #2
 8003d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <TIM_OC1_SetConfig+0xc8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d10c      	bne.n	8003d9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0308 	bic.w	r3, r3, #8
 8003d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a13      	ldr	r2, [pc, #76]	; (8003dec <TIM_OC1_SetConfig+0xc8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d111      	bne.n	8003dc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	621a      	str	r2, [r3, #32]
}
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40012c00 	.word	0x40012c00

08003df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0210 	bic.w	r2, r3, #16
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0320 	bic.w	r3, r3, #32
 8003e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a1d      	ldr	r2, [pc, #116]	; (8003ec0 <TIM_OC2_SetConfig+0xd0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d10d      	bne.n	8003e6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a14      	ldr	r2, [pc, #80]	; (8003ec0 <TIM_OC2_SetConfig+0xd0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d113      	bne.n	8003e9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	621a      	str	r2, [r3, #32]
}
 8003eb6:	bf00      	nop
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	40012c00 	.word	0x40012c00

08003ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <TIM_OC3_SetConfig+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10d      	bne.n	8003f3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <TIM_OC3_SetConfig+0xd0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d113      	bne.n	8003f6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	621a      	str	r2, [r3, #32]
}
 8003f88:	bf00      	nop
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40012c00 	.word	0x40012c00

08003f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	021b      	lsls	r3, r3, #8
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	031b      	lsls	r3, r3, #12
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a0f      	ldr	r2, [pc, #60]	; (8004030 <TIM_OC4_SetConfig+0x98>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d109      	bne.n	800400c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	019b      	lsls	r3, r3, #6
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	40012c00 	.word	0x40012c00

08004034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f023 0201 	bic.w	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f023 030a 	bic.w	r3, r3, #10
 8004070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f023 0210 	bic.w	r2, r3, #16
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	031b      	lsls	r3, r3, #12
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	621a      	str	r2, [r3, #32]
}
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr

080040ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b085      	sub	sp, #20
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	f043 0307 	orr.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]
}
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004122:	b480      	push	{r7}
 8004124:	b087      	sub	sp, #28
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800413c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	021a      	lsls	r2, r3, #8
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	431a      	orrs	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4313      	orrs	r3, r2
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	609a      	str	r2, [r3, #8]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	2201      	movs	r2, #1
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1a      	ldr	r2, [r3, #32]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	43db      	mvns	r3, r3
 8004182:	401a      	ands	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1a      	ldr	r2, [r3, #32]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	fa01 f303 	lsl.w	r3, r1, r3
 8004198:	431a      	orrs	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	621a      	str	r2, [r3, #32]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041bc:	2302      	movs	r3, #2
 80041be:	e046      	b.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a16      	ldr	r2, [pc, #88]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00e      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420c:	d009      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a12      	ldr	r2, [pc, #72]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a10      	ldr	r2, [pc, #64]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10c      	bne.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	4313      	orrs	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800

08004264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr

08004276 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e03f      	b.n	800431a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd fe14 	bl	8001edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	; 0x24
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fc85 	bl	8004bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695a      	ldr	r2, [r3, #20]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b08a      	sub	sp, #40	; 0x28
 8004326:	af02      	add	r7, sp, #8
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	4613      	mov	r3, r2
 8004330:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b20      	cmp	r3, #32
 8004340:	d17c      	bne.n	800443c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_UART_Transmit+0x2c>
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e075      	b.n	800443e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_UART_Transmit+0x3e>
 800435c:	2302      	movs	r3, #2
 800435e:	e06e      	b.n	800443e <HAL_UART_Transmit+0x11c>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2221      	movs	r2, #33	; 0x21
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004376:	f7fd ff83 	bl	8002280 <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	88fa      	ldrh	r2, [r7, #6]
 8004380:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	88fa      	ldrh	r2, [r7, #6]
 8004386:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004390:	d108      	bne.n	80043a4 <HAL_UART_Transmit+0x82>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d104      	bne.n	80043a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e003      	b.n	80043ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043b4:	e02a      	b.n	800440c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2200      	movs	r2, #0
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fa38 	bl	8004836 <UART_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e036      	b.n	800443e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	3302      	adds	r3, #2
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	e007      	b.n	80043fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	781a      	ldrb	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	3301      	adds	r3, #1
 80043fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1cf      	bne.n	80043b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2200      	movs	r2, #0
 800441e:	2140      	movs	r1, #64	; 0x40
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fa08 	bl	8004836 <UART_WaitOnFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e006      	b.n	800443e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	e000      	b.n	800443e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800443c:	2302      	movs	r3, #2
  }
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	4613      	mov	r3, r2
 8004452:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b20      	cmp	r3, #32
 800445e:	d11d      	bne.n	800449c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_UART_Receive_IT+0x26>
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e016      	b.n	800449e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_UART_Receive_IT+0x38>
 800447a:	2302      	movs	r3, #2
 800447c:	e00f      	b.n	800449e <HAL_UART_Receive_IT+0x58>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	461a      	mov	r2, r3
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fa19 	bl	80048ca <UART_Start_Receive_IT>
 8004498:	4603      	mov	r3, r0
 800449a:	e000      	b.n	800449e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08a      	sub	sp, #40	; 0x28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_UART_IRQHandler+0x52>
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fac9 	bl	8004a8a <UART_Receive_IT>
      return;
 80044f8:	e17b      	b.n	80047f2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80b1 	beq.w	8004664 <HAL_UART_IRQHandler+0x1bc>
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d105      	bne.n	8004518 <HAL_UART_IRQHandler+0x70>
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 80a6 	beq.w	8004664 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_UART_IRQHandler+0x90>
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f043 0201 	orr.w	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <HAL_UART_IRQHandler+0xb0>
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	f043 0202 	orr.w	r2, r3, #2
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_UART_IRQHandler+0xd0>
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	f043 0204 	orr.w	r2, r3, #4
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00f      	beq.n	80045a2 <HAL_UART_IRQHandler+0xfa>
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <HAL_UART_IRQHandler+0xee>
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f043 0208 	orr.w	r2, r3, #8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 811e 	beq.w	80047e8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <HAL_UART_IRQHandler+0x11e>
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fa62 	bl	8004a8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d102      	bne.n	80045ee <HAL_UART_IRQHandler+0x146>
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d031      	beq.n	8004652 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f9a4 	bl	800493c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d023      	beq.n	800464a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695a      	ldr	r2, [r3, #20]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004610:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	2b00      	cmp	r3, #0
 8004618:	d013      	beq.n	8004642 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	4a76      	ldr	r2, [pc, #472]	; (80047f8 <HAL_UART_IRQHandler+0x350>)
 8004620:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	4618      	mov	r0, r3
 8004628:	f7fd ff7c 	bl	8002524 <HAL_DMA_Abort_IT>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d016      	beq.n	8004660 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800463c:	4610      	mov	r0, r2
 800463e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004640:	e00e      	b.n	8004660 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f8e3 	bl	800480e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	e00a      	b.n	8004660 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8df 	bl	800480e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004650:	e006      	b.n	8004660 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8db 	bl	800480e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800465e:	e0c3      	b.n	80047e8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004660:	bf00      	nop
    return;
 8004662:	e0c1      	b.n	80047e8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	2b01      	cmp	r3, #1
 800466a:	f040 80a1 	bne.w	80047b0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 809b 	beq.w	80047b0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8095 	beq.w	80047b0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d04e      	beq.n	8004748 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80046b4:	8a3b      	ldrh	r3, [r7, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 8098 	beq.w	80047ec <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046c0:	8a3a      	ldrh	r2, [r7, #16]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	f080 8092 	bcs.w	80047ec <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8a3a      	ldrh	r2, [r7, #16]
 80046cc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d02b      	beq.n	8004730 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046e6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004706:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0210 	bic.w	r2, r2, #16
 8004724:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	4618      	mov	r0, r3
 800472c:	f7fd febf 	bl	80024ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004738:	b29b      	uxth	r3, r3
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	b29b      	uxth	r3, r3
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f86d 	bl	8004820 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004746:	e051      	b.n	80047ec <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004750:	b29b      	uxth	r3, r3
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d047      	beq.n	80047f0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004760:	8a7b      	ldrh	r3, [r7, #18]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d044      	beq.n	80047f0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004774:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695a      	ldr	r2, [r3, #20]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0210 	bic.w	r2, r2, #16
 80047a2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047a4:	8a7b      	ldrh	r3, [r7, #18]
 80047a6:	4619      	mov	r1, r3
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f839 	bl	8004820 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047ae:	e01f      	b.n	80047f0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <HAL_UART_IRQHandler+0x324>
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f8f9 	bl	80049bc <UART_Transmit_IT>
    return;
 80047ca:	e012      	b.n	80047f2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00d      	beq.n	80047f2 <HAL_UART_IRQHandler+0x34a>
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f93a 	bl	8004a5a <UART_EndTransmit_IT>
    return;
 80047e6:	e004      	b.n	80047f2 <HAL_UART_IRQHandler+0x34a>
    return;
 80047e8:	bf00      	nop
 80047ea:	e002      	b.n	80047f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80047ec:	bf00      	nop
 80047ee:	e000      	b.n	80047f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80047f0:	bf00      	nop
  }
}
 80047f2:	3728      	adds	r7, #40	; 0x28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	08004995 	.word	0x08004995

080047fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr

0800480e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004846:	e02c      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484e:	d028      	beq.n	80048a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <UART_WaitOnFlagUntilTimeout+0x30>
 8004856:	f7fd fd13 	bl	8002280 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	429a      	cmp	r2, r3
 8004864:	d21d      	bcs.n	80048a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004874:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e00f      	b.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	bf0c      	ite	eq
 80048b2:	2301      	moveq	r3, #1
 80048b4:	2300      	movne	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d0c3      	beq.n	8004848 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b085      	sub	sp, #20
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2222      	movs	r2, #34	; 0x22
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800490e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0220 	orr.w	r2, r2, #32
 800492e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr

0800493c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004952:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0201 	bic.w	r2, r2, #1
 8004962:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	2b01      	cmp	r3, #1
 800496a:	d107      	bne.n	800497c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0210 	bic.w	r2, r2, #16
 800497a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7ff ff2d 	bl	800480e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b21      	cmp	r3, #33	; 0x21
 80049ce:	d13e      	bne.n	8004a4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d8:	d114      	bne.n	8004a04 <UART_Transmit_IT+0x48>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d110      	bne.n	8004a04 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	1c9a      	adds	r2, r3, #2
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	621a      	str	r2, [r3, #32]
 8004a02:	e008      	b.n	8004a16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	1c59      	adds	r1, r3, #1
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6211      	str	r1, [r2, #32]
 8004a0e:	781a      	ldrb	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4619      	mov	r1, r3
 8004a24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr

08004a5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff febe 	bl	80047fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b22      	cmp	r3, #34	; 0x22
 8004a9c:	f040 8099 	bne.w	8004bd2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa8:	d117      	bne.n	8004ada <UART_Receive_IT+0x50>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d113      	bne.n	8004ada <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	1c9a      	adds	r2, r3, #2
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ad8:	e026      	b.n	8004b28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aec:	d007      	beq.n	8004afe <UART_Receive_IT+0x74>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <UART_Receive_IT+0x82>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	e008      	b.n	8004b1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4619      	mov	r1, r3
 8004b36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d148      	bne.n	8004bce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0220 	bic.w	r2, r2, #32
 8004b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0201 	bic.w	r2, r2, #1
 8004b6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d123      	bne.n	8004bc4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0210 	bic.w	r2, r2, #16
 8004b90:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d10a      	bne.n	8004bb6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fe2f 	bl	8004820 <HAL_UARTEx_RxEventCallback>
 8004bc2:	e002      	b.n	8004bca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7fc fd17 	bl	80015f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e002      	b.n	8004bd4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e000      	b.n	8004bd4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
  }
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c16:	f023 030c 	bic.w	r3, r3, #12
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	430b      	orrs	r3, r1
 8004c22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2c      	ldr	r2, [pc, #176]	; (8004cf0 <UART_SetConfig+0x114>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d103      	bne.n	8004c4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c44:	f7fe fa68 	bl	8003118 <HAL_RCC_GetPCLK2Freq>
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	e002      	b.n	8004c52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c4c:	f7fe fa50 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8004c50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009a      	lsls	r2, r3, #2
 8004c5c:	441a      	add	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	4a22      	ldr	r2, [pc, #136]	; (8004cf4 <UART_SetConfig+0x118>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	0119      	lsls	r1, r3, #4
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009a      	lsls	r2, r3, #2
 8004c7c:	441a      	add	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c88:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <UART_SetConfig+0x118>)
 8004c8a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	2064      	movs	r0, #100	; 0x64
 8004c92:	fb00 f303 	mul.w	r3, r0, r3
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	3332      	adds	r3, #50	; 0x32
 8004c9c:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <UART_SetConfig+0x118>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca8:	4419      	add	r1, r3
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009a      	lsls	r2, r3, #2
 8004cb4:	441a      	add	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <UART_SetConfig+0x118>)
 8004cc2:	fba3 0302 	umull	r0, r3, r3, r2
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	2064      	movs	r0, #100	; 0x64
 8004cca:	fb00 f303 	mul.w	r3, r0, r3
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	3332      	adds	r3, #50	; 0x32
 8004cd4:	4a07      	ldr	r2, [pc, #28]	; (8004cf4 <UART_SetConfig+0x118>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	f003 020f 	and.w	r2, r3, #15
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40013800 	.word	0x40013800
 8004cf4:	51eb851f 	.word	0x51eb851f

08004cf8 <__errno>:
 8004cf8:	4b01      	ldr	r3, [pc, #4]	; (8004d00 <__errno+0x8>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000014 	.word	0x20000014

08004d04 <__libc_init_array>:
 8004d04:	b570      	push	{r4, r5, r6, lr}
 8004d06:	2600      	movs	r6, #0
 8004d08:	4d0c      	ldr	r5, [pc, #48]	; (8004d3c <__libc_init_array+0x38>)
 8004d0a:	4c0d      	ldr	r4, [pc, #52]	; (8004d40 <__libc_init_array+0x3c>)
 8004d0c:	1b64      	subs	r4, r4, r5
 8004d0e:	10a4      	asrs	r4, r4, #2
 8004d10:	42a6      	cmp	r6, r4
 8004d12:	d109      	bne.n	8004d28 <__libc_init_array+0x24>
 8004d14:	f005 f862 	bl	8009ddc <_init>
 8004d18:	2600      	movs	r6, #0
 8004d1a:	4d0a      	ldr	r5, [pc, #40]	; (8004d44 <__libc_init_array+0x40>)
 8004d1c:	4c0a      	ldr	r4, [pc, #40]	; (8004d48 <__libc_init_array+0x44>)
 8004d1e:	1b64      	subs	r4, r4, r5
 8004d20:	10a4      	asrs	r4, r4, #2
 8004d22:	42a6      	cmp	r6, r4
 8004d24:	d105      	bne.n	8004d32 <__libc_init_array+0x2e>
 8004d26:	bd70      	pop	{r4, r5, r6, pc}
 8004d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2c:	4798      	blx	r3
 8004d2e:	3601      	adds	r6, #1
 8004d30:	e7ee      	b.n	8004d10 <__libc_init_array+0xc>
 8004d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d36:	4798      	blx	r3
 8004d38:	3601      	adds	r6, #1
 8004d3a:	e7f2      	b.n	8004d22 <__libc_init_array+0x1e>
 8004d3c:	0800a354 	.word	0x0800a354
 8004d40:	0800a354 	.word	0x0800a354
 8004d44:	0800a354 	.word	0x0800a354
 8004d48:	0800a358 	.word	0x0800a358

08004d4c <memset>:
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4402      	add	r2, r0
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d100      	bne.n	8004d56 <memset+0xa>
 8004d54:	4770      	bx	lr
 8004d56:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5a:	e7f9      	b.n	8004d50 <memset+0x4>

08004d5c <__cvt>:
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d62:	461f      	mov	r7, r3
 8004d64:	bfbb      	ittet	lt
 8004d66:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d6a:	461f      	movlt	r7, r3
 8004d6c:	2300      	movge	r3, #0
 8004d6e:	232d      	movlt	r3, #45	; 0x2d
 8004d70:	b088      	sub	sp, #32
 8004d72:	4614      	mov	r4, r2
 8004d74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d78:	7013      	strb	r3, [r2, #0]
 8004d7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d80:	f023 0820 	bic.w	r8, r3, #32
 8004d84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d88:	d005      	beq.n	8004d96 <__cvt+0x3a>
 8004d8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d8e:	d100      	bne.n	8004d92 <__cvt+0x36>
 8004d90:	3501      	adds	r5, #1
 8004d92:	2302      	movs	r3, #2
 8004d94:	e000      	b.n	8004d98 <__cvt+0x3c>
 8004d96:	2303      	movs	r3, #3
 8004d98:	aa07      	add	r2, sp, #28
 8004d9a:	9204      	str	r2, [sp, #16]
 8004d9c:	aa06      	add	r2, sp, #24
 8004d9e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004da2:	e9cd 3500 	strd	r3, r5, [sp]
 8004da6:	4622      	mov	r2, r4
 8004da8:	463b      	mov	r3, r7
 8004daa:	f001 fe31 	bl	8006a10 <_dtoa_r>
 8004dae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004db2:	4606      	mov	r6, r0
 8004db4:	d102      	bne.n	8004dbc <__cvt+0x60>
 8004db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004db8:	07db      	lsls	r3, r3, #31
 8004dba:	d522      	bpl.n	8004e02 <__cvt+0xa6>
 8004dbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dc0:	eb06 0905 	add.w	r9, r6, r5
 8004dc4:	d110      	bne.n	8004de8 <__cvt+0x8c>
 8004dc6:	7833      	ldrb	r3, [r6, #0]
 8004dc8:	2b30      	cmp	r3, #48	; 0x30
 8004dca:	d10a      	bne.n	8004de2 <__cvt+0x86>
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2300      	movs	r3, #0
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	f7fb fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8004dd8:	b918      	cbnz	r0, 8004de2 <__cvt+0x86>
 8004dda:	f1c5 0501 	rsb	r5, r5, #1
 8004dde:	f8ca 5000 	str.w	r5, [sl]
 8004de2:	f8da 3000 	ldr.w	r3, [sl]
 8004de6:	4499      	add	r9, r3
 8004de8:	2200      	movs	r2, #0
 8004dea:	2300      	movs	r3, #0
 8004dec:	4620      	mov	r0, r4
 8004dee:	4639      	mov	r1, r7
 8004df0:	f7fb fdda 	bl	80009a8 <__aeabi_dcmpeq>
 8004df4:	b108      	cbz	r0, 8004dfa <__cvt+0x9e>
 8004df6:	f8cd 901c 	str.w	r9, [sp, #28]
 8004dfa:	2230      	movs	r2, #48	; 0x30
 8004dfc:	9b07      	ldr	r3, [sp, #28]
 8004dfe:	454b      	cmp	r3, r9
 8004e00:	d307      	bcc.n	8004e12 <__cvt+0xb6>
 8004e02:	4630      	mov	r0, r6
 8004e04:	9b07      	ldr	r3, [sp, #28]
 8004e06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e08:	1b9b      	subs	r3, r3, r6
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	b008      	add	sp, #32
 8004e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	9107      	str	r1, [sp, #28]
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	e7f0      	b.n	8004dfc <__cvt+0xa0>

08004e1a <__exponent>:
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e1e:	2900      	cmp	r1, #0
 8004e20:	f803 2b02 	strb.w	r2, [r3], #2
 8004e24:	bfb6      	itet	lt
 8004e26:	222d      	movlt	r2, #45	; 0x2d
 8004e28:	222b      	movge	r2, #43	; 0x2b
 8004e2a:	4249      	neglt	r1, r1
 8004e2c:	2909      	cmp	r1, #9
 8004e2e:	7042      	strb	r2, [r0, #1]
 8004e30:	dd2b      	ble.n	8004e8a <__exponent+0x70>
 8004e32:	f10d 0407 	add.w	r4, sp, #7
 8004e36:	46a4      	mov	ip, r4
 8004e38:	270a      	movs	r7, #10
 8004e3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e3e:	460a      	mov	r2, r1
 8004e40:	46a6      	mov	lr, r4
 8004e42:	fb07 1516 	mls	r5, r7, r6, r1
 8004e46:	2a63      	cmp	r2, #99	; 0x63
 8004e48:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e56:	dcf0      	bgt.n	8004e3a <__exponent+0x20>
 8004e58:	3130      	adds	r1, #48	; 0x30
 8004e5a:	f1ae 0502 	sub.w	r5, lr, #2
 8004e5e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e62:	4629      	mov	r1, r5
 8004e64:	1c44      	adds	r4, r0, #1
 8004e66:	4561      	cmp	r1, ip
 8004e68:	d30a      	bcc.n	8004e80 <__exponent+0x66>
 8004e6a:	f10d 0209 	add.w	r2, sp, #9
 8004e6e:	eba2 020e 	sub.w	r2, r2, lr
 8004e72:	4565      	cmp	r5, ip
 8004e74:	bf88      	it	hi
 8004e76:	2200      	movhi	r2, #0
 8004e78:	4413      	add	r3, r2
 8004e7a:	1a18      	subs	r0, r3, r0
 8004e7c:	b003      	add	sp, #12
 8004e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e84:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e88:	e7ed      	b.n	8004e66 <__exponent+0x4c>
 8004e8a:	2330      	movs	r3, #48	; 0x30
 8004e8c:	3130      	adds	r1, #48	; 0x30
 8004e8e:	7083      	strb	r3, [r0, #2]
 8004e90:	70c1      	strb	r1, [r0, #3]
 8004e92:	1d03      	adds	r3, r0, #4
 8004e94:	e7f1      	b.n	8004e7a <__exponent+0x60>
	...

08004e98 <_printf_float>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	b091      	sub	sp, #68	; 0x44
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	461f      	mov	r7, r3
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	f002 ff05 	bl	8007cb8 <_localeconv_r>
 8004eae:	6803      	ldr	r3, [r0, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb4:	f7fb f94c 	bl	8000150 <strlen>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	930e      	str	r3, [sp, #56]	; 0x38
 8004ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec0:	900a      	str	r0, [sp, #40]	; 0x28
 8004ec2:	3307      	adds	r3, #7
 8004ec4:	f023 0307 	bic.w	r3, r3, #7
 8004ec8:	f103 0208 	add.w	r2, r3, #8
 8004ecc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ed0:	f8d4 b000 	ldr.w	fp, [r4]
 8004ed4:	f8c8 2000 	str.w	r2, [r8]
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ee0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004ee4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eea:	f04f 32ff 	mov.w	r2, #4294967295
 8004eee:	4640      	mov	r0, r8
 8004ef0:	4b9c      	ldr	r3, [pc, #624]	; (8005164 <_printf_float+0x2cc>)
 8004ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ef4:	f7fb fd8a 	bl	8000a0c <__aeabi_dcmpun>
 8004ef8:	bb70      	cbnz	r0, 8004f58 <_printf_float+0xc0>
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	4640      	mov	r0, r8
 8004f00:	4b98      	ldr	r3, [pc, #608]	; (8005164 <_printf_float+0x2cc>)
 8004f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f04:	f7fb fd64 	bl	80009d0 <__aeabi_dcmple>
 8004f08:	bb30      	cbnz	r0, 8004f58 <_printf_float+0xc0>
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	4640      	mov	r0, r8
 8004f10:	4651      	mov	r1, sl
 8004f12:	f7fb fd53 	bl	80009bc <__aeabi_dcmplt>
 8004f16:	b110      	cbz	r0, 8004f1e <_printf_float+0x86>
 8004f18:	232d      	movs	r3, #45	; 0x2d
 8004f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f1e:	4b92      	ldr	r3, [pc, #584]	; (8005168 <_printf_float+0x2d0>)
 8004f20:	4892      	ldr	r0, [pc, #584]	; (800516c <_printf_float+0x2d4>)
 8004f22:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004f26:	bf94      	ite	ls
 8004f28:	4698      	movls	r8, r3
 8004f2a:	4680      	movhi	r8, r0
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	f04f 0a00 	mov.w	sl, #0
 8004f32:	6123      	str	r3, [r4, #16]
 8004f34:	f02b 0304 	bic.w	r3, fp, #4
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	4633      	mov	r3, r6
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	4628      	mov	r0, r5
 8004f40:	9700      	str	r7, [sp, #0]
 8004f42:	aa0f      	add	r2, sp, #60	; 0x3c
 8004f44:	f000 f9d4 	bl	80052f0 <_printf_common>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	f040 8090 	bne.w	800506e <_printf_float+0x1d6>
 8004f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f52:	b011      	add	sp, #68	; 0x44
 8004f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f58:	4642      	mov	r2, r8
 8004f5a:	4653      	mov	r3, sl
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	4651      	mov	r1, sl
 8004f60:	f7fb fd54 	bl	8000a0c <__aeabi_dcmpun>
 8004f64:	b148      	cbz	r0, 8004f7a <_printf_float+0xe2>
 8004f66:	f1ba 0f00 	cmp.w	sl, #0
 8004f6a:	bfb8      	it	lt
 8004f6c:	232d      	movlt	r3, #45	; 0x2d
 8004f6e:	4880      	ldr	r0, [pc, #512]	; (8005170 <_printf_float+0x2d8>)
 8004f70:	bfb8      	it	lt
 8004f72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f76:	4b7f      	ldr	r3, [pc, #508]	; (8005174 <_printf_float+0x2dc>)
 8004f78:	e7d3      	b.n	8004f22 <_printf_float+0x8a>
 8004f7a:	6863      	ldr	r3, [r4, #4]
 8004f7c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	d142      	bne.n	800500a <_printf_float+0x172>
 8004f84:	2306      	movs	r3, #6
 8004f86:	6063      	str	r3, [r4, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	9206      	str	r2, [sp, #24]
 8004f8c:	aa0e      	add	r2, sp, #56	; 0x38
 8004f8e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f92:	aa0d      	add	r2, sp, #52	; 0x34
 8004f94:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f98:	9203      	str	r2, [sp, #12]
 8004f9a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	6863      	ldr	r3, [r4, #4]
 8004fa6:	4642      	mov	r2, r8
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	4628      	mov	r0, r5
 8004fac:	4653      	mov	r3, sl
 8004fae:	910b      	str	r1, [sp, #44]	; 0x2c
 8004fb0:	f7ff fed4 	bl	8004d5c <__cvt>
 8004fb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fb6:	4680      	mov	r8, r0
 8004fb8:	2947      	cmp	r1, #71	; 0x47
 8004fba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004fbc:	d108      	bne.n	8004fd0 <_printf_float+0x138>
 8004fbe:	1cc8      	adds	r0, r1, #3
 8004fc0:	db02      	blt.n	8004fc8 <_printf_float+0x130>
 8004fc2:	6863      	ldr	r3, [r4, #4]
 8004fc4:	4299      	cmp	r1, r3
 8004fc6:	dd40      	ble.n	800504a <_printf_float+0x1b2>
 8004fc8:	f1a9 0902 	sub.w	r9, r9, #2
 8004fcc:	fa5f f989 	uxtb.w	r9, r9
 8004fd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004fd4:	d81f      	bhi.n	8005016 <_printf_float+0x17e>
 8004fd6:	464a      	mov	r2, r9
 8004fd8:	3901      	subs	r1, #1
 8004fda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fde:	910d      	str	r1, [sp, #52]	; 0x34
 8004fe0:	f7ff ff1b 	bl	8004e1a <__exponent>
 8004fe4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fe6:	4682      	mov	sl, r0
 8004fe8:	1813      	adds	r3, r2, r0
 8004fea:	2a01      	cmp	r2, #1
 8004fec:	6123      	str	r3, [r4, #16]
 8004fee:	dc02      	bgt.n	8004ff6 <_printf_float+0x15e>
 8004ff0:	6822      	ldr	r2, [r4, #0]
 8004ff2:	07d2      	lsls	r2, r2, #31
 8004ff4:	d501      	bpl.n	8004ffa <_printf_float+0x162>
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d09b      	beq.n	8004f3a <_printf_float+0xa2>
 8005002:	232d      	movs	r3, #45	; 0x2d
 8005004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005008:	e797      	b.n	8004f3a <_printf_float+0xa2>
 800500a:	2947      	cmp	r1, #71	; 0x47
 800500c:	d1bc      	bne.n	8004f88 <_printf_float+0xf0>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1ba      	bne.n	8004f88 <_printf_float+0xf0>
 8005012:	2301      	movs	r3, #1
 8005014:	e7b7      	b.n	8004f86 <_printf_float+0xee>
 8005016:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800501a:	d118      	bne.n	800504e <_printf_float+0x1b6>
 800501c:	2900      	cmp	r1, #0
 800501e:	6863      	ldr	r3, [r4, #4]
 8005020:	dd0b      	ble.n	800503a <_printf_float+0x1a2>
 8005022:	6121      	str	r1, [r4, #16]
 8005024:	b913      	cbnz	r3, 800502c <_printf_float+0x194>
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	07d0      	lsls	r0, r2, #31
 800502a:	d502      	bpl.n	8005032 <_printf_float+0x19a>
 800502c:	3301      	adds	r3, #1
 800502e:	440b      	add	r3, r1
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	f04f 0a00 	mov.w	sl, #0
 8005036:	65a1      	str	r1, [r4, #88]	; 0x58
 8005038:	e7df      	b.n	8004ffa <_printf_float+0x162>
 800503a:	b913      	cbnz	r3, 8005042 <_printf_float+0x1aa>
 800503c:	6822      	ldr	r2, [r4, #0]
 800503e:	07d2      	lsls	r2, r2, #31
 8005040:	d501      	bpl.n	8005046 <_printf_float+0x1ae>
 8005042:	3302      	adds	r3, #2
 8005044:	e7f4      	b.n	8005030 <_printf_float+0x198>
 8005046:	2301      	movs	r3, #1
 8005048:	e7f2      	b.n	8005030 <_printf_float+0x198>
 800504a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800504e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005050:	4299      	cmp	r1, r3
 8005052:	db05      	blt.n	8005060 <_printf_float+0x1c8>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	6121      	str	r1, [r4, #16]
 8005058:	07d8      	lsls	r0, r3, #31
 800505a:	d5ea      	bpl.n	8005032 <_printf_float+0x19a>
 800505c:	1c4b      	adds	r3, r1, #1
 800505e:	e7e7      	b.n	8005030 <_printf_float+0x198>
 8005060:	2900      	cmp	r1, #0
 8005062:	bfcc      	ite	gt
 8005064:	2201      	movgt	r2, #1
 8005066:	f1c1 0202 	rsble	r2, r1, #2
 800506a:	4413      	add	r3, r2
 800506c:	e7e0      	b.n	8005030 <_printf_float+0x198>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	055a      	lsls	r2, r3, #21
 8005072:	d407      	bmi.n	8005084 <_printf_float+0x1ec>
 8005074:	6923      	ldr	r3, [r4, #16]
 8005076:	4642      	mov	r2, r8
 8005078:	4631      	mov	r1, r6
 800507a:	4628      	mov	r0, r5
 800507c:	47b8      	blx	r7
 800507e:	3001      	adds	r0, #1
 8005080:	d12b      	bne.n	80050da <_printf_float+0x242>
 8005082:	e764      	b.n	8004f4e <_printf_float+0xb6>
 8005084:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005088:	f240 80dd 	bls.w	8005246 <_printf_float+0x3ae>
 800508c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005090:	2200      	movs	r2, #0
 8005092:	2300      	movs	r3, #0
 8005094:	f7fb fc88 	bl	80009a8 <__aeabi_dcmpeq>
 8005098:	2800      	cmp	r0, #0
 800509a:	d033      	beq.n	8005104 <_printf_float+0x26c>
 800509c:	2301      	movs	r3, #1
 800509e:	4631      	mov	r1, r6
 80050a0:	4628      	mov	r0, r5
 80050a2:	4a35      	ldr	r2, [pc, #212]	; (8005178 <_printf_float+0x2e0>)
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f af51 	beq.w	8004f4e <_printf_float+0xb6>
 80050ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050b0:	429a      	cmp	r2, r3
 80050b2:	db02      	blt.n	80050ba <_printf_float+0x222>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	07d8      	lsls	r0, r3, #31
 80050b8:	d50f      	bpl.n	80050da <_printf_float+0x242>
 80050ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050be:	4631      	mov	r1, r6
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b8      	blx	r7
 80050c4:	3001      	adds	r0, #1
 80050c6:	f43f af42 	beq.w	8004f4e <_printf_float+0xb6>
 80050ca:	f04f 0800 	mov.w	r8, #0
 80050ce:	f104 091a 	add.w	r9, r4, #26
 80050d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050d4:	3b01      	subs	r3, #1
 80050d6:	4543      	cmp	r3, r8
 80050d8:	dc09      	bgt.n	80050ee <_printf_float+0x256>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	079b      	lsls	r3, r3, #30
 80050de:	f100 8102 	bmi.w	80052e6 <_printf_float+0x44e>
 80050e2:	68e0      	ldr	r0, [r4, #12]
 80050e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050e6:	4298      	cmp	r0, r3
 80050e8:	bfb8      	it	lt
 80050ea:	4618      	movlt	r0, r3
 80050ec:	e731      	b.n	8004f52 <_printf_float+0xba>
 80050ee:	2301      	movs	r3, #1
 80050f0:	464a      	mov	r2, r9
 80050f2:	4631      	mov	r1, r6
 80050f4:	4628      	mov	r0, r5
 80050f6:	47b8      	blx	r7
 80050f8:	3001      	adds	r0, #1
 80050fa:	f43f af28 	beq.w	8004f4e <_printf_float+0xb6>
 80050fe:	f108 0801 	add.w	r8, r8, #1
 8005102:	e7e6      	b.n	80050d2 <_printf_float+0x23a>
 8005104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005106:	2b00      	cmp	r3, #0
 8005108:	dc38      	bgt.n	800517c <_printf_float+0x2e4>
 800510a:	2301      	movs	r3, #1
 800510c:	4631      	mov	r1, r6
 800510e:	4628      	mov	r0, r5
 8005110:	4a19      	ldr	r2, [pc, #100]	; (8005178 <_printf_float+0x2e0>)
 8005112:	47b8      	blx	r7
 8005114:	3001      	adds	r0, #1
 8005116:	f43f af1a 	beq.w	8004f4e <_printf_float+0xb6>
 800511a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800511e:	4313      	orrs	r3, r2
 8005120:	d102      	bne.n	8005128 <_printf_float+0x290>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	07d9      	lsls	r1, r3, #31
 8005126:	d5d8      	bpl.n	80050da <_printf_float+0x242>
 8005128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800512c:	4631      	mov	r1, r6
 800512e:	4628      	mov	r0, r5
 8005130:	47b8      	blx	r7
 8005132:	3001      	adds	r0, #1
 8005134:	f43f af0b 	beq.w	8004f4e <_printf_float+0xb6>
 8005138:	f04f 0900 	mov.w	r9, #0
 800513c:	f104 0a1a 	add.w	sl, r4, #26
 8005140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005142:	425b      	negs	r3, r3
 8005144:	454b      	cmp	r3, r9
 8005146:	dc01      	bgt.n	800514c <_printf_float+0x2b4>
 8005148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800514a:	e794      	b.n	8005076 <_printf_float+0x1de>
 800514c:	2301      	movs	r3, #1
 800514e:	4652      	mov	r2, sl
 8005150:	4631      	mov	r1, r6
 8005152:	4628      	mov	r0, r5
 8005154:	47b8      	blx	r7
 8005156:	3001      	adds	r0, #1
 8005158:	f43f aef9 	beq.w	8004f4e <_printf_float+0xb6>
 800515c:	f109 0901 	add.w	r9, r9, #1
 8005160:	e7ee      	b.n	8005140 <_printf_float+0x2a8>
 8005162:	bf00      	nop
 8005164:	7fefffff 	.word	0x7fefffff
 8005168:	08009e8c 	.word	0x08009e8c
 800516c:	08009e90 	.word	0x08009e90
 8005170:	08009e98 	.word	0x08009e98
 8005174:	08009e94 	.word	0x08009e94
 8005178:	0800a2a1 	.word	0x0800a2a1
 800517c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800517e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005180:	429a      	cmp	r2, r3
 8005182:	bfa8      	it	ge
 8005184:	461a      	movge	r2, r3
 8005186:	2a00      	cmp	r2, #0
 8005188:	4691      	mov	r9, r2
 800518a:	dc37      	bgt.n	80051fc <_printf_float+0x364>
 800518c:	f04f 0b00 	mov.w	fp, #0
 8005190:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005194:	f104 021a 	add.w	r2, r4, #26
 8005198:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800519c:	ebaa 0309 	sub.w	r3, sl, r9
 80051a0:	455b      	cmp	r3, fp
 80051a2:	dc33      	bgt.n	800520c <_printf_float+0x374>
 80051a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051a8:	429a      	cmp	r2, r3
 80051aa:	db3b      	blt.n	8005224 <_printf_float+0x38c>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	07da      	lsls	r2, r3, #31
 80051b0:	d438      	bmi.n	8005224 <_printf_float+0x38c>
 80051b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051b6:	eba2 030a 	sub.w	r3, r2, sl
 80051ba:	eba2 0901 	sub.w	r9, r2, r1
 80051be:	4599      	cmp	r9, r3
 80051c0:	bfa8      	it	ge
 80051c2:	4699      	movge	r9, r3
 80051c4:	f1b9 0f00 	cmp.w	r9, #0
 80051c8:	dc34      	bgt.n	8005234 <_printf_float+0x39c>
 80051ca:	f04f 0800 	mov.w	r8, #0
 80051ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051d2:	f104 0a1a 	add.w	sl, r4, #26
 80051d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	eba3 0309 	sub.w	r3, r3, r9
 80051e0:	4543      	cmp	r3, r8
 80051e2:	f77f af7a 	ble.w	80050da <_printf_float+0x242>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4652      	mov	r2, sl
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	f43f aeac 	beq.w	8004f4e <_printf_float+0xb6>
 80051f6:	f108 0801 	add.w	r8, r8, #1
 80051fa:	e7ec      	b.n	80051d6 <_printf_float+0x33e>
 80051fc:	4613      	mov	r3, r2
 80051fe:	4631      	mov	r1, r6
 8005200:	4642      	mov	r2, r8
 8005202:	4628      	mov	r0, r5
 8005204:	47b8      	blx	r7
 8005206:	3001      	adds	r0, #1
 8005208:	d1c0      	bne.n	800518c <_printf_float+0x2f4>
 800520a:	e6a0      	b.n	8004f4e <_printf_float+0xb6>
 800520c:	2301      	movs	r3, #1
 800520e:	4631      	mov	r1, r6
 8005210:	4628      	mov	r0, r5
 8005212:	920b      	str	r2, [sp, #44]	; 0x2c
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	f43f ae99 	beq.w	8004f4e <_printf_float+0xb6>
 800521c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800521e:	f10b 0b01 	add.w	fp, fp, #1
 8005222:	e7b9      	b.n	8005198 <_printf_float+0x300>
 8005224:	4631      	mov	r1, r6
 8005226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800522a:	4628      	mov	r0, r5
 800522c:	47b8      	blx	r7
 800522e:	3001      	adds	r0, #1
 8005230:	d1bf      	bne.n	80051b2 <_printf_float+0x31a>
 8005232:	e68c      	b.n	8004f4e <_printf_float+0xb6>
 8005234:	464b      	mov	r3, r9
 8005236:	4631      	mov	r1, r6
 8005238:	4628      	mov	r0, r5
 800523a:	eb08 020a 	add.w	r2, r8, sl
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	d1c2      	bne.n	80051ca <_printf_float+0x332>
 8005244:	e683      	b.n	8004f4e <_printf_float+0xb6>
 8005246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005248:	2a01      	cmp	r2, #1
 800524a:	dc01      	bgt.n	8005250 <_printf_float+0x3b8>
 800524c:	07db      	lsls	r3, r3, #31
 800524e:	d537      	bpl.n	80052c0 <_printf_float+0x428>
 8005250:	2301      	movs	r3, #1
 8005252:	4642      	mov	r2, r8
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	f43f ae77 	beq.w	8004f4e <_printf_float+0xb6>
 8005260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f ae6f 	beq.w	8004f4e <_printf_float+0xb6>
 8005270:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005274:	2200      	movs	r2, #0
 8005276:	2300      	movs	r3, #0
 8005278:	f7fb fb96 	bl	80009a8 <__aeabi_dcmpeq>
 800527c:	b9d8      	cbnz	r0, 80052b6 <_printf_float+0x41e>
 800527e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005280:	f108 0201 	add.w	r2, r8, #1
 8005284:	3b01      	subs	r3, #1
 8005286:	4631      	mov	r1, r6
 8005288:	4628      	mov	r0, r5
 800528a:	47b8      	blx	r7
 800528c:	3001      	adds	r0, #1
 800528e:	d10e      	bne.n	80052ae <_printf_float+0x416>
 8005290:	e65d      	b.n	8004f4e <_printf_float+0xb6>
 8005292:	2301      	movs	r3, #1
 8005294:	464a      	mov	r2, r9
 8005296:	4631      	mov	r1, r6
 8005298:	4628      	mov	r0, r5
 800529a:	47b8      	blx	r7
 800529c:	3001      	adds	r0, #1
 800529e:	f43f ae56 	beq.w	8004f4e <_printf_float+0xb6>
 80052a2:	f108 0801 	add.w	r8, r8, #1
 80052a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052a8:	3b01      	subs	r3, #1
 80052aa:	4543      	cmp	r3, r8
 80052ac:	dcf1      	bgt.n	8005292 <_printf_float+0x3fa>
 80052ae:	4653      	mov	r3, sl
 80052b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052b4:	e6e0      	b.n	8005078 <_printf_float+0x1e0>
 80052b6:	f04f 0800 	mov.w	r8, #0
 80052ba:	f104 091a 	add.w	r9, r4, #26
 80052be:	e7f2      	b.n	80052a6 <_printf_float+0x40e>
 80052c0:	2301      	movs	r3, #1
 80052c2:	4642      	mov	r2, r8
 80052c4:	e7df      	b.n	8005286 <_printf_float+0x3ee>
 80052c6:	2301      	movs	r3, #1
 80052c8:	464a      	mov	r2, r9
 80052ca:	4631      	mov	r1, r6
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b8      	blx	r7
 80052d0:	3001      	adds	r0, #1
 80052d2:	f43f ae3c 	beq.w	8004f4e <_printf_float+0xb6>
 80052d6:	f108 0801 	add.w	r8, r8, #1
 80052da:	68e3      	ldr	r3, [r4, #12]
 80052dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80052de:	1a5b      	subs	r3, r3, r1
 80052e0:	4543      	cmp	r3, r8
 80052e2:	dcf0      	bgt.n	80052c6 <_printf_float+0x42e>
 80052e4:	e6fd      	b.n	80050e2 <_printf_float+0x24a>
 80052e6:	f04f 0800 	mov.w	r8, #0
 80052ea:	f104 0919 	add.w	r9, r4, #25
 80052ee:	e7f4      	b.n	80052da <_printf_float+0x442>

080052f0 <_printf_common>:
 80052f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f4:	4616      	mov	r6, r2
 80052f6:	4699      	mov	r9, r3
 80052f8:	688a      	ldr	r2, [r1, #8]
 80052fa:	690b      	ldr	r3, [r1, #16]
 80052fc:	4607      	mov	r7, r0
 80052fe:	4293      	cmp	r3, r2
 8005300:	bfb8      	it	lt
 8005302:	4613      	movlt	r3, r2
 8005304:	6033      	str	r3, [r6, #0]
 8005306:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800530a:	460c      	mov	r4, r1
 800530c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005310:	b10a      	cbz	r2, 8005316 <_printf_common+0x26>
 8005312:	3301      	adds	r3, #1
 8005314:	6033      	str	r3, [r6, #0]
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	0699      	lsls	r1, r3, #26
 800531a:	bf42      	ittt	mi
 800531c:	6833      	ldrmi	r3, [r6, #0]
 800531e:	3302      	addmi	r3, #2
 8005320:	6033      	strmi	r3, [r6, #0]
 8005322:	6825      	ldr	r5, [r4, #0]
 8005324:	f015 0506 	ands.w	r5, r5, #6
 8005328:	d106      	bne.n	8005338 <_printf_common+0x48>
 800532a:	f104 0a19 	add.w	sl, r4, #25
 800532e:	68e3      	ldr	r3, [r4, #12]
 8005330:	6832      	ldr	r2, [r6, #0]
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	42ab      	cmp	r3, r5
 8005336:	dc28      	bgt.n	800538a <_printf_common+0x9a>
 8005338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800533c:	1e13      	subs	r3, r2, #0
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	bf18      	it	ne
 8005342:	2301      	movne	r3, #1
 8005344:	0692      	lsls	r2, r2, #26
 8005346:	d42d      	bmi.n	80053a4 <_printf_common+0xb4>
 8005348:	4649      	mov	r1, r9
 800534a:	4638      	mov	r0, r7
 800534c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005350:	47c0      	blx	r8
 8005352:	3001      	adds	r0, #1
 8005354:	d020      	beq.n	8005398 <_printf_common+0xa8>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	68e5      	ldr	r5, [r4, #12]
 800535a:	f003 0306 	and.w	r3, r3, #6
 800535e:	2b04      	cmp	r3, #4
 8005360:	bf18      	it	ne
 8005362:	2500      	movne	r5, #0
 8005364:	6832      	ldr	r2, [r6, #0]
 8005366:	f04f 0600 	mov.w	r6, #0
 800536a:	68a3      	ldr	r3, [r4, #8]
 800536c:	bf08      	it	eq
 800536e:	1aad      	subeq	r5, r5, r2
 8005370:	6922      	ldr	r2, [r4, #16]
 8005372:	bf08      	it	eq
 8005374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005378:	4293      	cmp	r3, r2
 800537a:	bfc4      	itt	gt
 800537c:	1a9b      	subgt	r3, r3, r2
 800537e:	18ed      	addgt	r5, r5, r3
 8005380:	341a      	adds	r4, #26
 8005382:	42b5      	cmp	r5, r6
 8005384:	d11a      	bne.n	80053bc <_printf_common+0xcc>
 8005386:	2000      	movs	r0, #0
 8005388:	e008      	b.n	800539c <_printf_common+0xac>
 800538a:	2301      	movs	r3, #1
 800538c:	4652      	mov	r2, sl
 800538e:	4649      	mov	r1, r9
 8005390:	4638      	mov	r0, r7
 8005392:	47c0      	blx	r8
 8005394:	3001      	adds	r0, #1
 8005396:	d103      	bne.n	80053a0 <_printf_common+0xb0>
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a0:	3501      	adds	r5, #1
 80053a2:	e7c4      	b.n	800532e <_printf_common+0x3e>
 80053a4:	2030      	movs	r0, #48	; 0x30
 80053a6:	18e1      	adds	r1, r4, r3
 80053a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053b2:	4422      	add	r2, r4
 80053b4:	3302      	adds	r3, #2
 80053b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053ba:	e7c5      	b.n	8005348 <_printf_common+0x58>
 80053bc:	2301      	movs	r3, #1
 80053be:	4622      	mov	r2, r4
 80053c0:	4649      	mov	r1, r9
 80053c2:	4638      	mov	r0, r7
 80053c4:	47c0      	blx	r8
 80053c6:	3001      	adds	r0, #1
 80053c8:	d0e6      	beq.n	8005398 <_printf_common+0xa8>
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7d9      	b.n	8005382 <_printf_common+0x92>
	...

080053d0 <_printf_i>:
 80053d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053d4:	460c      	mov	r4, r1
 80053d6:	7e27      	ldrb	r7, [r4, #24]
 80053d8:	4691      	mov	r9, r2
 80053da:	2f78      	cmp	r7, #120	; 0x78
 80053dc:	4680      	mov	r8, r0
 80053de:	469a      	mov	sl, r3
 80053e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80053e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053e6:	d807      	bhi.n	80053f8 <_printf_i+0x28>
 80053e8:	2f62      	cmp	r7, #98	; 0x62
 80053ea:	d80a      	bhi.n	8005402 <_printf_i+0x32>
 80053ec:	2f00      	cmp	r7, #0
 80053ee:	f000 80d9 	beq.w	80055a4 <_printf_i+0x1d4>
 80053f2:	2f58      	cmp	r7, #88	; 0x58
 80053f4:	f000 80a4 	beq.w	8005540 <_printf_i+0x170>
 80053f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005400:	e03a      	b.n	8005478 <_printf_i+0xa8>
 8005402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005406:	2b15      	cmp	r3, #21
 8005408:	d8f6      	bhi.n	80053f8 <_printf_i+0x28>
 800540a:	a001      	add	r0, pc, #4	; (adr r0, 8005410 <_printf_i+0x40>)
 800540c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005410:	08005469 	.word	0x08005469
 8005414:	0800547d 	.word	0x0800547d
 8005418:	080053f9 	.word	0x080053f9
 800541c:	080053f9 	.word	0x080053f9
 8005420:	080053f9 	.word	0x080053f9
 8005424:	080053f9 	.word	0x080053f9
 8005428:	0800547d 	.word	0x0800547d
 800542c:	080053f9 	.word	0x080053f9
 8005430:	080053f9 	.word	0x080053f9
 8005434:	080053f9 	.word	0x080053f9
 8005438:	080053f9 	.word	0x080053f9
 800543c:	0800558b 	.word	0x0800558b
 8005440:	080054ad 	.word	0x080054ad
 8005444:	0800556d 	.word	0x0800556d
 8005448:	080053f9 	.word	0x080053f9
 800544c:	080053f9 	.word	0x080053f9
 8005450:	080055ad 	.word	0x080055ad
 8005454:	080053f9 	.word	0x080053f9
 8005458:	080054ad 	.word	0x080054ad
 800545c:	080053f9 	.word	0x080053f9
 8005460:	080053f9 	.word	0x080053f9
 8005464:	08005575 	.word	0x08005575
 8005468:	680b      	ldr	r3, [r1, #0]
 800546a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800546e:	1d1a      	adds	r2, r3, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	600a      	str	r2, [r1, #0]
 8005474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005478:	2301      	movs	r3, #1
 800547a:	e0a4      	b.n	80055c6 <_printf_i+0x1f6>
 800547c:	6825      	ldr	r5, [r4, #0]
 800547e:	6808      	ldr	r0, [r1, #0]
 8005480:	062e      	lsls	r6, r5, #24
 8005482:	f100 0304 	add.w	r3, r0, #4
 8005486:	d50a      	bpl.n	800549e <_printf_i+0xce>
 8005488:	6805      	ldr	r5, [r0, #0]
 800548a:	600b      	str	r3, [r1, #0]
 800548c:	2d00      	cmp	r5, #0
 800548e:	da03      	bge.n	8005498 <_printf_i+0xc8>
 8005490:	232d      	movs	r3, #45	; 0x2d
 8005492:	426d      	negs	r5, r5
 8005494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005498:	230a      	movs	r3, #10
 800549a:	485e      	ldr	r0, [pc, #376]	; (8005614 <_printf_i+0x244>)
 800549c:	e019      	b.n	80054d2 <_printf_i+0x102>
 800549e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80054a2:	6805      	ldr	r5, [r0, #0]
 80054a4:	600b      	str	r3, [r1, #0]
 80054a6:	bf18      	it	ne
 80054a8:	b22d      	sxthne	r5, r5
 80054aa:	e7ef      	b.n	800548c <_printf_i+0xbc>
 80054ac:	680b      	ldr	r3, [r1, #0]
 80054ae:	6825      	ldr	r5, [r4, #0]
 80054b0:	1d18      	adds	r0, r3, #4
 80054b2:	6008      	str	r0, [r1, #0]
 80054b4:	0628      	lsls	r0, r5, #24
 80054b6:	d501      	bpl.n	80054bc <_printf_i+0xec>
 80054b8:	681d      	ldr	r5, [r3, #0]
 80054ba:	e002      	b.n	80054c2 <_printf_i+0xf2>
 80054bc:	0669      	lsls	r1, r5, #25
 80054be:	d5fb      	bpl.n	80054b8 <_printf_i+0xe8>
 80054c0:	881d      	ldrh	r5, [r3, #0]
 80054c2:	2f6f      	cmp	r7, #111	; 0x6f
 80054c4:	bf0c      	ite	eq
 80054c6:	2308      	moveq	r3, #8
 80054c8:	230a      	movne	r3, #10
 80054ca:	4852      	ldr	r0, [pc, #328]	; (8005614 <_printf_i+0x244>)
 80054cc:	2100      	movs	r1, #0
 80054ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054d2:	6866      	ldr	r6, [r4, #4]
 80054d4:	2e00      	cmp	r6, #0
 80054d6:	bfa8      	it	ge
 80054d8:	6821      	ldrge	r1, [r4, #0]
 80054da:	60a6      	str	r6, [r4, #8]
 80054dc:	bfa4      	itt	ge
 80054de:	f021 0104 	bicge.w	r1, r1, #4
 80054e2:	6021      	strge	r1, [r4, #0]
 80054e4:	b90d      	cbnz	r5, 80054ea <_printf_i+0x11a>
 80054e6:	2e00      	cmp	r6, #0
 80054e8:	d04d      	beq.n	8005586 <_printf_i+0x1b6>
 80054ea:	4616      	mov	r6, r2
 80054ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80054f0:	fb03 5711 	mls	r7, r3, r1, r5
 80054f4:	5dc7      	ldrb	r7, [r0, r7]
 80054f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054fa:	462f      	mov	r7, r5
 80054fc:	42bb      	cmp	r3, r7
 80054fe:	460d      	mov	r5, r1
 8005500:	d9f4      	bls.n	80054ec <_printf_i+0x11c>
 8005502:	2b08      	cmp	r3, #8
 8005504:	d10b      	bne.n	800551e <_printf_i+0x14e>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	07df      	lsls	r7, r3, #31
 800550a:	d508      	bpl.n	800551e <_printf_i+0x14e>
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	6861      	ldr	r1, [r4, #4]
 8005510:	4299      	cmp	r1, r3
 8005512:	bfde      	ittt	le
 8005514:	2330      	movle	r3, #48	; 0x30
 8005516:	f806 3c01 	strble.w	r3, [r6, #-1]
 800551a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800551e:	1b92      	subs	r2, r2, r6
 8005520:	6122      	str	r2, [r4, #16]
 8005522:	464b      	mov	r3, r9
 8005524:	4621      	mov	r1, r4
 8005526:	4640      	mov	r0, r8
 8005528:	f8cd a000 	str.w	sl, [sp]
 800552c:	aa03      	add	r2, sp, #12
 800552e:	f7ff fedf 	bl	80052f0 <_printf_common>
 8005532:	3001      	adds	r0, #1
 8005534:	d14c      	bne.n	80055d0 <_printf_i+0x200>
 8005536:	f04f 30ff 	mov.w	r0, #4294967295
 800553a:	b004      	add	sp, #16
 800553c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005540:	4834      	ldr	r0, [pc, #208]	; (8005614 <_printf_i+0x244>)
 8005542:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005546:	680e      	ldr	r6, [r1, #0]
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	f856 5b04 	ldr.w	r5, [r6], #4
 800554e:	061f      	lsls	r7, r3, #24
 8005550:	600e      	str	r6, [r1, #0]
 8005552:	d514      	bpl.n	800557e <_printf_i+0x1ae>
 8005554:	07d9      	lsls	r1, r3, #31
 8005556:	bf44      	itt	mi
 8005558:	f043 0320 	orrmi.w	r3, r3, #32
 800555c:	6023      	strmi	r3, [r4, #0]
 800555e:	b91d      	cbnz	r5, 8005568 <_printf_i+0x198>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	f023 0320 	bic.w	r3, r3, #32
 8005566:	6023      	str	r3, [r4, #0]
 8005568:	2310      	movs	r3, #16
 800556a:	e7af      	b.n	80054cc <_printf_i+0xfc>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	f043 0320 	orr.w	r3, r3, #32
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	2378      	movs	r3, #120	; 0x78
 8005576:	4828      	ldr	r0, [pc, #160]	; (8005618 <_printf_i+0x248>)
 8005578:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800557c:	e7e3      	b.n	8005546 <_printf_i+0x176>
 800557e:	065e      	lsls	r6, r3, #25
 8005580:	bf48      	it	mi
 8005582:	b2ad      	uxthmi	r5, r5
 8005584:	e7e6      	b.n	8005554 <_printf_i+0x184>
 8005586:	4616      	mov	r6, r2
 8005588:	e7bb      	b.n	8005502 <_printf_i+0x132>
 800558a:	680b      	ldr	r3, [r1, #0]
 800558c:	6826      	ldr	r6, [r4, #0]
 800558e:	1d1d      	adds	r5, r3, #4
 8005590:	6960      	ldr	r0, [r4, #20]
 8005592:	600d      	str	r5, [r1, #0]
 8005594:	0635      	lsls	r5, r6, #24
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	d501      	bpl.n	800559e <_printf_i+0x1ce>
 800559a:	6018      	str	r0, [r3, #0]
 800559c:	e002      	b.n	80055a4 <_printf_i+0x1d4>
 800559e:	0671      	lsls	r1, r6, #25
 80055a0:	d5fb      	bpl.n	800559a <_printf_i+0x1ca>
 80055a2:	8018      	strh	r0, [r3, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	4616      	mov	r6, r2
 80055a8:	6123      	str	r3, [r4, #16]
 80055aa:	e7ba      	b.n	8005522 <_printf_i+0x152>
 80055ac:	680b      	ldr	r3, [r1, #0]
 80055ae:	1d1a      	adds	r2, r3, #4
 80055b0:	600a      	str	r2, [r1, #0]
 80055b2:	681e      	ldr	r6, [r3, #0]
 80055b4:	2100      	movs	r1, #0
 80055b6:	4630      	mov	r0, r6
 80055b8:	6862      	ldr	r2, [r4, #4]
 80055ba:	f002 fbad 	bl	8007d18 <memchr>
 80055be:	b108      	cbz	r0, 80055c4 <_printf_i+0x1f4>
 80055c0:	1b80      	subs	r0, r0, r6
 80055c2:	6060      	str	r0, [r4, #4]
 80055c4:	6863      	ldr	r3, [r4, #4]
 80055c6:	6123      	str	r3, [r4, #16]
 80055c8:	2300      	movs	r3, #0
 80055ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ce:	e7a8      	b.n	8005522 <_printf_i+0x152>
 80055d0:	4632      	mov	r2, r6
 80055d2:	4649      	mov	r1, r9
 80055d4:	4640      	mov	r0, r8
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	47d0      	blx	sl
 80055da:	3001      	adds	r0, #1
 80055dc:	d0ab      	beq.n	8005536 <_printf_i+0x166>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	079b      	lsls	r3, r3, #30
 80055e2:	d413      	bmi.n	800560c <_printf_i+0x23c>
 80055e4:	68e0      	ldr	r0, [r4, #12]
 80055e6:	9b03      	ldr	r3, [sp, #12]
 80055e8:	4298      	cmp	r0, r3
 80055ea:	bfb8      	it	lt
 80055ec:	4618      	movlt	r0, r3
 80055ee:	e7a4      	b.n	800553a <_printf_i+0x16a>
 80055f0:	2301      	movs	r3, #1
 80055f2:	4632      	mov	r2, r6
 80055f4:	4649      	mov	r1, r9
 80055f6:	4640      	mov	r0, r8
 80055f8:	47d0      	blx	sl
 80055fa:	3001      	adds	r0, #1
 80055fc:	d09b      	beq.n	8005536 <_printf_i+0x166>
 80055fe:	3501      	adds	r5, #1
 8005600:	68e3      	ldr	r3, [r4, #12]
 8005602:	9903      	ldr	r1, [sp, #12]
 8005604:	1a5b      	subs	r3, r3, r1
 8005606:	42ab      	cmp	r3, r5
 8005608:	dcf2      	bgt.n	80055f0 <_printf_i+0x220>
 800560a:	e7eb      	b.n	80055e4 <_printf_i+0x214>
 800560c:	2500      	movs	r5, #0
 800560e:	f104 0619 	add.w	r6, r4, #25
 8005612:	e7f5      	b.n	8005600 <_printf_i+0x230>
 8005614:	08009e9c 	.word	0x08009e9c
 8005618:	08009ead 	.word	0x08009ead

0800561c <_scanf_float>:
 800561c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005620:	b087      	sub	sp, #28
 8005622:	9303      	str	r3, [sp, #12]
 8005624:	688b      	ldr	r3, [r1, #8]
 8005626:	4617      	mov	r7, r2
 8005628:	1e5a      	subs	r2, r3, #1
 800562a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800562e:	bf85      	ittet	hi
 8005630:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005634:	195b      	addhi	r3, r3, r5
 8005636:	2300      	movls	r3, #0
 8005638:	9302      	strhi	r3, [sp, #8]
 800563a:	bf88      	it	hi
 800563c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005640:	468b      	mov	fp, r1
 8005642:	f04f 0500 	mov.w	r5, #0
 8005646:	bf8c      	ite	hi
 8005648:	608b      	strhi	r3, [r1, #8]
 800564a:	9302      	strls	r3, [sp, #8]
 800564c:	680b      	ldr	r3, [r1, #0]
 800564e:	4680      	mov	r8, r0
 8005650:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005654:	f84b 3b1c 	str.w	r3, [fp], #28
 8005658:	460c      	mov	r4, r1
 800565a:	465e      	mov	r6, fp
 800565c:	46aa      	mov	sl, r5
 800565e:	46a9      	mov	r9, r5
 8005660:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005664:	9501      	str	r5, [sp, #4]
 8005666:	68a2      	ldr	r2, [r4, #8]
 8005668:	b152      	cbz	r2, 8005680 <_scanf_float+0x64>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b4e      	cmp	r3, #78	; 0x4e
 8005670:	d864      	bhi.n	800573c <_scanf_float+0x120>
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d83c      	bhi.n	80056f0 <_scanf_float+0xd4>
 8005676:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800567a:	b2c8      	uxtb	r0, r1
 800567c:	280e      	cmp	r0, #14
 800567e:	d93a      	bls.n	80056f6 <_scanf_float+0xda>
 8005680:	f1b9 0f00 	cmp.w	r9, #0
 8005684:	d003      	beq.n	800568e <_scanf_float+0x72>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005692:	f1ba 0f01 	cmp.w	sl, #1
 8005696:	f200 8113 	bhi.w	80058c0 <_scanf_float+0x2a4>
 800569a:	455e      	cmp	r6, fp
 800569c:	f200 8105 	bhi.w	80058aa <_scanf_float+0x28e>
 80056a0:	2501      	movs	r5, #1
 80056a2:	4628      	mov	r0, r5
 80056a4:	b007      	add	sp, #28
 80056a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056aa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80056ae:	2a0d      	cmp	r2, #13
 80056b0:	d8e6      	bhi.n	8005680 <_scanf_float+0x64>
 80056b2:	a101      	add	r1, pc, #4	; (adr r1, 80056b8 <_scanf_float+0x9c>)
 80056b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056b8:	080057f7 	.word	0x080057f7
 80056bc:	08005681 	.word	0x08005681
 80056c0:	08005681 	.word	0x08005681
 80056c4:	08005681 	.word	0x08005681
 80056c8:	08005857 	.word	0x08005857
 80056cc:	0800582f 	.word	0x0800582f
 80056d0:	08005681 	.word	0x08005681
 80056d4:	08005681 	.word	0x08005681
 80056d8:	08005805 	.word	0x08005805
 80056dc:	08005681 	.word	0x08005681
 80056e0:	08005681 	.word	0x08005681
 80056e4:	08005681 	.word	0x08005681
 80056e8:	08005681 	.word	0x08005681
 80056ec:	080057bd 	.word	0x080057bd
 80056f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80056f4:	e7db      	b.n	80056ae <_scanf_float+0x92>
 80056f6:	290e      	cmp	r1, #14
 80056f8:	d8c2      	bhi.n	8005680 <_scanf_float+0x64>
 80056fa:	a001      	add	r0, pc, #4	; (adr r0, 8005700 <_scanf_float+0xe4>)
 80056fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005700:	080057af 	.word	0x080057af
 8005704:	08005681 	.word	0x08005681
 8005708:	080057af 	.word	0x080057af
 800570c:	08005843 	.word	0x08005843
 8005710:	08005681 	.word	0x08005681
 8005714:	0800575d 	.word	0x0800575d
 8005718:	08005799 	.word	0x08005799
 800571c:	08005799 	.word	0x08005799
 8005720:	08005799 	.word	0x08005799
 8005724:	08005799 	.word	0x08005799
 8005728:	08005799 	.word	0x08005799
 800572c:	08005799 	.word	0x08005799
 8005730:	08005799 	.word	0x08005799
 8005734:	08005799 	.word	0x08005799
 8005738:	08005799 	.word	0x08005799
 800573c:	2b6e      	cmp	r3, #110	; 0x6e
 800573e:	d809      	bhi.n	8005754 <_scanf_float+0x138>
 8005740:	2b60      	cmp	r3, #96	; 0x60
 8005742:	d8b2      	bhi.n	80056aa <_scanf_float+0x8e>
 8005744:	2b54      	cmp	r3, #84	; 0x54
 8005746:	d077      	beq.n	8005838 <_scanf_float+0x21c>
 8005748:	2b59      	cmp	r3, #89	; 0x59
 800574a:	d199      	bne.n	8005680 <_scanf_float+0x64>
 800574c:	2d07      	cmp	r5, #7
 800574e:	d197      	bne.n	8005680 <_scanf_float+0x64>
 8005750:	2508      	movs	r5, #8
 8005752:	e029      	b.n	80057a8 <_scanf_float+0x18c>
 8005754:	2b74      	cmp	r3, #116	; 0x74
 8005756:	d06f      	beq.n	8005838 <_scanf_float+0x21c>
 8005758:	2b79      	cmp	r3, #121	; 0x79
 800575a:	e7f6      	b.n	800574a <_scanf_float+0x12e>
 800575c:	6821      	ldr	r1, [r4, #0]
 800575e:	05c8      	lsls	r0, r1, #23
 8005760:	d51a      	bpl.n	8005798 <_scanf_float+0x17c>
 8005762:	9b02      	ldr	r3, [sp, #8]
 8005764:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005768:	6021      	str	r1, [r4, #0]
 800576a:	f109 0901 	add.w	r9, r9, #1
 800576e:	b11b      	cbz	r3, 8005778 <_scanf_float+0x15c>
 8005770:	3b01      	subs	r3, #1
 8005772:	3201      	adds	r2, #1
 8005774:	9302      	str	r3, [sp, #8]
 8005776:	60a2      	str	r2, [r4, #8]
 8005778:	68a3      	ldr	r3, [r4, #8]
 800577a:	3b01      	subs	r3, #1
 800577c:	60a3      	str	r3, [r4, #8]
 800577e:	6923      	ldr	r3, [r4, #16]
 8005780:	3301      	adds	r3, #1
 8005782:	6123      	str	r3, [r4, #16]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3b01      	subs	r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	607b      	str	r3, [r7, #4]
 800578c:	f340 8084 	ble.w	8005898 <_scanf_float+0x27c>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	3301      	adds	r3, #1
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	e766      	b.n	8005666 <_scanf_float+0x4a>
 8005798:	eb1a 0f05 	cmn.w	sl, r5
 800579c:	f47f af70 	bne.w	8005680 <_scanf_float+0x64>
 80057a0:	6822      	ldr	r2, [r4, #0]
 80057a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80057a6:	6022      	str	r2, [r4, #0]
 80057a8:	f806 3b01 	strb.w	r3, [r6], #1
 80057ac:	e7e4      	b.n	8005778 <_scanf_float+0x15c>
 80057ae:	6822      	ldr	r2, [r4, #0]
 80057b0:	0610      	lsls	r0, r2, #24
 80057b2:	f57f af65 	bpl.w	8005680 <_scanf_float+0x64>
 80057b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ba:	e7f4      	b.n	80057a6 <_scanf_float+0x18a>
 80057bc:	f1ba 0f00 	cmp.w	sl, #0
 80057c0:	d10e      	bne.n	80057e0 <_scanf_float+0x1c4>
 80057c2:	f1b9 0f00 	cmp.w	r9, #0
 80057c6:	d10e      	bne.n	80057e6 <_scanf_float+0x1ca>
 80057c8:	6822      	ldr	r2, [r4, #0]
 80057ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80057d2:	d108      	bne.n	80057e6 <_scanf_float+0x1ca>
 80057d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057d8:	f04f 0a01 	mov.w	sl, #1
 80057dc:	6022      	str	r2, [r4, #0]
 80057de:	e7e3      	b.n	80057a8 <_scanf_float+0x18c>
 80057e0:	f1ba 0f02 	cmp.w	sl, #2
 80057e4:	d055      	beq.n	8005892 <_scanf_float+0x276>
 80057e6:	2d01      	cmp	r5, #1
 80057e8:	d002      	beq.n	80057f0 <_scanf_float+0x1d4>
 80057ea:	2d04      	cmp	r5, #4
 80057ec:	f47f af48 	bne.w	8005680 <_scanf_float+0x64>
 80057f0:	3501      	adds	r5, #1
 80057f2:	b2ed      	uxtb	r5, r5
 80057f4:	e7d8      	b.n	80057a8 <_scanf_float+0x18c>
 80057f6:	f1ba 0f01 	cmp.w	sl, #1
 80057fa:	f47f af41 	bne.w	8005680 <_scanf_float+0x64>
 80057fe:	f04f 0a02 	mov.w	sl, #2
 8005802:	e7d1      	b.n	80057a8 <_scanf_float+0x18c>
 8005804:	b97d      	cbnz	r5, 8005826 <_scanf_float+0x20a>
 8005806:	f1b9 0f00 	cmp.w	r9, #0
 800580a:	f47f af3c 	bne.w	8005686 <_scanf_float+0x6a>
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005814:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005818:	f47f af39 	bne.w	800568e <_scanf_float+0x72>
 800581c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005820:	2501      	movs	r5, #1
 8005822:	6022      	str	r2, [r4, #0]
 8005824:	e7c0      	b.n	80057a8 <_scanf_float+0x18c>
 8005826:	2d03      	cmp	r5, #3
 8005828:	d0e2      	beq.n	80057f0 <_scanf_float+0x1d4>
 800582a:	2d05      	cmp	r5, #5
 800582c:	e7de      	b.n	80057ec <_scanf_float+0x1d0>
 800582e:	2d02      	cmp	r5, #2
 8005830:	f47f af26 	bne.w	8005680 <_scanf_float+0x64>
 8005834:	2503      	movs	r5, #3
 8005836:	e7b7      	b.n	80057a8 <_scanf_float+0x18c>
 8005838:	2d06      	cmp	r5, #6
 800583a:	f47f af21 	bne.w	8005680 <_scanf_float+0x64>
 800583e:	2507      	movs	r5, #7
 8005840:	e7b2      	b.n	80057a8 <_scanf_float+0x18c>
 8005842:	6822      	ldr	r2, [r4, #0]
 8005844:	0591      	lsls	r1, r2, #22
 8005846:	f57f af1b 	bpl.w	8005680 <_scanf_float+0x64>
 800584a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800584e:	6022      	str	r2, [r4, #0]
 8005850:	f8cd 9004 	str.w	r9, [sp, #4]
 8005854:	e7a8      	b.n	80057a8 <_scanf_float+0x18c>
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800585c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005860:	d006      	beq.n	8005870 <_scanf_float+0x254>
 8005862:	0550      	lsls	r0, r2, #21
 8005864:	f57f af0c 	bpl.w	8005680 <_scanf_float+0x64>
 8005868:	f1b9 0f00 	cmp.w	r9, #0
 800586c:	f43f af0f 	beq.w	800568e <_scanf_float+0x72>
 8005870:	0591      	lsls	r1, r2, #22
 8005872:	bf58      	it	pl
 8005874:	9901      	ldrpl	r1, [sp, #4]
 8005876:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800587a:	bf58      	it	pl
 800587c:	eba9 0101 	subpl.w	r1, r9, r1
 8005880:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005884:	f04f 0900 	mov.w	r9, #0
 8005888:	bf58      	it	pl
 800588a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800588e:	6022      	str	r2, [r4, #0]
 8005890:	e78a      	b.n	80057a8 <_scanf_float+0x18c>
 8005892:	f04f 0a03 	mov.w	sl, #3
 8005896:	e787      	b.n	80057a8 <_scanf_float+0x18c>
 8005898:	4639      	mov	r1, r7
 800589a:	4640      	mov	r0, r8
 800589c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80058a0:	4798      	blx	r3
 80058a2:	2800      	cmp	r0, #0
 80058a4:	f43f aedf 	beq.w	8005666 <_scanf_float+0x4a>
 80058a8:	e6ea      	b.n	8005680 <_scanf_float+0x64>
 80058aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058ae:	463a      	mov	r2, r7
 80058b0:	4640      	mov	r0, r8
 80058b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058b6:	4798      	blx	r3
 80058b8:	6923      	ldr	r3, [r4, #16]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	6123      	str	r3, [r4, #16]
 80058be:	e6ec      	b.n	800569a <_scanf_float+0x7e>
 80058c0:	1e6b      	subs	r3, r5, #1
 80058c2:	2b06      	cmp	r3, #6
 80058c4:	d825      	bhi.n	8005912 <_scanf_float+0x2f6>
 80058c6:	2d02      	cmp	r5, #2
 80058c8:	d836      	bhi.n	8005938 <_scanf_float+0x31c>
 80058ca:	455e      	cmp	r6, fp
 80058cc:	f67f aee8 	bls.w	80056a0 <_scanf_float+0x84>
 80058d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058d4:	463a      	mov	r2, r7
 80058d6:	4640      	mov	r0, r8
 80058d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058dc:	4798      	blx	r3
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	6123      	str	r3, [r4, #16]
 80058e4:	e7f1      	b.n	80058ca <_scanf_float+0x2ae>
 80058e6:	9802      	ldr	r0, [sp, #8]
 80058e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80058f0:	463a      	mov	r2, r7
 80058f2:	9002      	str	r0, [sp, #8]
 80058f4:	4640      	mov	r0, r8
 80058f6:	4798      	blx	r3
 80058f8:	6923      	ldr	r3, [r4, #16]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	6123      	str	r3, [r4, #16]
 80058fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005902:	fa5f fa8a 	uxtb.w	sl, sl
 8005906:	f1ba 0f02 	cmp.w	sl, #2
 800590a:	d1ec      	bne.n	80058e6 <_scanf_float+0x2ca>
 800590c:	3d03      	subs	r5, #3
 800590e:	b2ed      	uxtb	r5, r5
 8005910:	1b76      	subs	r6, r6, r5
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	05da      	lsls	r2, r3, #23
 8005916:	d52f      	bpl.n	8005978 <_scanf_float+0x35c>
 8005918:	055b      	lsls	r3, r3, #21
 800591a:	d510      	bpl.n	800593e <_scanf_float+0x322>
 800591c:	455e      	cmp	r6, fp
 800591e:	f67f aebf 	bls.w	80056a0 <_scanf_float+0x84>
 8005922:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005926:	463a      	mov	r2, r7
 8005928:	4640      	mov	r0, r8
 800592a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800592e:	4798      	blx	r3
 8005930:	6923      	ldr	r3, [r4, #16]
 8005932:	3b01      	subs	r3, #1
 8005934:	6123      	str	r3, [r4, #16]
 8005936:	e7f1      	b.n	800591c <_scanf_float+0x300>
 8005938:	46aa      	mov	sl, r5
 800593a:	9602      	str	r6, [sp, #8]
 800593c:	e7df      	b.n	80058fe <_scanf_float+0x2e2>
 800593e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	2965      	cmp	r1, #101	; 0x65
 8005946:	f103 33ff 	add.w	r3, r3, #4294967295
 800594a:	f106 35ff 	add.w	r5, r6, #4294967295
 800594e:	6123      	str	r3, [r4, #16]
 8005950:	d00c      	beq.n	800596c <_scanf_float+0x350>
 8005952:	2945      	cmp	r1, #69	; 0x45
 8005954:	d00a      	beq.n	800596c <_scanf_float+0x350>
 8005956:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800595a:	463a      	mov	r2, r7
 800595c:	4640      	mov	r0, r8
 800595e:	4798      	blx	r3
 8005960:	6923      	ldr	r3, [r4, #16]
 8005962:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005966:	3b01      	subs	r3, #1
 8005968:	1eb5      	subs	r5, r6, #2
 800596a:	6123      	str	r3, [r4, #16]
 800596c:	463a      	mov	r2, r7
 800596e:	4640      	mov	r0, r8
 8005970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005974:	4798      	blx	r3
 8005976:	462e      	mov	r6, r5
 8005978:	6825      	ldr	r5, [r4, #0]
 800597a:	f015 0510 	ands.w	r5, r5, #16
 800597e:	d159      	bne.n	8005a34 <_scanf_float+0x418>
 8005980:	7035      	strb	r5, [r6, #0]
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598c:	d11c      	bne.n	80059c8 <_scanf_float+0x3ac>
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	454b      	cmp	r3, r9
 8005992:	eba3 0209 	sub.w	r2, r3, r9
 8005996:	d124      	bne.n	80059e2 <_scanf_float+0x3c6>
 8005998:	2200      	movs	r2, #0
 800599a:	4659      	mov	r1, fp
 800599c:	4640      	mov	r0, r8
 800599e:	f000 fef7 	bl	8006790 <_strtod_r>
 80059a2:	f8d4 c000 	ldr.w	ip, [r4]
 80059a6:	9b03      	ldr	r3, [sp, #12]
 80059a8:	f01c 0f02 	tst.w	ip, #2
 80059ac:	4606      	mov	r6, r0
 80059ae:	460f      	mov	r7, r1
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	d021      	beq.n	80059f8 <_scanf_float+0x3dc>
 80059b4:	9903      	ldr	r1, [sp, #12]
 80059b6:	1d1a      	adds	r2, r3, #4
 80059b8:	600a      	str	r2, [r1, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	e9c3 6700 	strd	r6, r7, [r3]
 80059c0:	68e3      	ldr	r3, [r4, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60e3      	str	r3, [r4, #12]
 80059c6:	e66c      	b.n	80056a2 <_scanf_float+0x86>
 80059c8:	9b04      	ldr	r3, [sp, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0e4      	beq.n	8005998 <_scanf_float+0x37c>
 80059ce:	9905      	ldr	r1, [sp, #20]
 80059d0:	230a      	movs	r3, #10
 80059d2:	462a      	mov	r2, r5
 80059d4:	4640      	mov	r0, r8
 80059d6:	3101      	adds	r1, #1
 80059d8:	f000 ff66 	bl	80068a8 <_strtol_r>
 80059dc:	9b04      	ldr	r3, [sp, #16]
 80059de:	9e05      	ldr	r6, [sp, #20]
 80059e0:	1ac2      	subs	r2, r0, r3
 80059e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80059e6:	429e      	cmp	r6, r3
 80059e8:	bf28      	it	cs
 80059ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80059ee:	4630      	mov	r0, r6
 80059f0:	4911      	ldr	r1, [pc, #68]	; (8005a38 <_scanf_float+0x41c>)
 80059f2:	f000 f829 	bl	8005a48 <siprintf>
 80059f6:	e7cf      	b.n	8005998 <_scanf_float+0x37c>
 80059f8:	f01c 0f04 	tst.w	ip, #4
 80059fc:	f103 0e04 	add.w	lr, r3, #4
 8005a00:	d003      	beq.n	8005a0a <_scanf_float+0x3ee>
 8005a02:	9903      	ldr	r1, [sp, #12]
 8005a04:	f8c1 e000 	str.w	lr, [r1]
 8005a08:	e7d7      	b.n	80059ba <_scanf_float+0x39e>
 8005a0a:	9a03      	ldr	r2, [sp, #12]
 8005a0c:	f8c2 e000 	str.w	lr, [r2]
 8005a10:	f8d3 8000 	ldr.w	r8, [r3]
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	f7fa fff8 	bl	8000a0c <__aeabi_dcmpun>
 8005a1c:	b128      	cbz	r0, 8005a2a <_scanf_float+0x40e>
 8005a1e:	4807      	ldr	r0, [pc, #28]	; (8005a3c <_scanf_float+0x420>)
 8005a20:	f000 f80e 	bl	8005a40 <nanf>
 8005a24:	f8c8 0000 	str.w	r0, [r8]
 8005a28:	e7ca      	b.n	80059c0 <_scanf_float+0x3a4>
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	4639      	mov	r1, r7
 8005a2e:	f7fb f84b 	bl	8000ac8 <__aeabi_d2f>
 8005a32:	e7f7      	b.n	8005a24 <_scanf_float+0x408>
 8005a34:	2500      	movs	r5, #0
 8005a36:	e634      	b.n	80056a2 <_scanf_float+0x86>
 8005a38:	08009ebe 	.word	0x08009ebe
 8005a3c:	0800a2f3 	.word	0x0800a2f3

08005a40 <nanf>:
 8005a40:	4800      	ldr	r0, [pc, #0]	; (8005a44 <nanf+0x4>)
 8005a42:	4770      	bx	lr
 8005a44:	7fc00000 	.word	0x7fc00000

08005a48 <siprintf>:
 8005a48:	b40e      	push	{r1, r2, r3}
 8005a4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a4e:	b500      	push	{lr}
 8005a50:	b09c      	sub	sp, #112	; 0x70
 8005a52:	ab1d      	add	r3, sp, #116	; 0x74
 8005a54:	9002      	str	r0, [sp, #8]
 8005a56:	9006      	str	r0, [sp, #24]
 8005a58:	9107      	str	r1, [sp, #28]
 8005a5a:	9104      	str	r1, [sp, #16]
 8005a5c:	4808      	ldr	r0, [pc, #32]	; (8005a80 <siprintf+0x38>)
 8005a5e:	4909      	ldr	r1, [pc, #36]	; (8005a84 <siprintf+0x3c>)
 8005a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a64:	9105      	str	r1, [sp, #20]
 8005a66:	6800      	ldr	r0, [r0, #0]
 8005a68:	a902      	add	r1, sp, #8
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	f002 ff38 	bl	80088e0 <_svfiprintf_r>
 8005a70:	2200      	movs	r2, #0
 8005a72:	9b02      	ldr	r3, [sp, #8]
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	b01c      	add	sp, #112	; 0x70
 8005a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a7c:	b003      	add	sp, #12
 8005a7e:	4770      	bx	lr
 8005a80:	20000014 	.word	0x20000014
 8005a84:	ffff0208 	.word	0xffff0208

08005a88 <siscanf>:
 8005a88:	b40e      	push	{r1, r2, r3}
 8005a8a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005a8e:	b530      	push	{r4, r5, lr}
 8005a90:	b09c      	sub	sp, #112	; 0x70
 8005a92:	ac1f      	add	r4, sp, #124	; 0x7c
 8005a94:	f854 5b04 	ldr.w	r5, [r4], #4
 8005a98:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005a9c:	9002      	str	r0, [sp, #8]
 8005a9e:	9006      	str	r0, [sp, #24]
 8005aa0:	f7fa fb56 	bl	8000150 <strlen>
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <siscanf+0x4c>)
 8005aa6:	9003      	str	r0, [sp, #12]
 8005aa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aaa:	2300      	movs	r3, #0
 8005aac:	930f      	str	r3, [sp, #60]	; 0x3c
 8005aae:	9314      	str	r3, [sp, #80]	; 0x50
 8005ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ab4:	9007      	str	r0, [sp, #28]
 8005ab6:	4808      	ldr	r0, [pc, #32]	; (8005ad8 <siscanf+0x50>)
 8005ab8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005abc:	462a      	mov	r2, r5
 8005abe:	4623      	mov	r3, r4
 8005ac0:	a902      	add	r1, sp, #8
 8005ac2:	6800      	ldr	r0, [r0, #0]
 8005ac4:	9401      	str	r4, [sp, #4]
 8005ac6:	f003 f865 	bl	8008b94 <__ssvfiscanf_r>
 8005aca:	b01c      	add	sp, #112	; 0x70
 8005acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ad0:	b003      	add	sp, #12
 8005ad2:	4770      	bx	lr
 8005ad4:	08005aff 	.word	0x08005aff
 8005ad8:	20000014 	.word	0x20000014

08005adc <__sread>:
 8005adc:	b510      	push	{r4, lr}
 8005ade:	460c      	mov	r4, r1
 8005ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae4:	f003 fb1a 	bl	800911c <_read_r>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	bfab      	itete	ge
 8005aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005aee:	89a3      	ldrhlt	r3, [r4, #12]
 8005af0:	181b      	addge	r3, r3, r0
 8005af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005af6:	bfac      	ite	ge
 8005af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005afa:	81a3      	strhlt	r3, [r4, #12]
 8005afc:	bd10      	pop	{r4, pc}

08005afe <__seofread>:
 8005afe:	2000      	movs	r0, #0
 8005b00:	4770      	bx	lr

08005b02 <__swrite>:
 8005b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b06:	461f      	mov	r7, r3
 8005b08:	898b      	ldrh	r3, [r1, #12]
 8005b0a:	4605      	mov	r5, r0
 8005b0c:	05db      	lsls	r3, r3, #23
 8005b0e:	460c      	mov	r4, r1
 8005b10:	4616      	mov	r6, r2
 8005b12:	d505      	bpl.n	8005b20 <__swrite+0x1e>
 8005b14:	2302      	movs	r3, #2
 8005b16:	2200      	movs	r2, #0
 8005b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b1c:	f002 f8d0 	bl	8007cc0 <_lseek_r>
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	4632      	mov	r2, r6
 8005b24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b28:	81a3      	strh	r3, [r4, #12]
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b36:	f000 beb9 	b.w	80068ac <_write_r>

08005b3a <__sseek>:
 8005b3a:	b510      	push	{r4, lr}
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b42:	f002 f8bd 	bl	8007cc0 <_lseek_r>
 8005b46:	1c43      	adds	r3, r0, #1
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	bf15      	itete	ne
 8005b4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b56:	81a3      	strheq	r3, [r4, #12]
 8005b58:	bf18      	it	ne
 8005b5a:	81a3      	strhne	r3, [r4, #12]
 8005b5c:	bd10      	pop	{r4, pc}

08005b5e <__sclose>:
 8005b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b62:	f000 beb5 	b.w	80068d0 <_close_r>

08005b66 <sulp>:
 8005b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6a:	460f      	mov	r7, r1
 8005b6c:	4690      	mov	r8, r2
 8005b6e:	f002 fc5f 	bl	8008430 <__ulp>
 8005b72:	4604      	mov	r4, r0
 8005b74:	460d      	mov	r5, r1
 8005b76:	f1b8 0f00 	cmp.w	r8, #0
 8005b7a:	d011      	beq.n	8005ba0 <sulp+0x3a>
 8005b7c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005b80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	dd0b      	ble.n	8005ba0 <sulp+0x3a>
 8005b88:	2400      	movs	r4, #0
 8005b8a:	051b      	lsls	r3, r3, #20
 8005b8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005b90:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005b94:	4622      	mov	r2, r4
 8005b96:	462b      	mov	r3, r5
 8005b98:	f7fa fc9e 	bl	80004d8 <__aeabi_dmul>
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	460d      	mov	r5, r1
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ba8 <_strtod_l>:
 8005ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bac:	469b      	mov	fp, r3
 8005bae:	2300      	movs	r3, #0
 8005bb0:	b0a1      	sub	sp, #132	; 0x84
 8005bb2:	931c      	str	r3, [sp, #112]	; 0x70
 8005bb4:	4ba1      	ldr	r3, [pc, #644]	; (8005e3c <_strtod_l+0x294>)
 8005bb6:	4682      	mov	sl, r0
 8005bb8:	681f      	ldr	r7, [r3, #0]
 8005bba:	460e      	mov	r6, r1
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	9217      	str	r2, [sp, #92]	; 0x5c
 8005bc0:	f7fa fac6 	bl	8000150 <strlen>
 8005bc4:	f04f 0800 	mov.w	r8, #0
 8005bc8:	4604      	mov	r4, r0
 8005bca:	f04f 0900 	mov.w	r9, #0
 8005bce:	961b      	str	r6, [sp, #108]	; 0x6c
 8005bd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bd2:	781a      	ldrb	r2, [r3, #0]
 8005bd4:	2a2b      	cmp	r2, #43	; 0x2b
 8005bd6:	d04c      	beq.n	8005c72 <_strtod_l+0xca>
 8005bd8:	d83a      	bhi.n	8005c50 <_strtod_l+0xa8>
 8005bda:	2a0d      	cmp	r2, #13
 8005bdc:	d833      	bhi.n	8005c46 <_strtod_l+0x9e>
 8005bde:	2a08      	cmp	r2, #8
 8005be0:	d833      	bhi.n	8005c4a <_strtod_l+0xa2>
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	d03d      	beq.n	8005c62 <_strtod_l+0xba>
 8005be6:	2300      	movs	r3, #0
 8005be8:	930c      	str	r3, [sp, #48]	; 0x30
 8005bea:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005bec:	782b      	ldrb	r3, [r5, #0]
 8005bee:	2b30      	cmp	r3, #48	; 0x30
 8005bf0:	f040 80af 	bne.w	8005d52 <_strtod_l+0x1aa>
 8005bf4:	786b      	ldrb	r3, [r5, #1]
 8005bf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005bfa:	2b58      	cmp	r3, #88	; 0x58
 8005bfc:	d16c      	bne.n	8005cd8 <_strtod_l+0x130>
 8005bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c00:	4650      	mov	r0, sl
 8005c02:	9301      	str	r3, [sp, #4]
 8005c04:	ab1c      	add	r3, sp, #112	; 0x70
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	4a8d      	ldr	r2, [pc, #564]	; (8005e40 <_strtod_l+0x298>)
 8005c0a:	f8cd b008 	str.w	fp, [sp, #8]
 8005c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8005c10:	a91b      	add	r1, sp, #108	; 0x6c
 8005c12:	f001 fd53 	bl	80076bc <__gethex>
 8005c16:	f010 0607 	ands.w	r6, r0, #7
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	d005      	beq.n	8005c2a <_strtod_l+0x82>
 8005c1e:	2e06      	cmp	r6, #6
 8005c20:	d129      	bne.n	8005c76 <_strtod_l+0xce>
 8005c22:	2300      	movs	r3, #0
 8005c24:	3501      	adds	r5, #1
 8005c26:	951b      	str	r5, [sp, #108]	; 0x6c
 8005c28:	930c      	str	r3, [sp, #48]	; 0x30
 8005c2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f040 8596 	bne.w	800675e <_strtod_l+0xbb6>
 8005c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c34:	b1d3      	cbz	r3, 8005c6c <_strtod_l+0xc4>
 8005c36:	4642      	mov	r2, r8
 8005c38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4619      	mov	r1, r3
 8005c40:	b021      	add	sp, #132	; 0x84
 8005c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c46:	2a20      	cmp	r2, #32
 8005c48:	d1cd      	bne.n	8005be6 <_strtod_l+0x3e>
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c4e:	e7bf      	b.n	8005bd0 <_strtod_l+0x28>
 8005c50:	2a2d      	cmp	r2, #45	; 0x2d
 8005c52:	d1c8      	bne.n	8005be6 <_strtod_l+0x3e>
 8005c54:	2201      	movs	r2, #1
 8005c56:	920c      	str	r2, [sp, #48]	; 0x30
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	921b      	str	r2, [sp, #108]	; 0x6c
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1c3      	bne.n	8005bea <_strtod_l+0x42>
 8005c62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c64:	961b      	str	r6, [sp, #108]	; 0x6c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f040 8577 	bne.w	800675a <_strtod_l+0xbb2>
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	464b      	mov	r3, r9
 8005c70:	e7e4      	b.n	8005c3c <_strtod_l+0x94>
 8005c72:	2200      	movs	r2, #0
 8005c74:	e7ef      	b.n	8005c56 <_strtod_l+0xae>
 8005c76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005c78:	b13a      	cbz	r2, 8005c8a <_strtod_l+0xe2>
 8005c7a:	2135      	movs	r1, #53	; 0x35
 8005c7c:	a81e      	add	r0, sp, #120	; 0x78
 8005c7e:	f002 fcdb 	bl	8008638 <__copybits>
 8005c82:	4650      	mov	r0, sl
 8005c84:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c86:	f002 f8a3 	bl	8007dd0 <_Bfree>
 8005c8a:	3e01      	subs	r6, #1
 8005c8c:	2e05      	cmp	r6, #5
 8005c8e:	d807      	bhi.n	8005ca0 <_strtod_l+0xf8>
 8005c90:	e8df f006 	tbb	[pc, r6]
 8005c94:	1d180b0e 	.word	0x1d180b0e
 8005c98:	030e      	.short	0x030e
 8005c9a:	f04f 0900 	mov.w	r9, #0
 8005c9e:	46c8      	mov	r8, r9
 8005ca0:	0721      	lsls	r1, r4, #28
 8005ca2:	d5c2      	bpl.n	8005c2a <_strtod_l+0x82>
 8005ca4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005ca8:	e7bf      	b.n	8005c2a <_strtod_l+0x82>
 8005caa:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8005cae:	e7f7      	b.n	8005ca0 <_strtod_l+0xf8>
 8005cb0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005cb2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8005cb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005cba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005cbe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005cc2:	e7ed      	b.n	8005ca0 <_strtod_l+0xf8>
 8005cc4:	f04f 0800 	mov.w	r8, #0
 8005cc8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005e44 <_strtod_l+0x29c>
 8005ccc:	e7e8      	b.n	8005ca0 <_strtod_l+0xf8>
 8005cce:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005cd2:	f04f 38ff 	mov.w	r8, #4294967295
 8005cd6:	e7e3      	b.n	8005ca0 <_strtod_l+0xf8>
 8005cd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	921b      	str	r2, [sp, #108]	; 0x6c
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	2b30      	cmp	r3, #48	; 0x30
 8005ce2:	d0f9      	beq.n	8005cd8 <_strtod_l+0x130>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0a0      	beq.n	8005c2a <_strtod_l+0x82>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	9307      	str	r3, [sp, #28]
 8005cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cee:	220a      	movs	r2, #10
 8005cf0:	9308      	str	r3, [sp, #32]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	469b      	mov	fp, r3
 8005cf6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005cfa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005cfc:	7805      	ldrb	r5, [r0, #0]
 8005cfe:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005d02:	b2d9      	uxtb	r1, r3
 8005d04:	2909      	cmp	r1, #9
 8005d06:	d926      	bls.n	8005d56 <_strtod_l+0x1ae>
 8005d08:	4622      	mov	r2, r4
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	f003 fa68 	bl	80091e0 <strncmp>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d032      	beq.n	8005d7a <_strtod_l+0x1d2>
 8005d14:	2000      	movs	r0, #0
 8005d16:	462b      	mov	r3, r5
 8005d18:	465c      	mov	r4, fp
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	9004      	str	r0, [sp, #16]
 8005d1e:	2b65      	cmp	r3, #101	; 0x65
 8005d20:	d001      	beq.n	8005d26 <_strtod_l+0x17e>
 8005d22:	2b45      	cmp	r3, #69	; 0x45
 8005d24:	d113      	bne.n	8005d4e <_strtod_l+0x1a6>
 8005d26:	b91c      	cbnz	r4, 8005d30 <_strtod_l+0x188>
 8005d28:	9b07      	ldr	r3, [sp, #28]
 8005d2a:	4303      	orrs	r3, r0
 8005d2c:	d099      	beq.n	8005c62 <_strtod_l+0xba>
 8005d2e:	2400      	movs	r4, #0
 8005d30:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005d32:	1c73      	adds	r3, r6, #1
 8005d34:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d36:	7873      	ldrb	r3, [r6, #1]
 8005d38:	2b2b      	cmp	r3, #43	; 0x2b
 8005d3a:	d078      	beq.n	8005e2e <_strtod_l+0x286>
 8005d3c:	2b2d      	cmp	r3, #45	; 0x2d
 8005d3e:	d07b      	beq.n	8005e38 <_strtod_l+0x290>
 8005d40:	2700      	movs	r7, #0
 8005d42:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005d46:	2909      	cmp	r1, #9
 8005d48:	f240 8082 	bls.w	8005e50 <_strtod_l+0x2a8>
 8005d4c:	961b      	str	r6, [sp, #108]	; 0x6c
 8005d4e:	2500      	movs	r5, #0
 8005d50:	e09e      	b.n	8005e90 <_strtod_l+0x2e8>
 8005d52:	2300      	movs	r3, #0
 8005d54:	e7c9      	b.n	8005cea <_strtod_l+0x142>
 8005d56:	f1bb 0f08 	cmp.w	fp, #8
 8005d5a:	bfd5      	itete	le
 8005d5c:	9906      	ldrle	r1, [sp, #24]
 8005d5e:	9905      	ldrgt	r1, [sp, #20]
 8005d60:	fb02 3301 	mlale	r3, r2, r1, r3
 8005d64:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005d68:	f100 0001 	add.w	r0, r0, #1
 8005d6c:	bfd4      	ite	le
 8005d6e:	9306      	strle	r3, [sp, #24]
 8005d70:	9305      	strgt	r3, [sp, #20]
 8005d72:	f10b 0b01 	add.w	fp, fp, #1
 8005d76:	901b      	str	r0, [sp, #108]	; 0x6c
 8005d78:	e7bf      	b.n	8005cfa <_strtod_l+0x152>
 8005d7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d7c:	191a      	adds	r2, r3, r4
 8005d7e:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d80:	5d1b      	ldrb	r3, [r3, r4]
 8005d82:	f1bb 0f00 	cmp.w	fp, #0
 8005d86:	d036      	beq.n	8005df6 <_strtod_l+0x24e>
 8005d88:	465c      	mov	r4, fp
 8005d8a:	9004      	str	r0, [sp, #16]
 8005d8c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005d90:	2a09      	cmp	r2, #9
 8005d92:	d912      	bls.n	8005dba <_strtod_l+0x212>
 8005d94:	2201      	movs	r2, #1
 8005d96:	e7c2      	b.n	8005d1e <_strtod_l+0x176>
 8005d98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	921b      	str	r2, [sp, #108]	; 0x6c
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	2b30      	cmp	r3, #48	; 0x30
 8005da4:	d0f8      	beq.n	8005d98 <_strtod_l+0x1f0>
 8005da6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005daa:	2a08      	cmp	r2, #8
 8005dac:	f200 84dc 	bhi.w	8006768 <_strtod_l+0xbc0>
 8005db0:	9004      	str	r0, [sp, #16]
 8005db2:	2000      	movs	r0, #0
 8005db4:	4604      	mov	r4, r0
 8005db6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005db8:	9208      	str	r2, [sp, #32]
 8005dba:	3b30      	subs	r3, #48	; 0x30
 8005dbc:	f100 0201 	add.w	r2, r0, #1
 8005dc0:	d013      	beq.n	8005dea <_strtod_l+0x242>
 8005dc2:	9904      	ldr	r1, [sp, #16]
 8005dc4:	1905      	adds	r5, r0, r4
 8005dc6:	4411      	add	r1, r2
 8005dc8:	9104      	str	r1, [sp, #16]
 8005dca:	4622      	mov	r2, r4
 8005dcc:	210a      	movs	r1, #10
 8005dce:	42aa      	cmp	r2, r5
 8005dd0:	d113      	bne.n	8005dfa <_strtod_l+0x252>
 8005dd2:	1822      	adds	r2, r4, r0
 8005dd4:	2a08      	cmp	r2, #8
 8005dd6:	f104 0401 	add.w	r4, r4, #1
 8005dda:	4404      	add	r4, r0
 8005ddc:	dc1b      	bgt.n	8005e16 <_strtod_l+0x26e>
 8005dde:	220a      	movs	r2, #10
 8005de0:	9906      	ldr	r1, [sp, #24]
 8005de2:	fb02 3301 	mla	r3, r2, r1, r3
 8005de6:	9306      	str	r3, [sp, #24]
 8005de8:	2200      	movs	r2, #0
 8005dea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dec:	4610      	mov	r0, r2
 8005dee:	1c59      	adds	r1, r3, #1
 8005df0:	911b      	str	r1, [sp, #108]	; 0x6c
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	e7ca      	b.n	8005d8c <_strtod_l+0x1e4>
 8005df6:	4658      	mov	r0, fp
 8005df8:	e7d3      	b.n	8005da2 <_strtod_l+0x1fa>
 8005dfa:	2a08      	cmp	r2, #8
 8005dfc:	dc04      	bgt.n	8005e08 <_strtod_l+0x260>
 8005dfe:	9f06      	ldr	r7, [sp, #24]
 8005e00:	434f      	muls	r7, r1
 8005e02:	9706      	str	r7, [sp, #24]
 8005e04:	3201      	adds	r2, #1
 8005e06:	e7e2      	b.n	8005dce <_strtod_l+0x226>
 8005e08:	1c57      	adds	r7, r2, #1
 8005e0a:	2f10      	cmp	r7, #16
 8005e0c:	bfde      	ittt	le
 8005e0e:	9f05      	ldrle	r7, [sp, #20]
 8005e10:	434f      	mulle	r7, r1
 8005e12:	9705      	strle	r7, [sp, #20]
 8005e14:	e7f6      	b.n	8005e04 <_strtod_l+0x25c>
 8005e16:	2c10      	cmp	r4, #16
 8005e18:	bfdf      	itttt	le
 8005e1a:	220a      	movle	r2, #10
 8005e1c:	9905      	ldrle	r1, [sp, #20]
 8005e1e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005e22:	9305      	strle	r3, [sp, #20]
 8005e24:	e7e0      	b.n	8005de8 <_strtod_l+0x240>
 8005e26:	2300      	movs	r3, #0
 8005e28:	2201      	movs	r2, #1
 8005e2a:	9304      	str	r3, [sp, #16]
 8005e2c:	e77c      	b.n	8005d28 <_strtod_l+0x180>
 8005e2e:	2700      	movs	r7, #0
 8005e30:	1cb3      	adds	r3, r6, #2
 8005e32:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e34:	78b3      	ldrb	r3, [r6, #2]
 8005e36:	e784      	b.n	8005d42 <_strtod_l+0x19a>
 8005e38:	2701      	movs	r7, #1
 8005e3a:	e7f9      	b.n	8005e30 <_strtod_l+0x288>
 8005e3c:	0800a118 	.word	0x0800a118
 8005e40:	08009ec4 	.word	0x08009ec4
 8005e44:	7ff00000 	.word	0x7ff00000
 8005e48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e4a:	1c59      	adds	r1, r3, #1
 8005e4c:	911b      	str	r1, [sp, #108]	; 0x6c
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	2b30      	cmp	r3, #48	; 0x30
 8005e52:	d0f9      	beq.n	8005e48 <_strtod_l+0x2a0>
 8005e54:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005e58:	2908      	cmp	r1, #8
 8005e5a:	f63f af78 	bhi.w	8005d4e <_strtod_l+0x1a6>
 8005e5e:	f04f 0e0a 	mov.w	lr, #10
 8005e62:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8005e66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e68:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e6c:	1c59      	adds	r1, r3, #1
 8005e6e:	911b      	str	r1, [sp, #108]	; 0x6c
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8005e76:	2d09      	cmp	r5, #9
 8005e78:	d935      	bls.n	8005ee6 <_strtod_l+0x33e>
 8005e7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e7c:	1b49      	subs	r1, r1, r5
 8005e7e:	2908      	cmp	r1, #8
 8005e80:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005e84:	dc02      	bgt.n	8005e8c <_strtod_l+0x2e4>
 8005e86:	4565      	cmp	r5, ip
 8005e88:	bfa8      	it	ge
 8005e8a:	4665      	movge	r5, ip
 8005e8c:	b107      	cbz	r7, 8005e90 <_strtod_l+0x2e8>
 8005e8e:	426d      	negs	r5, r5
 8005e90:	2c00      	cmp	r4, #0
 8005e92:	d14c      	bne.n	8005f2e <_strtod_l+0x386>
 8005e94:	9907      	ldr	r1, [sp, #28]
 8005e96:	4301      	orrs	r1, r0
 8005e98:	f47f aec7 	bne.w	8005c2a <_strtod_l+0x82>
 8005e9c:	2a00      	cmp	r2, #0
 8005e9e:	f47f aee0 	bne.w	8005c62 <_strtod_l+0xba>
 8005ea2:	2b69      	cmp	r3, #105	; 0x69
 8005ea4:	d026      	beq.n	8005ef4 <_strtod_l+0x34c>
 8005ea6:	dc23      	bgt.n	8005ef0 <_strtod_l+0x348>
 8005ea8:	2b49      	cmp	r3, #73	; 0x49
 8005eaa:	d023      	beq.n	8005ef4 <_strtod_l+0x34c>
 8005eac:	2b4e      	cmp	r3, #78	; 0x4e
 8005eae:	f47f aed8 	bne.w	8005c62 <_strtod_l+0xba>
 8005eb2:	499c      	ldr	r1, [pc, #624]	; (8006124 <_strtod_l+0x57c>)
 8005eb4:	a81b      	add	r0, sp, #108	; 0x6c
 8005eb6:	f001 fe4f 	bl	8007b58 <__match>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	f43f aed1 	beq.w	8005c62 <_strtod_l+0xba>
 8005ec0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b28      	cmp	r3, #40	; 0x28
 8005ec6:	d12c      	bne.n	8005f22 <_strtod_l+0x37a>
 8005ec8:	4997      	ldr	r1, [pc, #604]	; (8006128 <_strtod_l+0x580>)
 8005eca:	aa1e      	add	r2, sp, #120	; 0x78
 8005ecc:	a81b      	add	r0, sp, #108	; 0x6c
 8005ece:	f001 fe57 	bl	8007b80 <__hexnan>
 8005ed2:	2805      	cmp	r0, #5
 8005ed4:	d125      	bne.n	8005f22 <_strtod_l+0x37a>
 8005ed6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ed8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8005edc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005ee0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005ee4:	e6a1      	b.n	8005c2a <_strtod_l+0x82>
 8005ee6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8005eea:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005eee:	e7bc      	b.n	8005e6a <_strtod_l+0x2c2>
 8005ef0:	2b6e      	cmp	r3, #110	; 0x6e
 8005ef2:	e7dc      	b.n	8005eae <_strtod_l+0x306>
 8005ef4:	498d      	ldr	r1, [pc, #564]	; (800612c <_strtod_l+0x584>)
 8005ef6:	a81b      	add	r0, sp, #108	; 0x6c
 8005ef8:	f001 fe2e 	bl	8007b58 <__match>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	f43f aeb0 	beq.w	8005c62 <_strtod_l+0xba>
 8005f02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f04:	498a      	ldr	r1, [pc, #552]	; (8006130 <_strtod_l+0x588>)
 8005f06:	3b01      	subs	r3, #1
 8005f08:	a81b      	add	r0, sp, #108	; 0x6c
 8005f0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8005f0c:	f001 fe24 	bl	8007b58 <__match>
 8005f10:	b910      	cbnz	r0, 8005f18 <_strtod_l+0x370>
 8005f12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f14:	3301      	adds	r3, #1
 8005f16:	931b      	str	r3, [sp, #108]	; 0x6c
 8005f18:	f04f 0800 	mov.w	r8, #0
 8005f1c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8006140 <_strtod_l+0x598>
 8005f20:	e683      	b.n	8005c2a <_strtod_l+0x82>
 8005f22:	4884      	ldr	r0, [pc, #528]	; (8006134 <_strtod_l+0x58c>)
 8005f24:	f003 f90c 	bl	8009140 <nan>
 8005f28:	4680      	mov	r8, r0
 8005f2a:	4689      	mov	r9, r1
 8005f2c:	e67d      	b.n	8005c2a <_strtod_l+0x82>
 8005f2e:	9b04      	ldr	r3, [sp, #16]
 8005f30:	f1bb 0f00 	cmp.w	fp, #0
 8005f34:	bf08      	it	eq
 8005f36:	46a3      	moveq	fp, r4
 8005f38:	1aeb      	subs	r3, r5, r3
 8005f3a:	2c10      	cmp	r4, #16
 8005f3c:	9806      	ldr	r0, [sp, #24]
 8005f3e:	4626      	mov	r6, r4
 8005f40:	9307      	str	r3, [sp, #28]
 8005f42:	bfa8      	it	ge
 8005f44:	2610      	movge	r6, #16
 8005f46:	f7fa fa4d 	bl	80003e4 <__aeabi_ui2d>
 8005f4a:	2c09      	cmp	r4, #9
 8005f4c:	4680      	mov	r8, r0
 8005f4e:	4689      	mov	r9, r1
 8005f50:	dd13      	ble.n	8005f7a <_strtod_l+0x3d2>
 8005f52:	4b79      	ldr	r3, [pc, #484]	; (8006138 <_strtod_l+0x590>)
 8005f54:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f58:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005f5c:	f7fa fabc 	bl	80004d8 <__aeabi_dmul>
 8005f60:	4680      	mov	r8, r0
 8005f62:	9805      	ldr	r0, [sp, #20]
 8005f64:	4689      	mov	r9, r1
 8005f66:	f7fa fa3d 	bl	80003e4 <__aeabi_ui2d>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4640      	mov	r0, r8
 8005f70:	4649      	mov	r1, r9
 8005f72:	f7fa f8fb 	bl	800016c <__adddf3>
 8005f76:	4680      	mov	r8, r0
 8005f78:	4689      	mov	r9, r1
 8005f7a:	2c0f      	cmp	r4, #15
 8005f7c:	dc36      	bgt.n	8005fec <_strtod_l+0x444>
 8005f7e:	9b07      	ldr	r3, [sp, #28]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f43f ae52 	beq.w	8005c2a <_strtod_l+0x82>
 8005f86:	dd22      	ble.n	8005fce <_strtod_l+0x426>
 8005f88:	2b16      	cmp	r3, #22
 8005f8a:	dc09      	bgt.n	8005fa0 <_strtod_l+0x3f8>
 8005f8c:	4c6a      	ldr	r4, [pc, #424]	; (8006138 <_strtod_l+0x590>)
 8005f8e:	4642      	mov	r2, r8
 8005f90:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005f94:	464b      	mov	r3, r9
 8005f96:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005f9a:	f7fa fa9d 	bl	80004d8 <__aeabi_dmul>
 8005f9e:	e7c3      	b.n	8005f28 <_strtod_l+0x380>
 8005fa0:	9a07      	ldr	r2, [sp, #28]
 8005fa2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	db20      	blt.n	8005fec <_strtod_l+0x444>
 8005faa:	4d63      	ldr	r5, [pc, #396]	; (8006138 <_strtod_l+0x590>)
 8005fac:	f1c4 040f 	rsb	r4, r4, #15
 8005fb0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fba:	464b      	mov	r3, r9
 8005fbc:	f7fa fa8c 	bl	80004d8 <__aeabi_dmul>
 8005fc0:	9b07      	ldr	r3, [sp, #28]
 8005fc2:	1b1c      	subs	r4, r3, r4
 8005fc4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005fc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fcc:	e7e5      	b.n	8005f9a <_strtod_l+0x3f2>
 8005fce:	9b07      	ldr	r3, [sp, #28]
 8005fd0:	3316      	adds	r3, #22
 8005fd2:	db0b      	blt.n	8005fec <_strtod_l+0x444>
 8005fd4:	9b04      	ldr	r3, [sp, #16]
 8005fd6:	4a58      	ldr	r2, [pc, #352]	; (8006138 <_strtod_l+0x590>)
 8005fd8:	1b5d      	subs	r5, r3, r5
 8005fda:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005fde:	4640      	mov	r0, r8
 8005fe0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	f7fa fba1 	bl	800072c <__aeabi_ddiv>
 8005fea:	e79d      	b.n	8005f28 <_strtod_l+0x380>
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	1ba6      	subs	r6, r4, r6
 8005ff0:	441e      	add	r6, r3
 8005ff2:	2e00      	cmp	r6, #0
 8005ff4:	dd71      	ble.n	80060da <_strtod_l+0x532>
 8005ff6:	f016 030f 	ands.w	r3, r6, #15
 8005ffa:	d00a      	beq.n	8006012 <_strtod_l+0x46a>
 8005ffc:	494e      	ldr	r1, [pc, #312]	; (8006138 <_strtod_l+0x590>)
 8005ffe:	4642      	mov	r2, r8
 8006000:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006008:	464b      	mov	r3, r9
 800600a:	f7fa fa65 	bl	80004d8 <__aeabi_dmul>
 800600e:	4680      	mov	r8, r0
 8006010:	4689      	mov	r9, r1
 8006012:	f036 060f 	bics.w	r6, r6, #15
 8006016:	d050      	beq.n	80060ba <_strtod_l+0x512>
 8006018:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800601c:	dd27      	ble.n	800606e <_strtod_l+0x4c6>
 800601e:	f04f 0b00 	mov.w	fp, #0
 8006022:	f8cd b010 	str.w	fp, [sp, #16]
 8006026:	f8cd b020 	str.w	fp, [sp, #32]
 800602a:	f8cd b018 	str.w	fp, [sp, #24]
 800602e:	2322      	movs	r3, #34	; 0x22
 8006030:	f04f 0800 	mov.w	r8, #0
 8006034:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006140 <_strtod_l+0x598>
 8006038:	f8ca 3000 	str.w	r3, [sl]
 800603c:	9b08      	ldr	r3, [sp, #32]
 800603e:	2b00      	cmp	r3, #0
 8006040:	f43f adf3 	beq.w	8005c2a <_strtod_l+0x82>
 8006044:	4650      	mov	r0, sl
 8006046:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006048:	f001 fec2 	bl	8007dd0 <_Bfree>
 800604c:	4650      	mov	r0, sl
 800604e:	9906      	ldr	r1, [sp, #24]
 8006050:	f001 febe 	bl	8007dd0 <_Bfree>
 8006054:	4650      	mov	r0, sl
 8006056:	9904      	ldr	r1, [sp, #16]
 8006058:	f001 feba 	bl	8007dd0 <_Bfree>
 800605c:	4650      	mov	r0, sl
 800605e:	9908      	ldr	r1, [sp, #32]
 8006060:	f001 feb6 	bl	8007dd0 <_Bfree>
 8006064:	4659      	mov	r1, fp
 8006066:	4650      	mov	r0, sl
 8006068:	f001 feb2 	bl	8007dd0 <_Bfree>
 800606c:	e5dd      	b.n	8005c2a <_strtod_l+0x82>
 800606e:	2300      	movs	r3, #0
 8006070:	4640      	mov	r0, r8
 8006072:	4649      	mov	r1, r9
 8006074:	461f      	mov	r7, r3
 8006076:	1136      	asrs	r6, r6, #4
 8006078:	2e01      	cmp	r6, #1
 800607a:	dc21      	bgt.n	80060c0 <_strtod_l+0x518>
 800607c:	b10b      	cbz	r3, 8006082 <_strtod_l+0x4da>
 800607e:	4680      	mov	r8, r0
 8006080:	4689      	mov	r9, r1
 8006082:	4b2e      	ldr	r3, [pc, #184]	; (800613c <_strtod_l+0x594>)
 8006084:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006088:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800608c:	4642      	mov	r2, r8
 800608e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006092:	464b      	mov	r3, r9
 8006094:	f7fa fa20 	bl	80004d8 <__aeabi_dmul>
 8006098:	4b29      	ldr	r3, [pc, #164]	; (8006140 <_strtod_l+0x598>)
 800609a:	460a      	mov	r2, r1
 800609c:	400b      	ands	r3, r1
 800609e:	4929      	ldr	r1, [pc, #164]	; (8006144 <_strtod_l+0x59c>)
 80060a0:	4680      	mov	r8, r0
 80060a2:	428b      	cmp	r3, r1
 80060a4:	d8bb      	bhi.n	800601e <_strtod_l+0x476>
 80060a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80060aa:	428b      	cmp	r3, r1
 80060ac:	bf86      	itte	hi
 80060ae:	f04f 38ff 	movhi.w	r8, #4294967295
 80060b2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006148 <_strtod_l+0x5a0>
 80060b6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80060ba:	2300      	movs	r3, #0
 80060bc:	9305      	str	r3, [sp, #20]
 80060be:	e07e      	b.n	80061be <_strtod_l+0x616>
 80060c0:	07f2      	lsls	r2, r6, #31
 80060c2:	d507      	bpl.n	80060d4 <_strtod_l+0x52c>
 80060c4:	4b1d      	ldr	r3, [pc, #116]	; (800613c <_strtod_l+0x594>)
 80060c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f7fa fa03 	bl	80004d8 <__aeabi_dmul>
 80060d2:	2301      	movs	r3, #1
 80060d4:	3701      	adds	r7, #1
 80060d6:	1076      	asrs	r6, r6, #1
 80060d8:	e7ce      	b.n	8006078 <_strtod_l+0x4d0>
 80060da:	d0ee      	beq.n	80060ba <_strtod_l+0x512>
 80060dc:	4276      	negs	r6, r6
 80060de:	f016 020f 	ands.w	r2, r6, #15
 80060e2:	d00a      	beq.n	80060fa <_strtod_l+0x552>
 80060e4:	4b14      	ldr	r3, [pc, #80]	; (8006138 <_strtod_l+0x590>)
 80060e6:	4640      	mov	r0, r8
 80060e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060ec:	4649      	mov	r1, r9
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f7fa fb1b 	bl	800072c <__aeabi_ddiv>
 80060f6:	4680      	mov	r8, r0
 80060f8:	4689      	mov	r9, r1
 80060fa:	1136      	asrs	r6, r6, #4
 80060fc:	d0dd      	beq.n	80060ba <_strtod_l+0x512>
 80060fe:	2e1f      	cmp	r6, #31
 8006100:	dd24      	ble.n	800614c <_strtod_l+0x5a4>
 8006102:	f04f 0b00 	mov.w	fp, #0
 8006106:	f8cd b010 	str.w	fp, [sp, #16]
 800610a:	f8cd b020 	str.w	fp, [sp, #32]
 800610e:	f8cd b018 	str.w	fp, [sp, #24]
 8006112:	2322      	movs	r3, #34	; 0x22
 8006114:	f04f 0800 	mov.w	r8, #0
 8006118:	f04f 0900 	mov.w	r9, #0
 800611c:	f8ca 3000 	str.w	r3, [sl]
 8006120:	e78c      	b.n	800603c <_strtod_l+0x494>
 8006122:	bf00      	nop
 8006124:	08009e99 	.word	0x08009e99
 8006128:	08009ed8 	.word	0x08009ed8
 800612c:	08009e91 	.word	0x08009e91
 8006130:	0800a01c 	.word	0x0800a01c
 8006134:	0800a2f3 	.word	0x0800a2f3
 8006138:	0800a1b8 	.word	0x0800a1b8
 800613c:	0800a190 	.word	0x0800a190
 8006140:	7ff00000 	.word	0x7ff00000
 8006144:	7ca00000 	.word	0x7ca00000
 8006148:	7fefffff 	.word	0x7fefffff
 800614c:	f016 0310 	ands.w	r3, r6, #16
 8006150:	bf18      	it	ne
 8006152:	236a      	movne	r3, #106	; 0x6a
 8006154:	4640      	mov	r0, r8
 8006156:	9305      	str	r3, [sp, #20]
 8006158:	4649      	mov	r1, r9
 800615a:	2300      	movs	r3, #0
 800615c:	4fb2      	ldr	r7, [pc, #712]	; (8006428 <_strtod_l+0x880>)
 800615e:	07f2      	lsls	r2, r6, #31
 8006160:	d504      	bpl.n	800616c <_strtod_l+0x5c4>
 8006162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006166:	f7fa f9b7 	bl	80004d8 <__aeabi_dmul>
 800616a:	2301      	movs	r3, #1
 800616c:	1076      	asrs	r6, r6, #1
 800616e:	f107 0708 	add.w	r7, r7, #8
 8006172:	d1f4      	bne.n	800615e <_strtod_l+0x5b6>
 8006174:	b10b      	cbz	r3, 800617a <_strtod_l+0x5d2>
 8006176:	4680      	mov	r8, r0
 8006178:	4689      	mov	r9, r1
 800617a:	9b05      	ldr	r3, [sp, #20]
 800617c:	b1bb      	cbz	r3, 80061ae <_strtod_l+0x606>
 800617e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8006182:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006186:	2b00      	cmp	r3, #0
 8006188:	4649      	mov	r1, r9
 800618a:	dd10      	ble.n	80061ae <_strtod_l+0x606>
 800618c:	2b1f      	cmp	r3, #31
 800618e:	f340 812b 	ble.w	80063e8 <_strtod_l+0x840>
 8006192:	2b34      	cmp	r3, #52	; 0x34
 8006194:	bfd8      	it	le
 8006196:	f04f 32ff 	movle.w	r2, #4294967295
 800619a:	f04f 0800 	mov.w	r8, #0
 800619e:	bfcf      	iteee	gt
 80061a0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80061a4:	3b20      	suble	r3, #32
 80061a6:	fa02 f303 	lslle.w	r3, r2, r3
 80061aa:	ea03 0901 	andle.w	r9, r3, r1
 80061ae:	2200      	movs	r2, #0
 80061b0:	2300      	movs	r3, #0
 80061b2:	4640      	mov	r0, r8
 80061b4:	4649      	mov	r1, r9
 80061b6:	f7fa fbf7 	bl	80009a8 <__aeabi_dcmpeq>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d1a1      	bne.n	8006102 <_strtod_l+0x55a>
 80061be:	9b06      	ldr	r3, [sp, #24]
 80061c0:	465a      	mov	r2, fp
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	4650      	mov	r0, sl
 80061c6:	4623      	mov	r3, r4
 80061c8:	9908      	ldr	r1, [sp, #32]
 80061ca:	f001 fe6d 	bl	8007ea8 <__s2b>
 80061ce:	9008      	str	r0, [sp, #32]
 80061d0:	2800      	cmp	r0, #0
 80061d2:	f43f af24 	beq.w	800601e <_strtod_l+0x476>
 80061d6:	9b04      	ldr	r3, [sp, #16]
 80061d8:	f04f 0b00 	mov.w	fp, #0
 80061dc:	1b5d      	subs	r5, r3, r5
 80061de:	9b07      	ldr	r3, [sp, #28]
 80061e0:	f8cd b010 	str.w	fp, [sp, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	bfb4      	ite	lt
 80061e8:	462b      	movlt	r3, r5
 80061ea:	2300      	movge	r3, #0
 80061ec:	930e      	str	r3, [sp, #56]	; 0x38
 80061ee:	9b07      	ldr	r3, [sp, #28]
 80061f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80061f4:	9316      	str	r3, [sp, #88]	; 0x58
 80061f6:	9b08      	ldr	r3, [sp, #32]
 80061f8:	4650      	mov	r0, sl
 80061fa:	6859      	ldr	r1, [r3, #4]
 80061fc:	f001 fda8 	bl	8007d50 <_Balloc>
 8006200:	9006      	str	r0, [sp, #24]
 8006202:	2800      	cmp	r0, #0
 8006204:	f43f af13 	beq.w	800602e <_strtod_l+0x486>
 8006208:	9b08      	ldr	r3, [sp, #32]
 800620a:	300c      	adds	r0, #12
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	f103 010c 	add.w	r1, r3, #12
 8006212:	3202      	adds	r2, #2
 8006214:	0092      	lsls	r2, r2, #2
 8006216:	f001 fd8d 	bl	8007d34 <memcpy>
 800621a:	ab1e      	add	r3, sp, #120	; 0x78
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	ab1d      	add	r3, sp, #116	; 0x74
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	4642      	mov	r2, r8
 8006224:	464b      	mov	r3, r9
 8006226:	4650      	mov	r0, sl
 8006228:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800622c:	f002 f97a 	bl	8008524 <__d2b>
 8006230:	901c      	str	r0, [sp, #112]	; 0x70
 8006232:	2800      	cmp	r0, #0
 8006234:	f43f aefb 	beq.w	800602e <_strtod_l+0x486>
 8006238:	2101      	movs	r1, #1
 800623a:	4650      	mov	r0, sl
 800623c:	f001 fecc 	bl	8007fd8 <__i2b>
 8006240:	4603      	mov	r3, r0
 8006242:	9004      	str	r0, [sp, #16]
 8006244:	2800      	cmp	r0, #0
 8006246:	f43f aef2 	beq.w	800602e <_strtod_l+0x486>
 800624a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800624c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800624e:	2d00      	cmp	r5, #0
 8006250:	bfab      	itete	ge
 8006252:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006254:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006256:	18ee      	addge	r6, r5, r3
 8006258:	1b5c      	sublt	r4, r3, r5
 800625a:	9b05      	ldr	r3, [sp, #20]
 800625c:	bfa8      	it	ge
 800625e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006260:	eba5 0503 	sub.w	r5, r5, r3
 8006264:	4415      	add	r5, r2
 8006266:	4b71      	ldr	r3, [pc, #452]	; (800642c <_strtod_l+0x884>)
 8006268:	f105 35ff 	add.w	r5, r5, #4294967295
 800626c:	bfb8      	it	lt
 800626e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006270:	429d      	cmp	r5, r3
 8006272:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006276:	f280 80c9 	bge.w	800640c <_strtod_l+0x864>
 800627a:	1b5b      	subs	r3, r3, r5
 800627c:	2b1f      	cmp	r3, #31
 800627e:	f04f 0701 	mov.w	r7, #1
 8006282:	eba2 0203 	sub.w	r2, r2, r3
 8006286:	f300 80b6 	bgt.w	80063f6 <_strtod_l+0x84e>
 800628a:	2500      	movs	r5, #0
 800628c:	fa07 f303 	lsl.w	r3, r7, r3
 8006290:	930f      	str	r3, [sp, #60]	; 0x3c
 8006292:	18b7      	adds	r7, r6, r2
 8006294:	9b05      	ldr	r3, [sp, #20]
 8006296:	42be      	cmp	r6, r7
 8006298:	4414      	add	r4, r2
 800629a:	441c      	add	r4, r3
 800629c:	4633      	mov	r3, r6
 800629e:	bfa8      	it	ge
 80062a0:	463b      	movge	r3, r7
 80062a2:	42a3      	cmp	r3, r4
 80062a4:	bfa8      	it	ge
 80062a6:	4623      	movge	r3, r4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bfc2      	ittt	gt
 80062ac:	1aff      	subgt	r7, r7, r3
 80062ae:	1ae4      	subgt	r4, r4, r3
 80062b0:	1af6      	subgt	r6, r6, r3
 80062b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	dd17      	ble.n	80062e8 <_strtod_l+0x740>
 80062b8:	461a      	mov	r2, r3
 80062ba:	4650      	mov	r0, sl
 80062bc:	9904      	ldr	r1, [sp, #16]
 80062be:	f001 ff45 	bl	800814c <__pow5mult>
 80062c2:	9004      	str	r0, [sp, #16]
 80062c4:	2800      	cmp	r0, #0
 80062c6:	f43f aeb2 	beq.w	800602e <_strtod_l+0x486>
 80062ca:	4601      	mov	r1, r0
 80062cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80062ce:	4650      	mov	r0, sl
 80062d0:	f001 fe98 	bl	8008004 <__multiply>
 80062d4:	9009      	str	r0, [sp, #36]	; 0x24
 80062d6:	2800      	cmp	r0, #0
 80062d8:	f43f aea9 	beq.w	800602e <_strtod_l+0x486>
 80062dc:	4650      	mov	r0, sl
 80062de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80062e0:	f001 fd76 	bl	8007dd0 <_Bfree>
 80062e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e6:	931c      	str	r3, [sp, #112]	; 0x70
 80062e8:	2f00      	cmp	r7, #0
 80062ea:	f300 8093 	bgt.w	8006414 <_strtod_l+0x86c>
 80062ee:	9b07      	ldr	r3, [sp, #28]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	dd08      	ble.n	8006306 <_strtod_l+0x75e>
 80062f4:	4650      	mov	r0, sl
 80062f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80062f8:	9906      	ldr	r1, [sp, #24]
 80062fa:	f001 ff27 	bl	800814c <__pow5mult>
 80062fe:	9006      	str	r0, [sp, #24]
 8006300:	2800      	cmp	r0, #0
 8006302:	f43f ae94 	beq.w	800602e <_strtod_l+0x486>
 8006306:	2c00      	cmp	r4, #0
 8006308:	dd08      	ble.n	800631c <_strtod_l+0x774>
 800630a:	4622      	mov	r2, r4
 800630c:	4650      	mov	r0, sl
 800630e:	9906      	ldr	r1, [sp, #24]
 8006310:	f001 ff76 	bl	8008200 <__lshift>
 8006314:	9006      	str	r0, [sp, #24]
 8006316:	2800      	cmp	r0, #0
 8006318:	f43f ae89 	beq.w	800602e <_strtod_l+0x486>
 800631c:	2e00      	cmp	r6, #0
 800631e:	dd08      	ble.n	8006332 <_strtod_l+0x78a>
 8006320:	4632      	mov	r2, r6
 8006322:	4650      	mov	r0, sl
 8006324:	9904      	ldr	r1, [sp, #16]
 8006326:	f001 ff6b 	bl	8008200 <__lshift>
 800632a:	9004      	str	r0, [sp, #16]
 800632c:	2800      	cmp	r0, #0
 800632e:	f43f ae7e 	beq.w	800602e <_strtod_l+0x486>
 8006332:	4650      	mov	r0, sl
 8006334:	9a06      	ldr	r2, [sp, #24]
 8006336:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006338:	f001 ffea 	bl	8008310 <__mdiff>
 800633c:	4683      	mov	fp, r0
 800633e:	2800      	cmp	r0, #0
 8006340:	f43f ae75 	beq.w	800602e <_strtod_l+0x486>
 8006344:	2400      	movs	r4, #0
 8006346:	68c3      	ldr	r3, [r0, #12]
 8006348:	9904      	ldr	r1, [sp, #16]
 800634a:	60c4      	str	r4, [r0, #12]
 800634c:	930d      	str	r3, [sp, #52]	; 0x34
 800634e:	f001 ffc3 	bl	80082d8 <__mcmp>
 8006352:	42a0      	cmp	r0, r4
 8006354:	da70      	bge.n	8006438 <_strtod_l+0x890>
 8006356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006358:	ea53 0308 	orrs.w	r3, r3, r8
 800635c:	f040 8096 	bne.w	800648c <_strtod_l+0x8e4>
 8006360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006364:	2b00      	cmp	r3, #0
 8006366:	f040 8091 	bne.w	800648c <_strtod_l+0x8e4>
 800636a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800636e:	0d1b      	lsrs	r3, r3, #20
 8006370:	051b      	lsls	r3, r3, #20
 8006372:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006376:	f240 8089 	bls.w	800648c <_strtod_l+0x8e4>
 800637a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800637e:	b923      	cbnz	r3, 800638a <_strtod_l+0x7e2>
 8006380:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006384:	2b01      	cmp	r3, #1
 8006386:	f340 8081 	ble.w	800648c <_strtod_l+0x8e4>
 800638a:	4659      	mov	r1, fp
 800638c:	2201      	movs	r2, #1
 800638e:	4650      	mov	r0, sl
 8006390:	f001 ff36 	bl	8008200 <__lshift>
 8006394:	9904      	ldr	r1, [sp, #16]
 8006396:	4683      	mov	fp, r0
 8006398:	f001 ff9e 	bl	80082d8 <__mcmp>
 800639c:	2800      	cmp	r0, #0
 800639e:	dd75      	ble.n	800648c <_strtod_l+0x8e4>
 80063a0:	9905      	ldr	r1, [sp, #20]
 80063a2:	464b      	mov	r3, r9
 80063a4:	4a22      	ldr	r2, [pc, #136]	; (8006430 <_strtod_l+0x888>)
 80063a6:	2900      	cmp	r1, #0
 80063a8:	f000 8091 	beq.w	80064ce <_strtod_l+0x926>
 80063ac:	ea02 0109 	and.w	r1, r2, r9
 80063b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80063b4:	f300 808b 	bgt.w	80064ce <_strtod_l+0x926>
 80063b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80063bc:	f77f aea9 	ble.w	8006112 <_strtod_l+0x56a>
 80063c0:	2300      	movs	r3, #0
 80063c2:	4a1c      	ldr	r2, [pc, #112]	; (8006434 <_strtod_l+0x88c>)
 80063c4:	4640      	mov	r0, r8
 80063c6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80063ca:	4649      	mov	r1, r9
 80063cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80063d0:	f7fa f882 	bl	80004d8 <__aeabi_dmul>
 80063d4:	460b      	mov	r3, r1
 80063d6:	4303      	orrs	r3, r0
 80063d8:	bf08      	it	eq
 80063da:	2322      	moveq	r3, #34	; 0x22
 80063dc:	4680      	mov	r8, r0
 80063de:	4689      	mov	r9, r1
 80063e0:	bf08      	it	eq
 80063e2:	f8ca 3000 	streq.w	r3, [sl]
 80063e6:	e62d      	b.n	8006044 <_strtod_l+0x49c>
 80063e8:	f04f 32ff 	mov.w	r2, #4294967295
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	ea03 0808 	and.w	r8, r3, r8
 80063f4:	e6db      	b.n	80061ae <_strtod_l+0x606>
 80063f6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80063fa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80063fe:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006402:	35e2      	adds	r5, #226	; 0xe2
 8006404:	fa07 f505 	lsl.w	r5, r7, r5
 8006408:	970f      	str	r7, [sp, #60]	; 0x3c
 800640a:	e742      	b.n	8006292 <_strtod_l+0x6ea>
 800640c:	2301      	movs	r3, #1
 800640e:	2500      	movs	r5, #0
 8006410:	930f      	str	r3, [sp, #60]	; 0x3c
 8006412:	e73e      	b.n	8006292 <_strtod_l+0x6ea>
 8006414:	463a      	mov	r2, r7
 8006416:	4650      	mov	r0, sl
 8006418:	991c      	ldr	r1, [sp, #112]	; 0x70
 800641a:	f001 fef1 	bl	8008200 <__lshift>
 800641e:	901c      	str	r0, [sp, #112]	; 0x70
 8006420:	2800      	cmp	r0, #0
 8006422:	f47f af64 	bne.w	80062ee <_strtod_l+0x746>
 8006426:	e602      	b.n	800602e <_strtod_l+0x486>
 8006428:	08009ef0 	.word	0x08009ef0
 800642c:	fffffc02 	.word	0xfffffc02
 8006430:	7ff00000 	.word	0x7ff00000
 8006434:	39500000 	.word	0x39500000
 8006438:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800643c:	d166      	bne.n	800650c <_strtod_l+0x964>
 800643e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006444:	b35a      	cbz	r2, 800649e <_strtod_l+0x8f6>
 8006446:	4a9c      	ldr	r2, [pc, #624]	; (80066b8 <_strtod_l+0xb10>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d12c      	bne.n	80064a6 <_strtod_l+0x8fe>
 800644c:	9b05      	ldr	r3, [sp, #20]
 800644e:	4640      	mov	r0, r8
 8006450:	b303      	cbz	r3, 8006494 <_strtod_l+0x8ec>
 8006452:	464b      	mov	r3, r9
 8006454:	4a99      	ldr	r2, [pc, #612]	; (80066bc <_strtod_l+0xb14>)
 8006456:	f04f 31ff 	mov.w	r1, #4294967295
 800645a:	401a      	ands	r2, r3
 800645c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006460:	d81b      	bhi.n	800649a <_strtod_l+0x8f2>
 8006462:	0d12      	lsrs	r2, r2, #20
 8006464:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006468:	fa01 f303 	lsl.w	r3, r1, r3
 800646c:	4298      	cmp	r0, r3
 800646e:	d11a      	bne.n	80064a6 <_strtod_l+0x8fe>
 8006470:	4b93      	ldr	r3, [pc, #588]	; (80066c0 <_strtod_l+0xb18>)
 8006472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006474:	429a      	cmp	r2, r3
 8006476:	d102      	bne.n	800647e <_strtod_l+0x8d6>
 8006478:	3001      	adds	r0, #1
 800647a:	f43f add8 	beq.w	800602e <_strtod_l+0x486>
 800647e:	f04f 0800 	mov.w	r8, #0
 8006482:	4b8e      	ldr	r3, [pc, #568]	; (80066bc <_strtod_l+0xb14>)
 8006484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006486:	401a      	ands	r2, r3
 8006488:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800648c:	9b05      	ldr	r3, [sp, #20]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d196      	bne.n	80063c0 <_strtod_l+0x818>
 8006492:	e5d7      	b.n	8006044 <_strtod_l+0x49c>
 8006494:	f04f 33ff 	mov.w	r3, #4294967295
 8006498:	e7e8      	b.n	800646c <_strtod_l+0x8c4>
 800649a:	460b      	mov	r3, r1
 800649c:	e7e6      	b.n	800646c <_strtod_l+0x8c4>
 800649e:	ea53 0308 	orrs.w	r3, r3, r8
 80064a2:	f43f af7d 	beq.w	80063a0 <_strtod_l+0x7f8>
 80064a6:	b1e5      	cbz	r5, 80064e2 <_strtod_l+0x93a>
 80064a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064aa:	421d      	tst	r5, r3
 80064ac:	d0ee      	beq.n	800648c <_strtod_l+0x8e4>
 80064ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064b0:	4640      	mov	r0, r8
 80064b2:	4649      	mov	r1, r9
 80064b4:	9a05      	ldr	r2, [sp, #20]
 80064b6:	b1c3      	cbz	r3, 80064ea <_strtod_l+0x942>
 80064b8:	f7ff fb55 	bl	8005b66 <sulp>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064c4:	f7f9 fe52 	bl	800016c <__adddf3>
 80064c8:	4680      	mov	r8, r0
 80064ca:	4689      	mov	r9, r1
 80064cc:	e7de      	b.n	800648c <_strtod_l+0x8e4>
 80064ce:	4013      	ands	r3, r2
 80064d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80064d4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80064d8:	f04f 38ff 	mov.w	r8, #4294967295
 80064dc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80064e0:	e7d4      	b.n	800648c <_strtod_l+0x8e4>
 80064e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064e4:	ea13 0f08 	tst.w	r3, r8
 80064e8:	e7e0      	b.n	80064ac <_strtod_l+0x904>
 80064ea:	f7ff fb3c 	bl	8005b66 <sulp>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064f6:	f7f9 fe37 	bl	8000168 <__aeabi_dsub>
 80064fa:	2200      	movs	r2, #0
 80064fc:	2300      	movs	r3, #0
 80064fe:	4680      	mov	r8, r0
 8006500:	4689      	mov	r9, r1
 8006502:	f7fa fa51 	bl	80009a8 <__aeabi_dcmpeq>
 8006506:	2800      	cmp	r0, #0
 8006508:	d0c0      	beq.n	800648c <_strtod_l+0x8e4>
 800650a:	e602      	b.n	8006112 <_strtod_l+0x56a>
 800650c:	4658      	mov	r0, fp
 800650e:	9904      	ldr	r1, [sp, #16]
 8006510:	f002 f864 	bl	80085dc <__ratio>
 8006514:	2200      	movs	r2, #0
 8006516:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800651a:	4606      	mov	r6, r0
 800651c:	460f      	mov	r7, r1
 800651e:	f7fa fa57 	bl	80009d0 <__aeabi_dcmple>
 8006522:	2800      	cmp	r0, #0
 8006524:	d075      	beq.n	8006612 <_strtod_l+0xa6a>
 8006526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006528:	2b00      	cmp	r3, #0
 800652a:	d047      	beq.n	80065bc <_strtod_l+0xa14>
 800652c:	2600      	movs	r6, #0
 800652e:	4f65      	ldr	r7, [pc, #404]	; (80066c4 <_strtod_l+0xb1c>)
 8006530:	4d64      	ldr	r5, [pc, #400]	; (80066c4 <_strtod_l+0xb1c>)
 8006532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006538:	0d1b      	lsrs	r3, r3, #20
 800653a:	051b      	lsls	r3, r3, #20
 800653c:	930f      	str	r3, [sp, #60]	; 0x3c
 800653e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006540:	4b61      	ldr	r3, [pc, #388]	; (80066c8 <_strtod_l+0xb20>)
 8006542:	429a      	cmp	r2, r3
 8006544:	f040 80c8 	bne.w	80066d8 <_strtod_l+0xb30>
 8006548:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800654c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006552:	4640      	mov	r0, r8
 8006554:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006558:	4649      	mov	r1, r9
 800655a:	f001 ff69 	bl	8008430 <__ulp>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4630      	mov	r0, r6
 8006564:	4639      	mov	r1, r7
 8006566:	f7f9 ffb7 	bl	80004d8 <__aeabi_dmul>
 800656a:	4642      	mov	r2, r8
 800656c:	464b      	mov	r3, r9
 800656e:	f7f9 fdfd 	bl	800016c <__adddf3>
 8006572:	460b      	mov	r3, r1
 8006574:	4951      	ldr	r1, [pc, #324]	; (80066bc <_strtod_l+0xb14>)
 8006576:	4a55      	ldr	r2, [pc, #340]	; (80066cc <_strtod_l+0xb24>)
 8006578:	4019      	ands	r1, r3
 800657a:	4291      	cmp	r1, r2
 800657c:	4680      	mov	r8, r0
 800657e:	d95e      	bls.n	800663e <_strtod_l+0xa96>
 8006580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006582:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006586:	4293      	cmp	r3, r2
 8006588:	d103      	bne.n	8006592 <_strtod_l+0x9ea>
 800658a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800658c:	3301      	adds	r3, #1
 800658e:	f43f ad4e 	beq.w	800602e <_strtod_l+0x486>
 8006592:	f04f 38ff 	mov.w	r8, #4294967295
 8006596:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80066c0 <_strtod_l+0xb18>
 800659a:	4650      	mov	r0, sl
 800659c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800659e:	f001 fc17 	bl	8007dd0 <_Bfree>
 80065a2:	4650      	mov	r0, sl
 80065a4:	9906      	ldr	r1, [sp, #24]
 80065a6:	f001 fc13 	bl	8007dd0 <_Bfree>
 80065aa:	4650      	mov	r0, sl
 80065ac:	9904      	ldr	r1, [sp, #16]
 80065ae:	f001 fc0f 	bl	8007dd0 <_Bfree>
 80065b2:	4659      	mov	r1, fp
 80065b4:	4650      	mov	r0, sl
 80065b6:	f001 fc0b 	bl	8007dd0 <_Bfree>
 80065ba:	e61c      	b.n	80061f6 <_strtod_l+0x64e>
 80065bc:	f1b8 0f00 	cmp.w	r8, #0
 80065c0:	d119      	bne.n	80065f6 <_strtod_l+0xa4e>
 80065c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c8:	b9e3      	cbnz	r3, 8006604 <_strtod_l+0xa5c>
 80065ca:	2200      	movs	r2, #0
 80065cc:	4630      	mov	r0, r6
 80065ce:	4639      	mov	r1, r7
 80065d0:	4b3c      	ldr	r3, [pc, #240]	; (80066c4 <_strtod_l+0xb1c>)
 80065d2:	f7fa f9f3 	bl	80009bc <__aeabi_dcmplt>
 80065d6:	b9c8      	cbnz	r0, 800660c <_strtod_l+0xa64>
 80065d8:	2200      	movs	r2, #0
 80065da:	4630      	mov	r0, r6
 80065dc:	4639      	mov	r1, r7
 80065de:	4b3c      	ldr	r3, [pc, #240]	; (80066d0 <_strtod_l+0xb28>)
 80065e0:	f7f9 ff7a 	bl	80004d8 <__aeabi_dmul>
 80065e4:	4604      	mov	r4, r0
 80065e6:	460d      	mov	r5, r1
 80065e8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80065ec:	9418      	str	r4, [sp, #96]	; 0x60
 80065ee:	9319      	str	r3, [sp, #100]	; 0x64
 80065f0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80065f4:	e79d      	b.n	8006532 <_strtod_l+0x98a>
 80065f6:	f1b8 0f01 	cmp.w	r8, #1
 80065fa:	d103      	bne.n	8006604 <_strtod_l+0xa5c>
 80065fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f43f ad87 	beq.w	8006112 <_strtod_l+0x56a>
 8006604:	2600      	movs	r6, #0
 8006606:	2400      	movs	r4, #0
 8006608:	4f32      	ldr	r7, [pc, #200]	; (80066d4 <_strtod_l+0xb2c>)
 800660a:	e791      	b.n	8006530 <_strtod_l+0x988>
 800660c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800660e:	4d30      	ldr	r5, [pc, #192]	; (80066d0 <_strtod_l+0xb28>)
 8006610:	e7ea      	b.n	80065e8 <_strtod_l+0xa40>
 8006612:	4b2f      	ldr	r3, [pc, #188]	; (80066d0 <_strtod_l+0xb28>)
 8006614:	2200      	movs	r2, #0
 8006616:	4630      	mov	r0, r6
 8006618:	4639      	mov	r1, r7
 800661a:	f7f9 ff5d 	bl	80004d8 <__aeabi_dmul>
 800661e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006620:	4604      	mov	r4, r0
 8006622:	460d      	mov	r5, r1
 8006624:	b933      	cbnz	r3, 8006634 <_strtod_l+0xa8c>
 8006626:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800662a:	9010      	str	r0, [sp, #64]	; 0x40
 800662c:	9311      	str	r3, [sp, #68]	; 0x44
 800662e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006632:	e77e      	b.n	8006532 <_strtod_l+0x98a>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800663c:	e7f7      	b.n	800662e <_strtod_l+0xa86>
 800663e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006642:	9b05      	ldr	r3, [sp, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1a8      	bne.n	800659a <_strtod_l+0x9f2>
 8006648:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800664c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800664e:	0d1b      	lsrs	r3, r3, #20
 8006650:	051b      	lsls	r3, r3, #20
 8006652:	429a      	cmp	r2, r3
 8006654:	d1a1      	bne.n	800659a <_strtod_l+0x9f2>
 8006656:	4620      	mov	r0, r4
 8006658:	4629      	mov	r1, r5
 800665a:	f7fa fd7f 	bl	800115c <__aeabi_d2lz>
 800665e:	f7f9 ff0d 	bl	800047c <__aeabi_l2d>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f7f9 fd7d 	bl	8000168 <__aeabi_dsub>
 800666e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006674:	ea43 0308 	orr.w	r3, r3, r8
 8006678:	4313      	orrs	r3, r2
 800667a:	4604      	mov	r4, r0
 800667c:	460d      	mov	r5, r1
 800667e:	d066      	beq.n	800674e <_strtod_l+0xba6>
 8006680:	a309      	add	r3, pc, #36	; (adr r3, 80066a8 <_strtod_l+0xb00>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f7fa f999 	bl	80009bc <__aeabi_dcmplt>
 800668a:	2800      	cmp	r0, #0
 800668c:	f47f acda 	bne.w	8006044 <_strtod_l+0x49c>
 8006690:	a307      	add	r3, pc, #28	; (adr r3, 80066b0 <_strtod_l+0xb08>)
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	4620      	mov	r0, r4
 8006698:	4629      	mov	r1, r5
 800669a:	f7fa f9ad 	bl	80009f8 <__aeabi_dcmpgt>
 800669e:	2800      	cmp	r0, #0
 80066a0:	f43f af7b 	beq.w	800659a <_strtod_l+0x9f2>
 80066a4:	e4ce      	b.n	8006044 <_strtod_l+0x49c>
 80066a6:	bf00      	nop
 80066a8:	94a03595 	.word	0x94a03595
 80066ac:	3fdfffff 	.word	0x3fdfffff
 80066b0:	35afe535 	.word	0x35afe535
 80066b4:	3fe00000 	.word	0x3fe00000
 80066b8:	000fffff 	.word	0x000fffff
 80066bc:	7ff00000 	.word	0x7ff00000
 80066c0:	7fefffff 	.word	0x7fefffff
 80066c4:	3ff00000 	.word	0x3ff00000
 80066c8:	7fe00000 	.word	0x7fe00000
 80066cc:	7c9fffff 	.word	0x7c9fffff
 80066d0:	3fe00000 	.word	0x3fe00000
 80066d4:	bff00000 	.word	0xbff00000
 80066d8:	9b05      	ldr	r3, [sp, #20]
 80066da:	b313      	cbz	r3, 8006722 <_strtod_l+0xb7a>
 80066dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80066e2:	d81e      	bhi.n	8006722 <_strtod_l+0xb7a>
 80066e4:	a326      	add	r3, pc, #152	; (adr r3, 8006780 <_strtod_l+0xbd8>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	4620      	mov	r0, r4
 80066ec:	4629      	mov	r1, r5
 80066ee:	f7fa f96f 	bl	80009d0 <__aeabi_dcmple>
 80066f2:	b190      	cbz	r0, 800671a <_strtod_l+0xb72>
 80066f4:	4629      	mov	r1, r5
 80066f6:	4620      	mov	r0, r4
 80066f8:	f7fa f9c6 	bl	8000a88 <__aeabi_d2uiz>
 80066fc:	2801      	cmp	r0, #1
 80066fe:	bf38      	it	cc
 8006700:	2001      	movcc	r0, #1
 8006702:	f7f9 fe6f 	bl	80003e4 <__aeabi_ui2d>
 8006706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006708:	4604      	mov	r4, r0
 800670a:	460d      	mov	r5, r1
 800670c:	b9d3      	cbnz	r3, 8006744 <_strtod_l+0xb9c>
 800670e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006712:	9012      	str	r0, [sp, #72]	; 0x48
 8006714:	9313      	str	r3, [sp, #76]	; 0x4c
 8006716:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800671a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800671c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006720:	1a9f      	subs	r7, r3, r2
 8006722:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006726:	f001 fe83 	bl	8008430 <__ulp>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4630      	mov	r0, r6
 8006730:	4639      	mov	r1, r7
 8006732:	f7f9 fed1 	bl	80004d8 <__aeabi_dmul>
 8006736:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800673a:	f7f9 fd17 	bl	800016c <__adddf3>
 800673e:	4680      	mov	r8, r0
 8006740:	4689      	mov	r9, r1
 8006742:	e77e      	b.n	8006642 <_strtod_l+0xa9a>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800674c:	e7e3      	b.n	8006716 <_strtod_l+0xb6e>
 800674e:	a30e      	add	r3, pc, #56	; (adr r3, 8006788 <_strtod_l+0xbe0>)
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f7fa f932 	bl	80009bc <__aeabi_dcmplt>
 8006758:	e7a1      	b.n	800669e <_strtod_l+0xaf6>
 800675a:	2300      	movs	r3, #0
 800675c:	930c      	str	r3, [sp, #48]	; 0x30
 800675e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006760:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	f7ff ba65 	b.w	8005c32 <_strtod_l+0x8a>
 8006768:	2b65      	cmp	r3, #101	; 0x65
 800676a:	f43f ab5c 	beq.w	8005e26 <_strtod_l+0x27e>
 800676e:	2b45      	cmp	r3, #69	; 0x45
 8006770:	f43f ab59 	beq.w	8005e26 <_strtod_l+0x27e>
 8006774:	2201      	movs	r2, #1
 8006776:	f7ff bb8d 	b.w	8005e94 <_strtod_l+0x2ec>
 800677a:	bf00      	nop
 800677c:	f3af 8000 	nop.w
 8006780:	ffc00000 	.word	0xffc00000
 8006784:	41dfffff 	.word	0x41dfffff
 8006788:	94a03595 	.word	0x94a03595
 800678c:	3fcfffff 	.word	0x3fcfffff

08006790 <_strtod_r>:
 8006790:	4b01      	ldr	r3, [pc, #4]	; (8006798 <_strtod_r+0x8>)
 8006792:	f7ff ba09 	b.w	8005ba8 <_strtod_l>
 8006796:	bf00      	nop
 8006798:	2000007c 	.word	0x2000007c

0800679c <_strtol_l.isra.0>:
 800679c:	2b01      	cmp	r3, #1
 800679e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a2:	4686      	mov	lr, r0
 80067a4:	d001      	beq.n	80067aa <_strtol_l.isra.0+0xe>
 80067a6:	2b24      	cmp	r3, #36	; 0x24
 80067a8:	d906      	bls.n	80067b8 <_strtol_l.isra.0+0x1c>
 80067aa:	f7fe faa5 	bl	8004cf8 <__errno>
 80067ae:	2316      	movs	r3, #22
 80067b0:	6003      	str	r3, [r0, #0]
 80067b2:	2000      	movs	r0, #0
 80067b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b8:	468c      	mov	ip, r1
 80067ba:	4e3a      	ldr	r6, [pc, #232]	; (80068a4 <_strtol_l.isra.0+0x108>)
 80067bc:	4660      	mov	r0, ip
 80067be:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80067c2:	5da5      	ldrb	r5, [r4, r6]
 80067c4:	f015 0508 	ands.w	r5, r5, #8
 80067c8:	d1f8      	bne.n	80067bc <_strtol_l.isra.0+0x20>
 80067ca:	2c2d      	cmp	r4, #45	; 0x2d
 80067cc:	d133      	bne.n	8006836 <_strtol_l.isra.0+0x9a>
 80067ce:	f04f 0801 	mov.w	r8, #1
 80067d2:	f89c 4000 	ldrb.w	r4, [ip]
 80067d6:	f100 0c02 	add.w	ip, r0, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d05d      	beq.n	800689a <_strtol_l.isra.0+0xfe>
 80067de:	2b10      	cmp	r3, #16
 80067e0:	d10c      	bne.n	80067fc <_strtol_l.isra.0+0x60>
 80067e2:	2c30      	cmp	r4, #48	; 0x30
 80067e4:	d10a      	bne.n	80067fc <_strtol_l.isra.0+0x60>
 80067e6:	f89c 0000 	ldrb.w	r0, [ip]
 80067ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80067ee:	2858      	cmp	r0, #88	; 0x58
 80067f0:	d14e      	bne.n	8006890 <_strtol_l.isra.0+0xf4>
 80067f2:	2310      	movs	r3, #16
 80067f4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80067f8:	f10c 0c02 	add.w	ip, ip, #2
 80067fc:	2500      	movs	r5, #0
 80067fe:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8006802:	3f01      	subs	r7, #1
 8006804:	fbb7 f9f3 	udiv	r9, r7, r3
 8006808:	4628      	mov	r0, r5
 800680a:	fb03 7a19 	mls	sl, r3, r9, r7
 800680e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006812:	2e09      	cmp	r6, #9
 8006814:	d818      	bhi.n	8006848 <_strtol_l.isra.0+0xac>
 8006816:	4634      	mov	r4, r6
 8006818:	42a3      	cmp	r3, r4
 800681a:	dd24      	ble.n	8006866 <_strtol_l.isra.0+0xca>
 800681c:	2d00      	cmp	r5, #0
 800681e:	db1f      	blt.n	8006860 <_strtol_l.isra.0+0xc4>
 8006820:	4581      	cmp	r9, r0
 8006822:	d31d      	bcc.n	8006860 <_strtol_l.isra.0+0xc4>
 8006824:	d101      	bne.n	800682a <_strtol_l.isra.0+0x8e>
 8006826:	45a2      	cmp	sl, r4
 8006828:	db1a      	blt.n	8006860 <_strtol_l.isra.0+0xc4>
 800682a:	2501      	movs	r5, #1
 800682c:	fb00 4003 	mla	r0, r0, r3, r4
 8006830:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006834:	e7eb      	b.n	800680e <_strtol_l.isra.0+0x72>
 8006836:	2c2b      	cmp	r4, #43	; 0x2b
 8006838:	bf08      	it	eq
 800683a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800683e:	46a8      	mov	r8, r5
 8006840:	bf08      	it	eq
 8006842:	f100 0c02 	addeq.w	ip, r0, #2
 8006846:	e7c8      	b.n	80067da <_strtol_l.isra.0+0x3e>
 8006848:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800684c:	2e19      	cmp	r6, #25
 800684e:	d801      	bhi.n	8006854 <_strtol_l.isra.0+0xb8>
 8006850:	3c37      	subs	r4, #55	; 0x37
 8006852:	e7e1      	b.n	8006818 <_strtol_l.isra.0+0x7c>
 8006854:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006858:	2e19      	cmp	r6, #25
 800685a:	d804      	bhi.n	8006866 <_strtol_l.isra.0+0xca>
 800685c:	3c57      	subs	r4, #87	; 0x57
 800685e:	e7db      	b.n	8006818 <_strtol_l.isra.0+0x7c>
 8006860:	f04f 35ff 	mov.w	r5, #4294967295
 8006864:	e7e4      	b.n	8006830 <_strtol_l.isra.0+0x94>
 8006866:	2d00      	cmp	r5, #0
 8006868:	da08      	bge.n	800687c <_strtol_l.isra.0+0xe0>
 800686a:	2322      	movs	r3, #34	; 0x22
 800686c:	4638      	mov	r0, r7
 800686e:	f8ce 3000 	str.w	r3, [lr]
 8006872:	2a00      	cmp	r2, #0
 8006874:	d09e      	beq.n	80067b4 <_strtol_l.isra.0+0x18>
 8006876:	f10c 31ff 	add.w	r1, ip, #4294967295
 800687a:	e007      	b.n	800688c <_strtol_l.isra.0+0xf0>
 800687c:	f1b8 0f00 	cmp.w	r8, #0
 8006880:	d000      	beq.n	8006884 <_strtol_l.isra.0+0xe8>
 8006882:	4240      	negs	r0, r0
 8006884:	2a00      	cmp	r2, #0
 8006886:	d095      	beq.n	80067b4 <_strtol_l.isra.0+0x18>
 8006888:	2d00      	cmp	r5, #0
 800688a:	d1f4      	bne.n	8006876 <_strtol_l.isra.0+0xda>
 800688c:	6011      	str	r1, [r2, #0]
 800688e:	e791      	b.n	80067b4 <_strtol_l.isra.0+0x18>
 8006890:	2430      	movs	r4, #48	; 0x30
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1b2      	bne.n	80067fc <_strtol_l.isra.0+0x60>
 8006896:	2308      	movs	r3, #8
 8006898:	e7b0      	b.n	80067fc <_strtol_l.isra.0+0x60>
 800689a:	2c30      	cmp	r4, #48	; 0x30
 800689c:	d0a3      	beq.n	80067e6 <_strtol_l.isra.0+0x4a>
 800689e:	230a      	movs	r3, #10
 80068a0:	e7ac      	b.n	80067fc <_strtol_l.isra.0+0x60>
 80068a2:	bf00      	nop
 80068a4:	08009f19 	.word	0x08009f19

080068a8 <_strtol_r>:
 80068a8:	f7ff bf78 	b.w	800679c <_strtol_l.isra.0>

080068ac <_write_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4604      	mov	r4, r0
 80068b0:	4608      	mov	r0, r1
 80068b2:	4611      	mov	r1, r2
 80068b4:	2200      	movs	r2, #0
 80068b6:	4d05      	ldr	r5, [pc, #20]	; (80068cc <_write_r+0x20>)
 80068b8:	602a      	str	r2, [r5, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f7fb fbda 	bl	8002074 <_write>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d102      	bne.n	80068ca <_write_r+0x1e>
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	b103      	cbz	r3, 80068ca <_write_r+0x1e>
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	200003c8 	.word	0x200003c8

080068d0 <_close_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	2300      	movs	r3, #0
 80068d4:	4d05      	ldr	r5, [pc, #20]	; (80068ec <_close_r+0x1c>)
 80068d6:	4604      	mov	r4, r0
 80068d8:	4608      	mov	r0, r1
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	f7fb fbe6 	bl	80020ac <_close>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d102      	bne.n	80068ea <_close_r+0x1a>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	b103      	cbz	r3, 80068ea <_close_r+0x1a>
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
 80068ec:	200003c8 	.word	0x200003c8

080068f0 <quorem>:
 80068f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f4:	6903      	ldr	r3, [r0, #16]
 80068f6:	690c      	ldr	r4, [r1, #16]
 80068f8:	4607      	mov	r7, r0
 80068fa:	42a3      	cmp	r3, r4
 80068fc:	f2c0 8083 	blt.w	8006a06 <quorem+0x116>
 8006900:	3c01      	subs	r4, #1
 8006902:	f100 0514 	add.w	r5, r0, #20
 8006906:	f101 0814 	add.w	r8, r1, #20
 800690a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006914:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006918:	3301      	adds	r3, #1
 800691a:	429a      	cmp	r2, r3
 800691c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006920:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006924:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006928:	d332      	bcc.n	8006990 <quorem+0xa0>
 800692a:	f04f 0e00 	mov.w	lr, #0
 800692e:	4640      	mov	r0, r8
 8006930:	46ac      	mov	ip, r5
 8006932:	46f2      	mov	sl, lr
 8006934:	f850 2b04 	ldr.w	r2, [r0], #4
 8006938:	b293      	uxth	r3, r2
 800693a:	fb06 e303 	mla	r3, r6, r3, lr
 800693e:	0c12      	lsrs	r2, r2, #16
 8006940:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006944:	fb06 e202 	mla	r2, r6, r2, lr
 8006948:	b29b      	uxth	r3, r3
 800694a:	ebaa 0303 	sub.w	r3, sl, r3
 800694e:	f8dc a000 	ldr.w	sl, [ip]
 8006952:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006956:	fa1f fa8a 	uxth.w	sl, sl
 800695a:	4453      	add	r3, sl
 800695c:	fa1f fa82 	uxth.w	sl, r2
 8006960:	f8dc 2000 	ldr.w	r2, [ip]
 8006964:	4581      	cmp	r9, r0
 8006966:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800696a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800696e:	b29b      	uxth	r3, r3
 8006970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006974:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006978:	f84c 3b04 	str.w	r3, [ip], #4
 800697c:	d2da      	bcs.n	8006934 <quorem+0x44>
 800697e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006982:	b92b      	cbnz	r3, 8006990 <quorem+0xa0>
 8006984:	9b01      	ldr	r3, [sp, #4]
 8006986:	3b04      	subs	r3, #4
 8006988:	429d      	cmp	r5, r3
 800698a:	461a      	mov	r2, r3
 800698c:	d32f      	bcc.n	80069ee <quorem+0xfe>
 800698e:	613c      	str	r4, [r7, #16]
 8006990:	4638      	mov	r0, r7
 8006992:	f001 fca1 	bl	80082d8 <__mcmp>
 8006996:	2800      	cmp	r0, #0
 8006998:	db25      	blt.n	80069e6 <quorem+0xf6>
 800699a:	4628      	mov	r0, r5
 800699c:	f04f 0c00 	mov.w	ip, #0
 80069a0:	3601      	adds	r6, #1
 80069a2:	f858 1b04 	ldr.w	r1, [r8], #4
 80069a6:	f8d0 e000 	ldr.w	lr, [r0]
 80069aa:	b28b      	uxth	r3, r1
 80069ac:	ebac 0303 	sub.w	r3, ip, r3
 80069b0:	fa1f f28e 	uxth.w	r2, lr
 80069b4:	4413      	add	r3, r2
 80069b6:	0c0a      	lsrs	r2, r1, #16
 80069b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069c6:	45c1      	cmp	r9, r8
 80069c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069cc:	f840 3b04 	str.w	r3, [r0], #4
 80069d0:	d2e7      	bcs.n	80069a2 <quorem+0xb2>
 80069d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069da:	b922      	cbnz	r2, 80069e6 <quorem+0xf6>
 80069dc:	3b04      	subs	r3, #4
 80069de:	429d      	cmp	r5, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	d30a      	bcc.n	80069fa <quorem+0x10a>
 80069e4:	613c      	str	r4, [r7, #16]
 80069e6:	4630      	mov	r0, r6
 80069e8:	b003      	add	sp, #12
 80069ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	3b04      	subs	r3, #4
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	d1cb      	bne.n	800698e <quorem+0x9e>
 80069f6:	3c01      	subs	r4, #1
 80069f8:	e7c6      	b.n	8006988 <quorem+0x98>
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	3b04      	subs	r3, #4
 80069fe:	2a00      	cmp	r2, #0
 8006a00:	d1f0      	bne.n	80069e4 <quorem+0xf4>
 8006a02:	3c01      	subs	r4, #1
 8006a04:	e7eb      	b.n	80069de <quorem+0xee>
 8006a06:	2000      	movs	r0, #0
 8006a08:	e7ee      	b.n	80069e8 <quorem+0xf8>
 8006a0a:	0000      	movs	r0, r0
 8006a0c:	0000      	movs	r0, r0
	...

08006a10 <_dtoa_r>:
 8006a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	4616      	mov	r6, r2
 8006a16:	461f      	mov	r7, r3
 8006a18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006a1a:	b099      	sub	sp, #100	; 0x64
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006a22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006a26:	b974      	cbnz	r4, 8006a46 <_dtoa_r+0x36>
 8006a28:	2010      	movs	r0, #16
 8006a2a:	f001 f95b 	bl	8007ce4 <malloc>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	6268      	str	r0, [r5, #36]	; 0x24
 8006a32:	b920      	cbnz	r0, 8006a3e <_dtoa_r+0x2e>
 8006a34:	21ea      	movs	r1, #234	; 0xea
 8006a36:	4bae      	ldr	r3, [pc, #696]	; (8006cf0 <_dtoa_r+0x2e0>)
 8006a38:	48ae      	ldr	r0, [pc, #696]	; (8006cf4 <_dtoa_r+0x2e4>)
 8006a3a:	f002 fca7 	bl	800938c <__assert_func>
 8006a3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a42:	6004      	str	r4, [r0, #0]
 8006a44:	60c4      	str	r4, [r0, #12]
 8006a46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a48:	6819      	ldr	r1, [r3, #0]
 8006a4a:	b151      	cbz	r1, 8006a62 <_dtoa_r+0x52>
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4093      	lsls	r3, r2
 8006a52:	604a      	str	r2, [r1, #4]
 8006a54:	608b      	str	r3, [r1, #8]
 8006a56:	4628      	mov	r0, r5
 8006a58:	f001 f9ba 	bl	8007dd0 <_Bfree>
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	1e3b      	subs	r3, r7, #0
 8006a64:	bfaf      	iteee	ge
 8006a66:	2300      	movge	r3, #0
 8006a68:	2201      	movlt	r2, #1
 8006a6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a6e:	9305      	strlt	r3, [sp, #20]
 8006a70:	bfa8      	it	ge
 8006a72:	f8c8 3000 	strge.w	r3, [r8]
 8006a76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006a7a:	4b9f      	ldr	r3, [pc, #636]	; (8006cf8 <_dtoa_r+0x2e8>)
 8006a7c:	bfb8      	it	lt
 8006a7e:	f8c8 2000 	strlt.w	r2, [r8]
 8006a82:	ea33 0309 	bics.w	r3, r3, r9
 8006a86:	d119      	bne.n	8006abc <_dtoa_r+0xac>
 8006a88:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a94:	4333      	orrs	r3, r6
 8006a96:	f000 8580 	beq.w	800759a <_dtoa_r+0xb8a>
 8006a9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a9c:	b953      	cbnz	r3, 8006ab4 <_dtoa_r+0xa4>
 8006a9e:	4b97      	ldr	r3, [pc, #604]	; (8006cfc <_dtoa_r+0x2ec>)
 8006aa0:	e022      	b.n	8006ae8 <_dtoa_r+0xd8>
 8006aa2:	4b97      	ldr	r3, [pc, #604]	; (8006d00 <_dtoa_r+0x2f0>)
 8006aa4:	9308      	str	r3, [sp, #32]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	9808      	ldr	r0, [sp, #32]
 8006aae:	b019      	add	sp, #100	; 0x64
 8006ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab4:	4b91      	ldr	r3, [pc, #580]	; (8006cfc <_dtoa_r+0x2ec>)
 8006ab6:	9308      	str	r3, [sp, #32]
 8006ab8:	3303      	adds	r3, #3
 8006aba:	e7f5      	b.n	8006aa8 <_dtoa_r+0x98>
 8006abc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ac0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006ac4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2300      	movs	r3, #0
 8006acc:	f7f9 ff6c 	bl	80009a8 <__aeabi_dcmpeq>
 8006ad0:	4680      	mov	r8, r0
 8006ad2:	b158      	cbz	r0, 8006aec <_dtoa_r+0xdc>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 8559 	beq.w	8007594 <_dtoa_r+0xb84>
 8006ae2:	4888      	ldr	r0, [pc, #544]	; (8006d04 <_dtoa_r+0x2f4>)
 8006ae4:	6018      	str	r0, [r3, #0]
 8006ae6:	1e43      	subs	r3, r0, #1
 8006ae8:	9308      	str	r3, [sp, #32]
 8006aea:	e7df      	b.n	8006aac <_dtoa_r+0x9c>
 8006aec:	ab16      	add	r3, sp, #88	; 0x58
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	ab17      	add	r3, sp, #92	; 0x5c
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	4628      	mov	r0, r5
 8006af6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006afa:	f001 fd13 	bl	8008524 <__d2b>
 8006afe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006b02:	4682      	mov	sl, r0
 8006b04:	2c00      	cmp	r4, #0
 8006b06:	d07e      	beq.n	8006c06 <_dtoa_r+0x1f6>
 8006b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b0e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006b12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b16:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006b1a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006b1e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006b22:	2200      	movs	r2, #0
 8006b24:	4b78      	ldr	r3, [pc, #480]	; (8006d08 <_dtoa_r+0x2f8>)
 8006b26:	f7f9 fb1f 	bl	8000168 <__aeabi_dsub>
 8006b2a:	a36b      	add	r3, pc, #428	; (adr r3, 8006cd8 <_dtoa_r+0x2c8>)
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	f7f9 fcd2 	bl	80004d8 <__aeabi_dmul>
 8006b34:	a36a      	add	r3, pc, #424	; (adr r3, 8006ce0 <_dtoa_r+0x2d0>)
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	f7f9 fb17 	bl	800016c <__adddf3>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	4620      	mov	r0, r4
 8006b42:	460f      	mov	r7, r1
 8006b44:	f7f9 fc5e 	bl	8000404 <__aeabi_i2d>
 8006b48:	a367      	add	r3, pc, #412	; (adr r3, 8006ce8 <_dtoa_r+0x2d8>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	f7f9 fcc3 	bl	80004d8 <__aeabi_dmul>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4630      	mov	r0, r6
 8006b58:	4639      	mov	r1, r7
 8006b5a:	f7f9 fb07 	bl	800016c <__adddf3>
 8006b5e:	4606      	mov	r6, r0
 8006b60:	460f      	mov	r7, r1
 8006b62:	f7f9 ff69 	bl	8000a38 <__aeabi_d2iz>
 8006b66:	2200      	movs	r2, #0
 8006b68:	4681      	mov	r9, r0
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7f9 ff24 	bl	80009bc <__aeabi_dcmplt>
 8006b74:	b148      	cbz	r0, 8006b8a <_dtoa_r+0x17a>
 8006b76:	4648      	mov	r0, r9
 8006b78:	f7f9 fc44 	bl	8000404 <__aeabi_i2d>
 8006b7c:	4632      	mov	r2, r6
 8006b7e:	463b      	mov	r3, r7
 8006b80:	f7f9 ff12 	bl	80009a8 <__aeabi_dcmpeq>
 8006b84:	b908      	cbnz	r0, 8006b8a <_dtoa_r+0x17a>
 8006b86:	f109 39ff 	add.w	r9, r9, #4294967295
 8006b8a:	f1b9 0f16 	cmp.w	r9, #22
 8006b8e:	d857      	bhi.n	8006c40 <_dtoa_r+0x230>
 8006b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b94:	4b5d      	ldr	r3, [pc, #372]	; (8006d0c <_dtoa_r+0x2fc>)
 8006b96:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	f7f9 ff0d 	bl	80009bc <__aeabi_dcmplt>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d04e      	beq.n	8006c44 <_dtoa_r+0x234>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f109 39ff 	add.w	r9, r9, #4294967295
 8006bac:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006bb0:	1b1c      	subs	r4, r3, r4
 8006bb2:	1e63      	subs	r3, r4, #1
 8006bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb6:	bf49      	itett	mi
 8006bb8:	f1c4 0301 	rsbmi	r3, r4, #1
 8006bbc:	2300      	movpl	r3, #0
 8006bbe:	9306      	strmi	r3, [sp, #24]
 8006bc0:	2300      	movmi	r3, #0
 8006bc2:	bf54      	ite	pl
 8006bc4:	9306      	strpl	r3, [sp, #24]
 8006bc6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006bc8:	f1b9 0f00 	cmp.w	r9, #0
 8006bcc:	db3c      	blt.n	8006c48 <_dtoa_r+0x238>
 8006bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bd0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006bd4:	444b      	add	r3, r9
 8006bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd8:	2300      	movs	r3, #0
 8006bda:	930a      	str	r3, [sp, #40]	; 0x28
 8006bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bde:	2b09      	cmp	r3, #9
 8006be0:	d86c      	bhi.n	8006cbc <_dtoa_r+0x2ac>
 8006be2:	2b05      	cmp	r3, #5
 8006be4:	bfc4      	itt	gt
 8006be6:	3b04      	subgt	r3, #4
 8006be8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006bea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bec:	bfc8      	it	gt
 8006bee:	2400      	movgt	r4, #0
 8006bf0:	f1a3 0302 	sub.w	r3, r3, #2
 8006bf4:	bfd8      	it	le
 8006bf6:	2401      	movle	r4, #1
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	f200 808b 	bhi.w	8006d14 <_dtoa_r+0x304>
 8006bfe:	e8df f003 	tbb	[pc, r3]
 8006c02:	4f2d      	.short	0x4f2d
 8006c04:	5b4d      	.short	0x5b4d
 8006c06:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006c0a:	441c      	add	r4, r3
 8006c0c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	bfc3      	ittte	gt
 8006c14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c18:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006c1c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006c20:	f1c3 0320 	rsble	r3, r3, #32
 8006c24:	bfc6      	itte	gt
 8006c26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c2a:	4318      	orrgt	r0, r3
 8006c2c:	fa06 f003 	lslle.w	r0, r6, r3
 8006c30:	f7f9 fbd8 	bl	80003e4 <__aeabi_ui2d>
 8006c34:	2301      	movs	r3, #1
 8006c36:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006c3a:	3c01      	subs	r4, #1
 8006c3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c3e:	e770      	b.n	8006b22 <_dtoa_r+0x112>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e7b3      	b.n	8006bac <_dtoa_r+0x19c>
 8006c44:	900f      	str	r0, [sp, #60]	; 0x3c
 8006c46:	e7b2      	b.n	8006bae <_dtoa_r+0x19e>
 8006c48:	9b06      	ldr	r3, [sp, #24]
 8006c4a:	eba3 0309 	sub.w	r3, r3, r9
 8006c4e:	9306      	str	r3, [sp, #24]
 8006c50:	f1c9 0300 	rsb	r3, r9, #0
 8006c54:	930a      	str	r3, [sp, #40]	; 0x28
 8006c56:	2300      	movs	r3, #0
 8006c58:	930e      	str	r3, [sp, #56]	; 0x38
 8006c5a:	e7bf      	b.n	8006bdc <_dtoa_r+0x1cc>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	dc59      	bgt.n	8006d1a <_dtoa_r+0x30a>
 8006c66:	f04f 0b01 	mov.w	fp, #1
 8006c6a:	465b      	mov	r3, fp
 8006c6c:	f8cd b008 	str.w	fp, [sp, #8]
 8006c70:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006c74:	2200      	movs	r2, #0
 8006c76:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006c78:	6042      	str	r2, [r0, #4]
 8006c7a:	2204      	movs	r2, #4
 8006c7c:	f102 0614 	add.w	r6, r2, #20
 8006c80:	429e      	cmp	r6, r3
 8006c82:	6841      	ldr	r1, [r0, #4]
 8006c84:	d94f      	bls.n	8006d26 <_dtoa_r+0x316>
 8006c86:	4628      	mov	r0, r5
 8006c88:	f001 f862 	bl	8007d50 <_Balloc>
 8006c8c:	9008      	str	r0, [sp, #32]
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d14d      	bne.n	8006d2e <_dtoa_r+0x31e>
 8006c92:	4602      	mov	r2, r0
 8006c94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006c98:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <_dtoa_r+0x300>)
 8006c9a:	e6cd      	b.n	8006a38 <_dtoa_r+0x28>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e7de      	b.n	8006c5e <_dtoa_r+0x24e>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ca4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ca6:	eb09 0b03 	add.w	fp, r9, r3
 8006caa:	f10b 0301 	add.w	r3, fp, #1
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	9302      	str	r3, [sp, #8]
 8006cb2:	bfb8      	it	lt
 8006cb4:	2301      	movlt	r3, #1
 8006cb6:	e7dd      	b.n	8006c74 <_dtoa_r+0x264>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e7f2      	b.n	8006ca2 <_dtoa_r+0x292>
 8006cbc:	2401      	movs	r4, #1
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006cc2:	9322      	str	r3, [sp, #136]	; 0x88
 8006cc4:	f04f 3bff 	mov.w	fp, #4294967295
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2312      	movs	r3, #18
 8006ccc:	f8cd b008 	str.w	fp, [sp, #8]
 8006cd0:	9223      	str	r2, [sp, #140]	; 0x8c
 8006cd2:	e7cf      	b.n	8006c74 <_dtoa_r+0x264>
 8006cd4:	f3af 8000 	nop.w
 8006cd8:	636f4361 	.word	0x636f4361
 8006cdc:	3fd287a7 	.word	0x3fd287a7
 8006ce0:	8b60c8b3 	.word	0x8b60c8b3
 8006ce4:	3fc68a28 	.word	0x3fc68a28
 8006ce8:	509f79fb 	.word	0x509f79fb
 8006cec:	3fd34413 	.word	0x3fd34413
 8006cf0:	0800a026 	.word	0x0800a026
 8006cf4:	0800a03d 	.word	0x0800a03d
 8006cf8:	7ff00000 	.word	0x7ff00000
 8006cfc:	0800a022 	.word	0x0800a022
 8006d00:	0800a019 	.word	0x0800a019
 8006d04:	0800a2a2 	.word	0x0800a2a2
 8006d08:	3ff80000 	.word	0x3ff80000
 8006d0c:	0800a1b8 	.word	0x0800a1b8
 8006d10:	0800a09c 	.word	0x0800a09c
 8006d14:	2301      	movs	r3, #1
 8006d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d18:	e7d4      	b.n	8006cc4 <_dtoa_r+0x2b4>
 8006d1a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006d1e:	465b      	mov	r3, fp
 8006d20:	f8cd b008 	str.w	fp, [sp, #8]
 8006d24:	e7a6      	b.n	8006c74 <_dtoa_r+0x264>
 8006d26:	3101      	adds	r1, #1
 8006d28:	6041      	str	r1, [r0, #4]
 8006d2a:	0052      	lsls	r2, r2, #1
 8006d2c:	e7a6      	b.n	8006c7c <_dtoa_r+0x26c>
 8006d2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d30:	9a08      	ldr	r2, [sp, #32]
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	9b02      	ldr	r3, [sp, #8]
 8006d36:	2b0e      	cmp	r3, #14
 8006d38:	f200 80a8 	bhi.w	8006e8c <_dtoa_r+0x47c>
 8006d3c:	2c00      	cmp	r4, #0
 8006d3e:	f000 80a5 	beq.w	8006e8c <_dtoa_r+0x47c>
 8006d42:	f1b9 0f00 	cmp.w	r9, #0
 8006d46:	dd34      	ble.n	8006db2 <_dtoa_r+0x3a2>
 8006d48:	4a9a      	ldr	r2, [pc, #616]	; (8006fb4 <_dtoa_r+0x5a4>)
 8006d4a:	f009 030f 	and.w	r3, r9, #15
 8006d4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d52:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006d56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006d5e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006d62:	d016      	beq.n	8006d92 <_dtoa_r+0x382>
 8006d64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d68:	4b93      	ldr	r3, [pc, #588]	; (8006fb8 <_dtoa_r+0x5a8>)
 8006d6a:	2703      	movs	r7, #3
 8006d6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d70:	f7f9 fcdc 	bl	800072c <__aeabi_ddiv>
 8006d74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d78:	f004 040f 	and.w	r4, r4, #15
 8006d7c:	4e8e      	ldr	r6, [pc, #568]	; (8006fb8 <_dtoa_r+0x5a8>)
 8006d7e:	b954      	cbnz	r4, 8006d96 <_dtoa_r+0x386>
 8006d80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d88:	f7f9 fcd0 	bl	800072c <__aeabi_ddiv>
 8006d8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d90:	e029      	b.n	8006de6 <_dtoa_r+0x3d6>
 8006d92:	2702      	movs	r7, #2
 8006d94:	e7f2      	b.n	8006d7c <_dtoa_r+0x36c>
 8006d96:	07e1      	lsls	r1, r4, #31
 8006d98:	d508      	bpl.n	8006dac <_dtoa_r+0x39c>
 8006d9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006da2:	f7f9 fb99 	bl	80004d8 <__aeabi_dmul>
 8006da6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006daa:	3701      	adds	r7, #1
 8006dac:	1064      	asrs	r4, r4, #1
 8006dae:	3608      	adds	r6, #8
 8006db0:	e7e5      	b.n	8006d7e <_dtoa_r+0x36e>
 8006db2:	f000 80a5 	beq.w	8006f00 <_dtoa_r+0x4f0>
 8006db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dba:	f1c9 0400 	rsb	r4, r9, #0
 8006dbe:	4b7d      	ldr	r3, [pc, #500]	; (8006fb4 <_dtoa_r+0x5a4>)
 8006dc0:	f004 020f 	and.w	r2, r4, #15
 8006dc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	f7f9 fb84 	bl	80004d8 <__aeabi_dmul>
 8006dd0:	2702      	movs	r7, #2
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dd8:	4e77      	ldr	r6, [pc, #476]	; (8006fb8 <_dtoa_r+0x5a8>)
 8006dda:	1124      	asrs	r4, r4, #4
 8006ddc:	2c00      	cmp	r4, #0
 8006dde:	f040 8084 	bne.w	8006eea <_dtoa_r+0x4da>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1d2      	bne.n	8006d8c <_dtoa_r+0x37c>
 8006de6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 808b 	beq.w	8006f04 <_dtoa_r+0x4f4>
 8006dee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006df2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006df6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4b6f      	ldr	r3, [pc, #444]	; (8006fbc <_dtoa_r+0x5ac>)
 8006dfe:	f7f9 fddd 	bl	80009bc <__aeabi_dcmplt>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d07e      	beq.n	8006f04 <_dtoa_r+0x4f4>
 8006e06:	9b02      	ldr	r3, [sp, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d07b      	beq.n	8006f04 <_dtoa_r+0x4f4>
 8006e0c:	f1bb 0f00 	cmp.w	fp, #0
 8006e10:	dd38      	ble.n	8006e84 <_dtoa_r+0x474>
 8006e12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e16:	2200      	movs	r2, #0
 8006e18:	4b69      	ldr	r3, [pc, #420]	; (8006fc0 <_dtoa_r+0x5b0>)
 8006e1a:	f7f9 fb5d 	bl	80004d8 <__aeabi_dmul>
 8006e1e:	465c      	mov	r4, fp
 8006e20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e24:	f109 38ff 	add.w	r8, r9, #4294967295
 8006e28:	3701      	adds	r7, #1
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	f7f9 faea 	bl	8000404 <__aeabi_i2d>
 8006e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e34:	f7f9 fb50 	bl	80004d8 <__aeabi_dmul>
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4b62      	ldr	r3, [pc, #392]	; (8006fc4 <_dtoa_r+0x5b4>)
 8006e3c:	f7f9 f996 	bl	800016c <__adddf3>
 8006e40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006e44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e48:	9611      	str	r6, [sp, #68]	; 0x44
 8006e4a:	2c00      	cmp	r4, #0
 8006e4c:	d15d      	bne.n	8006f0a <_dtoa_r+0x4fa>
 8006e4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e52:	2200      	movs	r2, #0
 8006e54:	4b5c      	ldr	r3, [pc, #368]	; (8006fc8 <_dtoa_r+0x5b8>)
 8006e56:	f7f9 f987 	bl	8000168 <__aeabi_dsub>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e62:	4633      	mov	r3, r6
 8006e64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e66:	f7f9 fdc7 	bl	80009f8 <__aeabi_dcmpgt>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	f040 829e 	bne.w	80073ac <_dtoa_r+0x99c>
 8006e70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e76:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006e7a:	f7f9 fd9f 	bl	80009bc <__aeabi_dcmplt>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	f040 8292 	bne.w	80073a8 <_dtoa_r+0x998>
 8006e84:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006e88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f2c0 8153 	blt.w	800713a <_dtoa_r+0x72a>
 8006e94:	f1b9 0f0e 	cmp.w	r9, #14
 8006e98:	f300 814f 	bgt.w	800713a <_dtoa_r+0x72a>
 8006e9c:	4b45      	ldr	r3, [pc, #276]	; (8006fb4 <_dtoa_r+0x5a4>)
 8006e9e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006ea2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ea6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006eaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f280 80db 	bge.w	8007068 <_dtoa_r+0x658>
 8006eb2:	9b02      	ldr	r3, [sp, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f300 80d7 	bgt.w	8007068 <_dtoa_r+0x658>
 8006eba:	f040 8274 	bne.w	80073a6 <_dtoa_r+0x996>
 8006ebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	4b40      	ldr	r3, [pc, #256]	; (8006fc8 <_dtoa_r+0x5b8>)
 8006ec6:	f7f9 fb07 	bl	80004d8 <__aeabi_dmul>
 8006eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ece:	f7f9 fd89 	bl	80009e4 <__aeabi_dcmpge>
 8006ed2:	9c02      	ldr	r4, [sp, #8]
 8006ed4:	4626      	mov	r6, r4
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f040 824a 	bne.w	8007370 <_dtoa_r+0x960>
 8006edc:	2331      	movs	r3, #49	; 0x31
 8006ede:	9f08      	ldr	r7, [sp, #32]
 8006ee0:	f109 0901 	add.w	r9, r9, #1
 8006ee4:	f807 3b01 	strb.w	r3, [r7], #1
 8006ee8:	e246      	b.n	8007378 <_dtoa_r+0x968>
 8006eea:	07e2      	lsls	r2, r4, #31
 8006eec:	d505      	bpl.n	8006efa <_dtoa_r+0x4ea>
 8006eee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ef2:	f7f9 faf1 	bl	80004d8 <__aeabi_dmul>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	3701      	adds	r7, #1
 8006efa:	1064      	asrs	r4, r4, #1
 8006efc:	3608      	adds	r6, #8
 8006efe:	e76d      	b.n	8006ddc <_dtoa_r+0x3cc>
 8006f00:	2702      	movs	r7, #2
 8006f02:	e770      	b.n	8006de6 <_dtoa_r+0x3d6>
 8006f04:	46c8      	mov	r8, r9
 8006f06:	9c02      	ldr	r4, [sp, #8]
 8006f08:	e78f      	b.n	8006e2a <_dtoa_r+0x41a>
 8006f0a:	9908      	ldr	r1, [sp, #32]
 8006f0c:	4b29      	ldr	r3, [pc, #164]	; (8006fb4 <_dtoa_r+0x5a4>)
 8006f0e:	4421      	add	r1, r4
 8006f10:	9112      	str	r1, [sp, #72]	; 0x48
 8006f12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f18:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006f1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f20:	2900      	cmp	r1, #0
 8006f22:	d055      	beq.n	8006fd0 <_dtoa_r+0x5c0>
 8006f24:	2000      	movs	r0, #0
 8006f26:	4929      	ldr	r1, [pc, #164]	; (8006fcc <_dtoa_r+0x5bc>)
 8006f28:	f7f9 fc00 	bl	800072c <__aeabi_ddiv>
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	4632      	mov	r2, r6
 8006f30:	f7f9 f91a 	bl	8000168 <__aeabi_dsub>
 8006f34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f38:	9f08      	ldr	r7, [sp, #32]
 8006f3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f3e:	f7f9 fd7b 	bl	8000a38 <__aeabi_d2iz>
 8006f42:	4604      	mov	r4, r0
 8006f44:	f7f9 fa5e 	bl	8000404 <__aeabi_i2d>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f50:	f7f9 f90a 	bl	8000168 <__aeabi_dsub>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	3430      	adds	r4, #48	; 0x30
 8006f5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f62:	f807 4b01 	strb.w	r4, [r7], #1
 8006f66:	f7f9 fd29 	bl	80009bc <__aeabi_dcmplt>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d174      	bne.n	8007058 <_dtoa_r+0x648>
 8006f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f72:	2000      	movs	r0, #0
 8006f74:	4911      	ldr	r1, [pc, #68]	; (8006fbc <_dtoa_r+0x5ac>)
 8006f76:	f7f9 f8f7 	bl	8000168 <__aeabi_dsub>
 8006f7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f7e:	f7f9 fd1d 	bl	80009bc <__aeabi_dcmplt>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f040 80b6 	bne.w	80070f4 <_dtoa_r+0x6e4>
 8006f88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f8a:	429f      	cmp	r7, r3
 8006f8c:	f43f af7a 	beq.w	8006e84 <_dtoa_r+0x474>
 8006f90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f94:	2200      	movs	r2, #0
 8006f96:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <_dtoa_r+0x5b0>)
 8006f98:	f7f9 fa9e 	bl	80004d8 <__aeabi_dmul>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fa6:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <_dtoa_r+0x5b0>)
 8006fa8:	f7f9 fa96 	bl	80004d8 <__aeabi_dmul>
 8006fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fb0:	e7c3      	b.n	8006f3a <_dtoa_r+0x52a>
 8006fb2:	bf00      	nop
 8006fb4:	0800a1b8 	.word	0x0800a1b8
 8006fb8:	0800a190 	.word	0x0800a190
 8006fbc:	3ff00000 	.word	0x3ff00000
 8006fc0:	40240000 	.word	0x40240000
 8006fc4:	401c0000 	.word	0x401c0000
 8006fc8:	40140000 	.word	0x40140000
 8006fcc:	3fe00000 	.word	0x3fe00000
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	f7f9 fa80 	bl	80004d8 <__aeabi_dmul>
 8006fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fda:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fde:	9c08      	ldr	r4, [sp, #32]
 8006fe0:	9314      	str	r3, [sp, #80]	; 0x50
 8006fe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fe6:	f7f9 fd27 	bl	8000a38 <__aeabi_d2iz>
 8006fea:	9015      	str	r0, [sp, #84]	; 0x54
 8006fec:	f7f9 fa0a 	bl	8000404 <__aeabi_i2d>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ff8:	f7f9 f8b6 	bl	8000168 <__aeabi_dsub>
 8006ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ffe:	4606      	mov	r6, r0
 8007000:	3330      	adds	r3, #48	; 0x30
 8007002:	f804 3b01 	strb.w	r3, [r4], #1
 8007006:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007008:	460f      	mov	r7, r1
 800700a:	429c      	cmp	r4, r3
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	d124      	bne.n	800705c <_dtoa_r+0x64c>
 8007012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007016:	4bb3      	ldr	r3, [pc, #716]	; (80072e4 <_dtoa_r+0x8d4>)
 8007018:	f7f9 f8a8 	bl	800016c <__adddf3>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4630      	mov	r0, r6
 8007022:	4639      	mov	r1, r7
 8007024:	f7f9 fce8 	bl	80009f8 <__aeabi_dcmpgt>
 8007028:	2800      	cmp	r0, #0
 800702a:	d162      	bne.n	80070f2 <_dtoa_r+0x6e2>
 800702c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007030:	2000      	movs	r0, #0
 8007032:	49ac      	ldr	r1, [pc, #688]	; (80072e4 <_dtoa_r+0x8d4>)
 8007034:	f7f9 f898 	bl	8000168 <__aeabi_dsub>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4630      	mov	r0, r6
 800703e:	4639      	mov	r1, r7
 8007040:	f7f9 fcbc 	bl	80009bc <__aeabi_dcmplt>
 8007044:	2800      	cmp	r0, #0
 8007046:	f43f af1d 	beq.w	8006e84 <_dtoa_r+0x474>
 800704a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800704c:	1e7b      	subs	r3, r7, #1
 800704e:	9314      	str	r3, [sp, #80]	; 0x50
 8007050:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007054:	2b30      	cmp	r3, #48	; 0x30
 8007056:	d0f8      	beq.n	800704a <_dtoa_r+0x63a>
 8007058:	46c1      	mov	r9, r8
 800705a:	e03a      	b.n	80070d2 <_dtoa_r+0x6c2>
 800705c:	4ba2      	ldr	r3, [pc, #648]	; (80072e8 <_dtoa_r+0x8d8>)
 800705e:	f7f9 fa3b 	bl	80004d8 <__aeabi_dmul>
 8007062:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007066:	e7bc      	b.n	8006fe2 <_dtoa_r+0x5d2>
 8007068:	9f08      	ldr	r7, [sp, #32]
 800706a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800706e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007072:	f7f9 fb5b 	bl	800072c <__aeabi_ddiv>
 8007076:	f7f9 fcdf 	bl	8000a38 <__aeabi_d2iz>
 800707a:	4604      	mov	r4, r0
 800707c:	f7f9 f9c2 	bl	8000404 <__aeabi_i2d>
 8007080:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007084:	f7f9 fa28 	bl	80004d8 <__aeabi_dmul>
 8007088:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800708c:	460b      	mov	r3, r1
 800708e:	4602      	mov	r2, r0
 8007090:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007094:	f7f9 f868 	bl	8000168 <__aeabi_dsub>
 8007098:	f807 6b01 	strb.w	r6, [r7], #1
 800709c:	9e08      	ldr	r6, [sp, #32]
 800709e:	9b02      	ldr	r3, [sp, #8]
 80070a0:	1bbe      	subs	r6, r7, r6
 80070a2:	42b3      	cmp	r3, r6
 80070a4:	d13a      	bne.n	800711c <_dtoa_r+0x70c>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	f7f9 f85f 	bl	800016c <__adddf3>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070ba:	f7f9 fc9d 	bl	80009f8 <__aeabi_dcmpgt>
 80070be:	bb58      	cbnz	r0, 8007118 <_dtoa_r+0x708>
 80070c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070c8:	f7f9 fc6e 	bl	80009a8 <__aeabi_dcmpeq>
 80070cc:	b108      	cbz	r0, 80070d2 <_dtoa_r+0x6c2>
 80070ce:	07e1      	lsls	r1, r4, #31
 80070d0:	d422      	bmi.n	8007118 <_dtoa_r+0x708>
 80070d2:	4628      	mov	r0, r5
 80070d4:	4651      	mov	r1, sl
 80070d6:	f000 fe7b 	bl	8007dd0 <_Bfree>
 80070da:	2300      	movs	r3, #0
 80070dc:	703b      	strb	r3, [r7, #0]
 80070de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80070e0:	f109 0001 	add.w	r0, r9, #1
 80070e4:	6018      	str	r0, [r3, #0]
 80070e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f43f acdf 	beq.w	8006aac <_dtoa_r+0x9c>
 80070ee:	601f      	str	r7, [r3, #0]
 80070f0:	e4dc      	b.n	8006aac <_dtoa_r+0x9c>
 80070f2:	4627      	mov	r7, r4
 80070f4:	463b      	mov	r3, r7
 80070f6:	461f      	mov	r7, r3
 80070f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070fc:	2a39      	cmp	r2, #57	; 0x39
 80070fe:	d107      	bne.n	8007110 <_dtoa_r+0x700>
 8007100:	9a08      	ldr	r2, [sp, #32]
 8007102:	429a      	cmp	r2, r3
 8007104:	d1f7      	bne.n	80070f6 <_dtoa_r+0x6e6>
 8007106:	2230      	movs	r2, #48	; 0x30
 8007108:	9908      	ldr	r1, [sp, #32]
 800710a:	f108 0801 	add.w	r8, r8, #1
 800710e:	700a      	strb	r2, [r1, #0]
 8007110:	781a      	ldrb	r2, [r3, #0]
 8007112:	3201      	adds	r2, #1
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e79f      	b.n	8007058 <_dtoa_r+0x648>
 8007118:	46c8      	mov	r8, r9
 800711a:	e7eb      	b.n	80070f4 <_dtoa_r+0x6e4>
 800711c:	2200      	movs	r2, #0
 800711e:	4b72      	ldr	r3, [pc, #456]	; (80072e8 <_dtoa_r+0x8d8>)
 8007120:	f7f9 f9da 	bl	80004d8 <__aeabi_dmul>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800712c:	2200      	movs	r2, #0
 800712e:	2300      	movs	r3, #0
 8007130:	f7f9 fc3a 	bl	80009a8 <__aeabi_dcmpeq>
 8007134:	2800      	cmp	r0, #0
 8007136:	d098      	beq.n	800706a <_dtoa_r+0x65a>
 8007138:	e7cb      	b.n	80070d2 <_dtoa_r+0x6c2>
 800713a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800713c:	2a00      	cmp	r2, #0
 800713e:	f000 80cd 	beq.w	80072dc <_dtoa_r+0x8cc>
 8007142:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007144:	2a01      	cmp	r2, #1
 8007146:	f300 80af 	bgt.w	80072a8 <_dtoa_r+0x898>
 800714a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800714c:	2a00      	cmp	r2, #0
 800714e:	f000 80a7 	beq.w	80072a0 <_dtoa_r+0x890>
 8007152:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007156:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007158:	9f06      	ldr	r7, [sp, #24]
 800715a:	9a06      	ldr	r2, [sp, #24]
 800715c:	2101      	movs	r1, #1
 800715e:	441a      	add	r2, r3
 8007160:	9206      	str	r2, [sp, #24]
 8007162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007164:	4628      	mov	r0, r5
 8007166:	441a      	add	r2, r3
 8007168:	9209      	str	r2, [sp, #36]	; 0x24
 800716a:	f000 ff35 	bl	8007fd8 <__i2b>
 800716e:	4606      	mov	r6, r0
 8007170:	2f00      	cmp	r7, #0
 8007172:	dd0c      	ble.n	800718e <_dtoa_r+0x77e>
 8007174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007176:	2b00      	cmp	r3, #0
 8007178:	dd09      	ble.n	800718e <_dtoa_r+0x77e>
 800717a:	42bb      	cmp	r3, r7
 800717c:	bfa8      	it	ge
 800717e:	463b      	movge	r3, r7
 8007180:	9a06      	ldr	r2, [sp, #24]
 8007182:	1aff      	subs	r7, r7, r3
 8007184:	1ad2      	subs	r2, r2, r3
 8007186:	9206      	str	r2, [sp, #24]
 8007188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	9309      	str	r3, [sp, #36]	; 0x24
 800718e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007190:	b1f3      	cbz	r3, 80071d0 <_dtoa_r+0x7c0>
 8007192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80a9 	beq.w	80072ec <_dtoa_r+0x8dc>
 800719a:	2c00      	cmp	r4, #0
 800719c:	dd10      	ble.n	80071c0 <_dtoa_r+0x7b0>
 800719e:	4631      	mov	r1, r6
 80071a0:	4622      	mov	r2, r4
 80071a2:	4628      	mov	r0, r5
 80071a4:	f000 ffd2 	bl	800814c <__pow5mult>
 80071a8:	4652      	mov	r2, sl
 80071aa:	4601      	mov	r1, r0
 80071ac:	4606      	mov	r6, r0
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 ff28 	bl	8008004 <__multiply>
 80071b4:	4680      	mov	r8, r0
 80071b6:	4651      	mov	r1, sl
 80071b8:	4628      	mov	r0, r5
 80071ba:	f000 fe09 	bl	8007dd0 <_Bfree>
 80071be:	46c2      	mov	sl, r8
 80071c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c2:	1b1a      	subs	r2, r3, r4
 80071c4:	d004      	beq.n	80071d0 <_dtoa_r+0x7c0>
 80071c6:	4651      	mov	r1, sl
 80071c8:	4628      	mov	r0, r5
 80071ca:	f000 ffbf 	bl	800814c <__pow5mult>
 80071ce:	4682      	mov	sl, r0
 80071d0:	2101      	movs	r1, #1
 80071d2:	4628      	mov	r0, r5
 80071d4:	f000 ff00 	bl	8007fd8 <__i2b>
 80071d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071da:	4604      	mov	r4, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f340 8087 	ble.w	80072f0 <_dtoa_r+0x8e0>
 80071e2:	461a      	mov	r2, r3
 80071e4:	4601      	mov	r1, r0
 80071e6:	4628      	mov	r0, r5
 80071e8:	f000 ffb0 	bl	800814c <__pow5mult>
 80071ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071ee:	4604      	mov	r4, r0
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	f340 8080 	ble.w	80072f6 <_dtoa_r+0x8e6>
 80071f6:	f04f 0800 	mov.w	r8, #0
 80071fa:	6923      	ldr	r3, [r4, #16]
 80071fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007200:	6918      	ldr	r0, [r3, #16]
 8007202:	f000 fe9b 	bl	8007f3c <__hi0bits>
 8007206:	f1c0 0020 	rsb	r0, r0, #32
 800720a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720c:	4418      	add	r0, r3
 800720e:	f010 001f 	ands.w	r0, r0, #31
 8007212:	f000 8092 	beq.w	800733a <_dtoa_r+0x92a>
 8007216:	f1c0 0320 	rsb	r3, r0, #32
 800721a:	2b04      	cmp	r3, #4
 800721c:	f340 808a 	ble.w	8007334 <_dtoa_r+0x924>
 8007220:	f1c0 001c 	rsb	r0, r0, #28
 8007224:	9b06      	ldr	r3, [sp, #24]
 8007226:	4407      	add	r7, r0
 8007228:	4403      	add	r3, r0
 800722a:	9306      	str	r3, [sp, #24]
 800722c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800722e:	4403      	add	r3, r0
 8007230:	9309      	str	r3, [sp, #36]	; 0x24
 8007232:	9b06      	ldr	r3, [sp, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	dd05      	ble.n	8007244 <_dtoa_r+0x834>
 8007238:	4651      	mov	r1, sl
 800723a:	461a      	mov	r2, r3
 800723c:	4628      	mov	r0, r5
 800723e:	f000 ffdf 	bl	8008200 <__lshift>
 8007242:	4682      	mov	sl, r0
 8007244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007246:	2b00      	cmp	r3, #0
 8007248:	dd05      	ble.n	8007256 <_dtoa_r+0x846>
 800724a:	4621      	mov	r1, r4
 800724c:	461a      	mov	r2, r3
 800724e:	4628      	mov	r0, r5
 8007250:	f000 ffd6 	bl	8008200 <__lshift>
 8007254:	4604      	mov	r4, r0
 8007256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d070      	beq.n	800733e <_dtoa_r+0x92e>
 800725c:	4621      	mov	r1, r4
 800725e:	4650      	mov	r0, sl
 8007260:	f001 f83a 	bl	80082d8 <__mcmp>
 8007264:	2800      	cmp	r0, #0
 8007266:	da6a      	bge.n	800733e <_dtoa_r+0x92e>
 8007268:	2300      	movs	r3, #0
 800726a:	4651      	mov	r1, sl
 800726c:	220a      	movs	r2, #10
 800726e:	4628      	mov	r0, r5
 8007270:	f000 fdd0 	bl	8007e14 <__multadd>
 8007274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007276:	4682      	mov	sl, r0
 8007278:	f109 39ff 	add.w	r9, r9, #4294967295
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8193 	beq.w	80075a8 <_dtoa_r+0xb98>
 8007282:	4631      	mov	r1, r6
 8007284:	2300      	movs	r3, #0
 8007286:	220a      	movs	r2, #10
 8007288:	4628      	mov	r0, r5
 800728a:	f000 fdc3 	bl	8007e14 <__multadd>
 800728e:	f1bb 0f00 	cmp.w	fp, #0
 8007292:	4606      	mov	r6, r0
 8007294:	f300 8093 	bgt.w	80073be <_dtoa_r+0x9ae>
 8007298:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800729a:	2b02      	cmp	r3, #2
 800729c:	dc57      	bgt.n	800734e <_dtoa_r+0x93e>
 800729e:	e08e      	b.n	80073be <_dtoa_r+0x9ae>
 80072a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80072a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072a6:	e756      	b.n	8007156 <_dtoa_r+0x746>
 80072a8:	9b02      	ldr	r3, [sp, #8]
 80072aa:	1e5c      	subs	r4, r3, #1
 80072ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ae:	42a3      	cmp	r3, r4
 80072b0:	bfb7      	itett	lt
 80072b2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80072b4:	1b1c      	subge	r4, r3, r4
 80072b6:	1ae2      	sublt	r2, r4, r3
 80072b8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80072ba:	bfbe      	ittt	lt
 80072bc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80072be:	189b      	addlt	r3, r3, r2
 80072c0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80072c2:	9b02      	ldr	r3, [sp, #8]
 80072c4:	bfb8      	it	lt
 80072c6:	2400      	movlt	r4, #0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfbb      	ittet	lt
 80072cc:	9b06      	ldrlt	r3, [sp, #24]
 80072ce:	9a02      	ldrlt	r2, [sp, #8]
 80072d0:	9f06      	ldrge	r7, [sp, #24]
 80072d2:	1a9f      	sublt	r7, r3, r2
 80072d4:	bfac      	ite	ge
 80072d6:	9b02      	ldrge	r3, [sp, #8]
 80072d8:	2300      	movlt	r3, #0
 80072da:	e73e      	b.n	800715a <_dtoa_r+0x74a>
 80072dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80072de:	9f06      	ldr	r7, [sp, #24]
 80072e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80072e2:	e745      	b.n	8007170 <_dtoa_r+0x760>
 80072e4:	3fe00000 	.word	0x3fe00000
 80072e8:	40240000 	.word	0x40240000
 80072ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ee:	e76a      	b.n	80071c6 <_dtoa_r+0x7b6>
 80072f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	dc19      	bgt.n	800732a <_dtoa_r+0x91a>
 80072f6:	9b04      	ldr	r3, [sp, #16]
 80072f8:	b9bb      	cbnz	r3, 800732a <_dtoa_r+0x91a>
 80072fa:	9b05      	ldr	r3, [sp, #20]
 80072fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007300:	b99b      	cbnz	r3, 800732a <_dtoa_r+0x91a>
 8007302:	9b05      	ldr	r3, [sp, #20]
 8007304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007308:	0d1b      	lsrs	r3, r3, #20
 800730a:	051b      	lsls	r3, r3, #20
 800730c:	b183      	cbz	r3, 8007330 <_dtoa_r+0x920>
 800730e:	f04f 0801 	mov.w	r8, #1
 8007312:	9b06      	ldr	r3, [sp, #24]
 8007314:	3301      	adds	r3, #1
 8007316:	9306      	str	r3, [sp, #24]
 8007318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800731a:	3301      	adds	r3, #1
 800731c:	9309      	str	r3, [sp, #36]	; 0x24
 800731e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007320:	2b00      	cmp	r3, #0
 8007322:	f47f af6a 	bne.w	80071fa <_dtoa_r+0x7ea>
 8007326:	2001      	movs	r0, #1
 8007328:	e76f      	b.n	800720a <_dtoa_r+0x7fa>
 800732a:	f04f 0800 	mov.w	r8, #0
 800732e:	e7f6      	b.n	800731e <_dtoa_r+0x90e>
 8007330:	4698      	mov	r8, r3
 8007332:	e7f4      	b.n	800731e <_dtoa_r+0x90e>
 8007334:	f43f af7d 	beq.w	8007232 <_dtoa_r+0x822>
 8007338:	4618      	mov	r0, r3
 800733a:	301c      	adds	r0, #28
 800733c:	e772      	b.n	8007224 <_dtoa_r+0x814>
 800733e:	9b02      	ldr	r3, [sp, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	dc36      	bgt.n	80073b2 <_dtoa_r+0x9a2>
 8007344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007346:	2b02      	cmp	r3, #2
 8007348:	dd33      	ble.n	80073b2 <_dtoa_r+0x9a2>
 800734a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800734e:	f1bb 0f00 	cmp.w	fp, #0
 8007352:	d10d      	bne.n	8007370 <_dtoa_r+0x960>
 8007354:	4621      	mov	r1, r4
 8007356:	465b      	mov	r3, fp
 8007358:	2205      	movs	r2, #5
 800735a:	4628      	mov	r0, r5
 800735c:	f000 fd5a 	bl	8007e14 <__multadd>
 8007360:	4601      	mov	r1, r0
 8007362:	4604      	mov	r4, r0
 8007364:	4650      	mov	r0, sl
 8007366:	f000 ffb7 	bl	80082d8 <__mcmp>
 800736a:	2800      	cmp	r0, #0
 800736c:	f73f adb6 	bgt.w	8006edc <_dtoa_r+0x4cc>
 8007370:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007372:	9f08      	ldr	r7, [sp, #32]
 8007374:	ea6f 0903 	mvn.w	r9, r3
 8007378:	f04f 0800 	mov.w	r8, #0
 800737c:	4621      	mov	r1, r4
 800737e:	4628      	mov	r0, r5
 8007380:	f000 fd26 	bl	8007dd0 <_Bfree>
 8007384:	2e00      	cmp	r6, #0
 8007386:	f43f aea4 	beq.w	80070d2 <_dtoa_r+0x6c2>
 800738a:	f1b8 0f00 	cmp.w	r8, #0
 800738e:	d005      	beq.n	800739c <_dtoa_r+0x98c>
 8007390:	45b0      	cmp	r8, r6
 8007392:	d003      	beq.n	800739c <_dtoa_r+0x98c>
 8007394:	4641      	mov	r1, r8
 8007396:	4628      	mov	r0, r5
 8007398:	f000 fd1a 	bl	8007dd0 <_Bfree>
 800739c:	4631      	mov	r1, r6
 800739e:	4628      	mov	r0, r5
 80073a0:	f000 fd16 	bl	8007dd0 <_Bfree>
 80073a4:	e695      	b.n	80070d2 <_dtoa_r+0x6c2>
 80073a6:	2400      	movs	r4, #0
 80073a8:	4626      	mov	r6, r4
 80073aa:	e7e1      	b.n	8007370 <_dtoa_r+0x960>
 80073ac:	46c1      	mov	r9, r8
 80073ae:	4626      	mov	r6, r4
 80073b0:	e594      	b.n	8006edc <_dtoa_r+0x4cc>
 80073b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 80fc 	beq.w	80075b6 <_dtoa_r+0xba6>
 80073be:	2f00      	cmp	r7, #0
 80073c0:	dd05      	ble.n	80073ce <_dtoa_r+0x9be>
 80073c2:	4631      	mov	r1, r6
 80073c4:	463a      	mov	r2, r7
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 ff1a 	bl	8008200 <__lshift>
 80073cc:	4606      	mov	r6, r0
 80073ce:	f1b8 0f00 	cmp.w	r8, #0
 80073d2:	d05c      	beq.n	800748e <_dtoa_r+0xa7e>
 80073d4:	4628      	mov	r0, r5
 80073d6:	6871      	ldr	r1, [r6, #4]
 80073d8:	f000 fcba 	bl	8007d50 <_Balloc>
 80073dc:	4607      	mov	r7, r0
 80073de:	b928      	cbnz	r0, 80073ec <_dtoa_r+0x9dc>
 80073e0:	4602      	mov	r2, r0
 80073e2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80073e6:	4b7e      	ldr	r3, [pc, #504]	; (80075e0 <_dtoa_r+0xbd0>)
 80073e8:	f7ff bb26 	b.w	8006a38 <_dtoa_r+0x28>
 80073ec:	6932      	ldr	r2, [r6, #16]
 80073ee:	f106 010c 	add.w	r1, r6, #12
 80073f2:	3202      	adds	r2, #2
 80073f4:	0092      	lsls	r2, r2, #2
 80073f6:	300c      	adds	r0, #12
 80073f8:	f000 fc9c 	bl	8007d34 <memcpy>
 80073fc:	2201      	movs	r2, #1
 80073fe:	4639      	mov	r1, r7
 8007400:	4628      	mov	r0, r5
 8007402:	f000 fefd 	bl	8008200 <__lshift>
 8007406:	46b0      	mov	r8, r6
 8007408:	4606      	mov	r6, r0
 800740a:	9b08      	ldr	r3, [sp, #32]
 800740c:	3301      	adds	r3, #1
 800740e:	9302      	str	r3, [sp, #8]
 8007410:	9b08      	ldr	r3, [sp, #32]
 8007412:	445b      	add	r3, fp
 8007414:	930a      	str	r3, [sp, #40]	; 0x28
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	9309      	str	r3, [sp, #36]	; 0x24
 800741e:	9b02      	ldr	r3, [sp, #8]
 8007420:	4621      	mov	r1, r4
 8007422:	4650      	mov	r0, sl
 8007424:	f103 3bff 	add.w	fp, r3, #4294967295
 8007428:	f7ff fa62 	bl	80068f0 <quorem>
 800742c:	4603      	mov	r3, r0
 800742e:	4641      	mov	r1, r8
 8007430:	3330      	adds	r3, #48	; 0x30
 8007432:	9004      	str	r0, [sp, #16]
 8007434:	4650      	mov	r0, sl
 8007436:	930b      	str	r3, [sp, #44]	; 0x2c
 8007438:	f000 ff4e 	bl	80082d8 <__mcmp>
 800743c:	4632      	mov	r2, r6
 800743e:	9006      	str	r0, [sp, #24]
 8007440:	4621      	mov	r1, r4
 8007442:	4628      	mov	r0, r5
 8007444:	f000 ff64 	bl	8008310 <__mdiff>
 8007448:	68c2      	ldr	r2, [r0, #12]
 800744a:	4607      	mov	r7, r0
 800744c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800744e:	bb02      	cbnz	r2, 8007492 <_dtoa_r+0xa82>
 8007450:	4601      	mov	r1, r0
 8007452:	4650      	mov	r0, sl
 8007454:	f000 ff40 	bl	80082d8 <__mcmp>
 8007458:	4602      	mov	r2, r0
 800745a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800745c:	4639      	mov	r1, r7
 800745e:	4628      	mov	r0, r5
 8007460:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007464:	f000 fcb4 	bl	8007dd0 <_Bfree>
 8007468:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800746a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800746c:	9f02      	ldr	r7, [sp, #8]
 800746e:	ea43 0102 	orr.w	r1, r3, r2
 8007472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007474:	430b      	orrs	r3, r1
 8007476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007478:	d10d      	bne.n	8007496 <_dtoa_r+0xa86>
 800747a:	2b39      	cmp	r3, #57	; 0x39
 800747c:	d027      	beq.n	80074ce <_dtoa_r+0xabe>
 800747e:	9a06      	ldr	r2, [sp, #24]
 8007480:	2a00      	cmp	r2, #0
 8007482:	dd01      	ble.n	8007488 <_dtoa_r+0xa78>
 8007484:	9b04      	ldr	r3, [sp, #16]
 8007486:	3331      	adds	r3, #49	; 0x31
 8007488:	f88b 3000 	strb.w	r3, [fp]
 800748c:	e776      	b.n	800737c <_dtoa_r+0x96c>
 800748e:	4630      	mov	r0, r6
 8007490:	e7b9      	b.n	8007406 <_dtoa_r+0x9f6>
 8007492:	2201      	movs	r2, #1
 8007494:	e7e2      	b.n	800745c <_dtoa_r+0xa4c>
 8007496:	9906      	ldr	r1, [sp, #24]
 8007498:	2900      	cmp	r1, #0
 800749a:	db04      	blt.n	80074a6 <_dtoa_r+0xa96>
 800749c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800749e:	4301      	orrs	r1, r0
 80074a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074a2:	4301      	orrs	r1, r0
 80074a4:	d120      	bne.n	80074e8 <_dtoa_r+0xad8>
 80074a6:	2a00      	cmp	r2, #0
 80074a8:	ddee      	ble.n	8007488 <_dtoa_r+0xa78>
 80074aa:	4651      	mov	r1, sl
 80074ac:	2201      	movs	r2, #1
 80074ae:	4628      	mov	r0, r5
 80074b0:	9302      	str	r3, [sp, #8]
 80074b2:	f000 fea5 	bl	8008200 <__lshift>
 80074b6:	4621      	mov	r1, r4
 80074b8:	4682      	mov	sl, r0
 80074ba:	f000 ff0d 	bl	80082d8 <__mcmp>
 80074be:	2800      	cmp	r0, #0
 80074c0:	9b02      	ldr	r3, [sp, #8]
 80074c2:	dc02      	bgt.n	80074ca <_dtoa_r+0xaba>
 80074c4:	d1e0      	bne.n	8007488 <_dtoa_r+0xa78>
 80074c6:	07da      	lsls	r2, r3, #31
 80074c8:	d5de      	bpl.n	8007488 <_dtoa_r+0xa78>
 80074ca:	2b39      	cmp	r3, #57	; 0x39
 80074cc:	d1da      	bne.n	8007484 <_dtoa_r+0xa74>
 80074ce:	2339      	movs	r3, #57	; 0x39
 80074d0:	f88b 3000 	strb.w	r3, [fp]
 80074d4:	463b      	mov	r3, r7
 80074d6:	461f      	mov	r7, r3
 80074d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80074dc:	3b01      	subs	r3, #1
 80074de:	2a39      	cmp	r2, #57	; 0x39
 80074e0:	d050      	beq.n	8007584 <_dtoa_r+0xb74>
 80074e2:	3201      	adds	r2, #1
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	e749      	b.n	800737c <_dtoa_r+0x96c>
 80074e8:	2a00      	cmp	r2, #0
 80074ea:	dd03      	ble.n	80074f4 <_dtoa_r+0xae4>
 80074ec:	2b39      	cmp	r3, #57	; 0x39
 80074ee:	d0ee      	beq.n	80074ce <_dtoa_r+0xabe>
 80074f0:	3301      	adds	r3, #1
 80074f2:	e7c9      	b.n	8007488 <_dtoa_r+0xa78>
 80074f4:	9a02      	ldr	r2, [sp, #8]
 80074f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80074fc:	428a      	cmp	r2, r1
 80074fe:	d02a      	beq.n	8007556 <_dtoa_r+0xb46>
 8007500:	4651      	mov	r1, sl
 8007502:	2300      	movs	r3, #0
 8007504:	220a      	movs	r2, #10
 8007506:	4628      	mov	r0, r5
 8007508:	f000 fc84 	bl	8007e14 <__multadd>
 800750c:	45b0      	cmp	r8, r6
 800750e:	4682      	mov	sl, r0
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	f04f 020a 	mov.w	r2, #10
 8007518:	4641      	mov	r1, r8
 800751a:	4628      	mov	r0, r5
 800751c:	d107      	bne.n	800752e <_dtoa_r+0xb1e>
 800751e:	f000 fc79 	bl	8007e14 <__multadd>
 8007522:	4680      	mov	r8, r0
 8007524:	4606      	mov	r6, r0
 8007526:	9b02      	ldr	r3, [sp, #8]
 8007528:	3301      	adds	r3, #1
 800752a:	9302      	str	r3, [sp, #8]
 800752c:	e777      	b.n	800741e <_dtoa_r+0xa0e>
 800752e:	f000 fc71 	bl	8007e14 <__multadd>
 8007532:	4631      	mov	r1, r6
 8007534:	4680      	mov	r8, r0
 8007536:	2300      	movs	r3, #0
 8007538:	220a      	movs	r2, #10
 800753a:	4628      	mov	r0, r5
 800753c:	f000 fc6a 	bl	8007e14 <__multadd>
 8007540:	4606      	mov	r6, r0
 8007542:	e7f0      	b.n	8007526 <_dtoa_r+0xb16>
 8007544:	f1bb 0f00 	cmp.w	fp, #0
 8007548:	bfcc      	ite	gt
 800754a:	465f      	movgt	r7, fp
 800754c:	2701      	movle	r7, #1
 800754e:	f04f 0800 	mov.w	r8, #0
 8007552:	9a08      	ldr	r2, [sp, #32]
 8007554:	4417      	add	r7, r2
 8007556:	4651      	mov	r1, sl
 8007558:	2201      	movs	r2, #1
 800755a:	4628      	mov	r0, r5
 800755c:	9302      	str	r3, [sp, #8]
 800755e:	f000 fe4f 	bl	8008200 <__lshift>
 8007562:	4621      	mov	r1, r4
 8007564:	4682      	mov	sl, r0
 8007566:	f000 feb7 	bl	80082d8 <__mcmp>
 800756a:	2800      	cmp	r0, #0
 800756c:	dcb2      	bgt.n	80074d4 <_dtoa_r+0xac4>
 800756e:	d102      	bne.n	8007576 <_dtoa_r+0xb66>
 8007570:	9b02      	ldr	r3, [sp, #8]
 8007572:	07db      	lsls	r3, r3, #31
 8007574:	d4ae      	bmi.n	80074d4 <_dtoa_r+0xac4>
 8007576:	463b      	mov	r3, r7
 8007578:	461f      	mov	r7, r3
 800757a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800757e:	2a30      	cmp	r2, #48	; 0x30
 8007580:	d0fa      	beq.n	8007578 <_dtoa_r+0xb68>
 8007582:	e6fb      	b.n	800737c <_dtoa_r+0x96c>
 8007584:	9a08      	ldr	r2, [sp, #32]
 8007586:	429a      	cmp	r2, r3
 8007588:	d1a5      	bne.n	80074d6 <_dtoa_r+0xac6>
 800758a:	2331      	movs	r3, #49	; 0x31
 800758c:	f109 0901 	add.w	r9, r9, #1
 8007590:	7013      	strb	r3, [r2, #0]
 8007592:	e6f3      	b.n	800737c <_dtoa_r+0x96c>
 8007594:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <_dtoa_r+0xbd4>)
 8007596:	f7ff baa7 	b.w	8006ae8 <_dtoa_r+0xd8>
 800759a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800759c:	2b00      	cmp	r3, #0
 800759e:	f47f aa80 	bne.w	8006aa2 <_dtoa_r+0x92>
 80075a2:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <_dtoa_r+0xbd8>)
 80075a4:	f7ff baa0 	b.w	8006ae8 <_dtoa_r+0xd8>
 80075a8:	f1bb 0f00 	cmp.w	fp, #0
 80075ac:	dc03      	bgt.n	80075b6 <_dtoa_r+0xba6>
 80075ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	f73f aecc 	bgt.w	800734e <_dtoa_r+0x93e>
 80075b6:	9f08      	ldr	r7, [sp, #32]
 80075b8:	4621      	mov	r1, r4
 80075ba:	4650      	mov	r0, sl
 80075bc:	f7ff f998 	bl	80068f0 <quorem>
 80075c0:	9a08      	ldr	r2, [sp, #32]
 80075c2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80075c6:	f807 3b01 	strb.w	r3, [r7], #1
 80075ca:	1aba      	subs	r2, r7, r2
 80075cc:	4593      	cmp	fp, r2
 80075ce:	ddb9      	ble.n	8007544 <_dtoa_r+0xb34>
 80075d0:	4651      	mov	r1, sl
 80075d2:	2300      	movs	r3, #0
 80075d4:	220a      	movs	r2, #10
 80075d6:	4628      	mov	r0, r5
 80075d8:	f000 fc1c 	bl	8007e14 <__multadd>
 80075dc:	4682      	mov	sl, r0
 80075de:	e7eb      	b.n	80075b8 <_dtoa_r+0xba8>
 80075e0:	0800a09c 	.word	0x0800a09c
 80075e4:	0800a2a1 	.word	0x0800a2a1
 80075e8:	0800a019 	.word	0x0800a019

080075ec <rshift>:
 80075ec:	6903      	ldr	r3, [r0, #16]
 80075ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80075f6:	f100 0414 	add.w	r4, r0, #20
 80075fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80075fe:	dd46      	ble.n	800768e <rshift+0xa2>
 8007600:	f011 011f 	ands.w	r1, r1, #31
 8007604:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007608:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800760c:	d10c      	bne.n	8007628 <rshift+0x3c>
 800760e:	4629      	mov	r1, r5
 8007610:	f100 0710 	add.w	r7, r0, #16
 8007614:	42b1      	cmp	r1, r6
 8007616:	d335      	bcc.n	8007684 <rshift+0x98>
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	1eea      	subs	r2, r5, #3
 800761e:	4296      	cmp	r6, r2
 8007620:	bf38      	it	cc
 8007622:	2300      	movcc	r3, #0
 8007624:	4423      	add	r3, r4
 8007626:	e015      	b.n	8007654 <rshift+0x68>
 8007628:	46a1      	mov	r9, r4
 800762a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800762e:	f1c1 0820 	rsb	r8, r1, #32
 8007632:	40cf      	lsrs	r7, r1
 8007634:	f105 0e04 	add.w	lr, r5, #4
 8007638:	4576      	cmp	r6, lr
 800763a:	46f4      	mov	ip, lr
 800763c:	d816      	bhi.n	800766c <rshift+0x80>
 800763e:	1a9b      	subs	r3, r3, r2
 8007640:	009a      	lsls	r2, r3, #2
 8007642:	3a04      	subs	r2, #4
 8007644:	3501      	adds	r5, #1
 8007646:	42ae      	cmp	r6, r5
 8007648:	bf38      	it	cc
 800764a:	2200      	movcc	r2, #0
 800764c:	18a3      	adds	r3, r4, r2
 800764e:	50a7      	str	r7, [r4, r2]
 8007650:	b107      	cbz	r7, 8007654 <rshift+0x68>
 8007652:	3304      	adds	r3, #4
 8007654:	42a3      	cmp	r3, r4
 8007656:	eba3 0204 	sub.w	r2, r3, r4
 800765a:	bf08      	it	eq
 800765c:	2300      	moveq	r3, #0
 800765e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007662:	6102      	str	r2, [r0, #16]
 8007664:	bf08      	it	eq
 8007666:	6143      	streq	r3, [r0, #20]
 8007668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800766c:	f8dc c000 	ldr.w	ip, [ip]
 8007670:	fa0c fc08 	lsl.w	ip, ip, r8
 8007674:	ea4c 0707 	orr.w	r7, ip, r7
 8007678:	f849 7b04 	str.w	r7, [r9], #4
 800767c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007680:	40cf      	lsrs	r7, r1
 8007682:	e7d9      	b.n	8007638 <rshift+0x4c>
 8007684:	f851 cb04 	ldr.w	ip, [r1], #4
 8007688:	f847 cf04 	str.w	ip, [r7, #4]!
 800768c:	e7c2      	b.n	8007614 <rshift+0x28>
 800768e:	4623      	mov	r3, r4
 8007690:	e7e0      	b.n	8007654 <rshift+0x68>

08007692 <__hexdig_fun>:
 8007692:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007696:	2b09      	cmp	r3, #9
 8007698:	d802      	bhi.n	80076a0 <__hexdig_fun+0xe>
 800769a:	3820      	subs	r0, #32
 800769c:	b2c0      	uxtb	r0, r0
 800769e:	4770      	bx	lr
 80076a0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80076a4:	2b05      	cmp	r3, #5
 80076a6:	d801      	bhi.n	80076ac <__hexdig_fun+0x1a>
 80076a8:	3847      	subs	r0, #71	; 0x47
 80076aa:	e7f7      	b.n	800769c <__hexdig_fun+0xa>
 80076ac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80076b0:	2b05      	cmp	r3, #5
 80076b2:	d801      	bhi.n	80076b8 <__hexdig_fun+0x26>
 80076b4:	3827      	subs	r0, #39	; 0x27
 80076b6:	e7f1      	b.n	800769c <__hexdig_fun+0xa>
 80076b8:	2000      	movs	r0, #0
 80076ba:	4770      	bx	lr

080076bc <__gethex>:
 80076bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c0:	b08b      	sub	sp, #44	; 0x2c
 80076c2:	9306      	str	r3, [sp, #24]
 80076c4:	4bb9      	ldr	r3, [pc, #740]	; (80079ac <__gethex+0x2f0>)
 80076c6:	9002      	str	r0, [sp, #8]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	468b      	mov	fp, r1
 80076cc:	4618      	mov	r0, r3
 80076ce:	4690      	mov	r8, r2
 80076d0:	9303      	str	r3, [sp, #12]
 80076d2:	f7f8 fd3d 	bl	8000150 <strlen>
 80076d6:	4682      	mov	sl, r0
 80076d8:	9b03      	ldr	r3, [sp, #12]
 80076da:	f8db 2000 	ldr.w	r2, [fp]
 80076de:	4403      	add	r3, r0
 80076e0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80076e4:	9307      	str	r3, [sp, #28]
 80076e6:	1c93      	adds	r3, r2, #2
 80076e8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80076ec:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80076f0:	32fe      	adds	r2, #254	; 0xfe
 80076f2:	18d1      	adds	r1, r2, r3
 80076f4:	461f      	mov	r7, r3
 80076f6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80076fa:	9101      	str	r1, [sp, #4]
 80076fc:	2830      	cmp	r0, #48	; 0x30
 80076fe:	d0f8      	beq.n	80076f2 <__gethex+0x36>
 8007700:	f7ff ffc7 	bl	8007692 <__hexdig_fun>
 8007704:	4604      	mov	r4, r0
 8007706:	2800      	cmp	r0, #0
 8007708:	d13a      	bne.n	8007780 <__gethex+0xc4>
 800770a:	4652      	mov	r2, sl
 800770c:	4638      	mov	r0, r7
 800770e:	9903      	ldr	r1, [sp, #12]
 8007710:	f001 fd66 	bl	80091e0 <strncmp>
 8007714:	4605      	mov	r5, r0
 8007716:	2800      	cmp	r0, #0
 8007718:	d166      	bne.n	80077e8 <__gethex+0x12c>
 800771a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800771e:	eb07 060a 	add.w	r6, r7, sl
 8007722:	f7ff ffb6 	bl	8007692 <__hexdig_fun>
 8007726:	2800      	cmp	r0, #0
 8007728:	d060      	beq.n	80077ec <__gethex+0x130>
 800772a:	4633      	mov	r3, r6
 800772c:	7818      	ldrb	r0, [r3, #0]
 800772e:	461f      	mov	r7, r3
 8007730:	2830      	cmp	r0, #48	; 0x30
 8007732:	f103 0301 	add.w	r3, r3, #1
 8007736:	d0f9      	beq.n	800772c <__gethex+0x70>
 8007738:	f7ff ffab 	bl	8007692 <__hexdig_fun>
 800773c:	2301      	movs	r3, #1
 800773e:	fab0 f480 	clz	r4, r0
 8007742:	4635      	mov	r5, r6
 8007744:	0964      	lsrs	r4, r4, #5
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	463a      	mov	r2, r7
 800774a:	4616      	mov	r6, r2
 800774c:	7830      	ldrb	r0, [r6, #0]
 800774e:	3201      	adds	r2, #1
 8007750:	f7ff ff9f 	bl	8007692 <__hexdig_fun>
 8007754:	2800      	cmp	r0, #0
 8007756:	d1f8      	bne.n	800774a <__gethex+0x8e>
 8007758:	4652      	mov	r2, sl
 800775a:	4630      	mov	r0, r6
 800775c:	9903      	ldr	r1, [sp, #12]
 800775e:	f001 fd3f 	bl	80091e0 <strncmp>
 8007762:	b980      	cbnz	r0, 8007786 <__gethex+0xca>
 8007764:	b94d      	cbnz	r5, 800777a <__gethex+0xbe>
 8007766:	eb06 050a 	add.w	r5, r6, sl
 800776a:	462a      	mov	r2, r5
 800776c:	4616      	mov	r6, r2
 800776e:	7830      	ldrb	r0, [r6, #0]
 8007770:	3201      	adds	r2, #1
 8007772:	f7ff ff8e 	bl	8007692 <__hexdig_fun>
 8007776:	2800      	cmp	r0, #0
 8007778:	d1f8      	bne.n	800776c <__gethex+0xb0>
 800777a:	1bad      	subs	r5, r5, r6
 800777c:	00ad      	lsls	r5, r5, #2
 800777e:	e004      	b.n	800778a <__gethex+0xce>
 8007780:	2400      	movs	r4, #0
 8007782:	4625      	mov	r5, r4
 8007784:	e7e0      	b.n	8007748 <__gethex+0x8c>
 8007786:	2d00      	cmp	r5, #0
 8007788:	d1f7      	bne.n	800777a <__gethex+0xbe>
 800778a:	7833      	ldrb	r3, [r6, #0]
 800778c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007790:	2b50      	cmp	r3, #80	; 0x50
 8007792:	d139      	bne.n	8007808 <__gethex+0x14c>
 8007794:	7873      	ldrb	r3, [r6, #1]
 8007796:	2b2b      	cmp	r3, #43	; 0x2b
 8007798:	d02a      	beq.n	80077f0 <__gethex+0x134>
 800779a:	2b2d      	cmp	r3, #45	; 0x2d
 800779c:	d02c      	beq.n	80077f8 <__gethex+0x13c>
 800779e:	f04f 0900 	mov.w	r9, #0
 80077a2:	1c71      	adds	r1, r6, #1
 80077a4:	7808      	ldrb	r0, [r1, #0]
 80077a6:	f7ff ff74 	bl	8007692 <__hexdig_fun>
 80077aa:	1e43      	subs	r3, r0, #1
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b18      	cmp	r3, #24
 80077b0:	d82a      	bhi.n	8007808 <__gethex+0x14c>
 80077b2:	f1a0 0210 	sub.w	r2, r0, #16
 80077b6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80077ba:	f7ff ff6a 	bl	8007692 <__hexdig_fun>
 80077be:	1e43      	subs	r3, r0, #1
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b18      	cmp	r3, #24
 80077c4:	d91b      	bls.n	80077fe <__gethex+0x142>
 80077c6:	f1b9 0f00 	cmp.w	r9, #0
 80077ca:	d000      	beq.n	80077ce <__gethex+0x112>
 80077cc:	4252      	negs	r2, r2
 80077ce:	4415      	add	r5, r2
 80077d0:	f8cb 1000 	str.w	r1, [fp]
 80077d4:	b1d4      	cbz	r4, 800780c <__gethex+0x150>
 80077d6:	9b01      	ldr	r3, [sp, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	bf14      	ite	ne
 80077dc:	2700      	movne	r7, #0
 80077de:	2706      	moveq	r7, #6
 80077e0:	4638      	mov	r0, r7
 80077e2:	b00b      	add	sp, #44	; 0x2c
 80077e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e8:	463e      	mov	r6, r7
 80077ea:	4625      	mov	r5, r4
 80077ec:	2401      	movs	r4, #1
 80077ee:	e7cc      	b.n	800778a <__gethex+0xce>
 80077f0:	f04f 0900 	mov.w	r9, #0
 80077f4:	1cb1      	adds	r1, r6, #2
 80077f6:	e7d5      	b.n	80077a4 <__gethex+0xe8>
 80077f8:	f04f 0901 	mov.w	r9, #1
 80077fc:	e7fa      	b.n	80077f4 <__gethex+0x138>
 80077fe:	230a      	movs	r3, #10
 8007800:	fb03 0202 	mla	r2, r3, r2, r0
 8007804:	3a10      	subs	r2, #16
 8007806:	e7d6      	b.n	80077b6 <__gethex+0xfa>
 8007808:	4631      	mov	r1, r6
 800780a:	e7e1      	b.n	80077d0 <__gethex+0x114>
 800780c:	4621      	mov	r1, r4
 800780e:	1bf3      	subs	r3, r6, r7
 8007810:	3b01      	subs	r3, #1
 8007812:	2b07      	cmp	r3, #7
 8007814:	dc0a      	bgt.n	800782c <__gethex+0x170>
 8007816:	9802      	ldr	r0, [sp, #8]
 8007818:	f000 fa9a 	bl	8007d50 <_Balloc>
 800781c:	4604      	mov	r4, r0
 800781e:	b940      	cbnz	r0, 8007832 <__gethex+0x176>
 8007820:	4602      	mov	r2, r0
 8007822:	21de      	movs	r1, #222	; 0xde
 8007824:	4b62      	ldr	r3, [pc, #392]	; (80079b0 <__gethex+0x2f4>)
 8007826:	4863      	ldr	r0, [pc, #396]	; (80079b4 <__gethex+0x2f8>)
 8007828:	f001 fdb0 	bl	800938c <__assert_func>
 800782c:	3101      	adds	r1, #1
 800782e:	105b      	asrs	r3, r3, #1
 8007830:	e7ef      	b.n	8007812 <__gethex+0x156>
 8007832:	f04f 0b00 	mov.w	fp, #0
 8007836:	f100 0914 	add.w	r9, r0, #20
 800783a:	f1ca 0301 	rsb	r3, sl, #1
 800783e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007842:	f8cd b004 	str.w	fp, [sp, #4]
 8007846:	9308      	str	r3, [sp, #32]
 8007848:	42b7      	cmp	r7, r6
 800784a:	d33f      	bcc.n	80078cc <__gethex+0x210>
 800784c:	9f04      	ldr	r7, [sp, #16]
 800784e:	9b01      	ldr	r3, [sp, #4]
 8007850:	f847 3b04 	str.w	r3, [r7], #4
 8007854:	eba7 0709 	sub.w	r7, r7, r9
 8007858:	10bf      	asrs	r7, r7, #2
 800785a:	6127      	str	r7, [r4, #16]
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fb6d 	bl	8007f3c <__hi0bits>
 8007862:	017f      	lsls	r7, r7, #5
 8007864:	f8d8 6000 	ldr.w	r6, [r8]
 8007868:	1a3f      	subs	r7, r7, r0
 800786a:	42b7      	cmp	r7, r6
 800786c:	dd62      	ble.n	8007934 <__gethex+0x278>
 800786e:	1bbf      	subs	r7, r7, r6
 8007870:	4639      	mov	r1, r7
 8007872:	4620      	mov	r0, r4
 8007874:	f000 ff03 	bl	800867e <__any_on>
 8007878:	4682      	mov	sl, r0
 800787a:	b1a8      	cbz	r0, 80078a8 <__gethex+0x1ec>
 800787c:	f04f 0a01 	mov.w	sl, #1
 8007880:	1e7b      	subs	r3, r7, #1
 8007882:	1159      	asrs	r1, r3, #5
 8007884:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007888:	f003 021f 	and.w	r2, r3, #31
 800788c:	fa0a f202 	lsl.w	r2, sl, r2
 8007890:	420a      	tst	r2, r1
 8007892:	d009      	beq.n	80078a8 <__gethex+0x1ec>
 8007894:	4553      	cmp	r3, sl
 8007896:	dd05      	ble.n	80078a4 <__gethex+0x1e8>
 8007898:	4620      	mov	r0, r4
 800789a:	1eb9      	subs	r1, r7, #2
 800789c:	f000 feef 	bl	800867e <__any_on>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d144      	bne.n	800792e <__gethex+0x272>
 80078a4:	f04f 0a02 	mov.w	sl, #2
 80078a8:	4639      	mov	r1, r7
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7ff fe9e 	bl	80075ec <rshift>
 80078b0:	443d      	add	r5, r7
 80078b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078b6:	42ab      	cmp	r3, r5
 80078b8:	da4a      	bge.n	8007950 <__gethex+0x294>
 80078ba:	4621      	mov	r1, r4
 80078bc:	9802      	ldr	r0, [sp, #8]
 80078be:	f000 fa87 	bl	8007dd0 <_Bfree>
 80078c2:	2300      	movs	r3, #0
 80078c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078c6:	27a3      	movs	r7, #163	; 0xa3
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	e789      	b.n	80077e0 <__gethex+0x124>
 80078cc:	1e73      	subs	r3, r6, #1
 80078ce:	9a07      	ldr	r2, [sp, #28]
 80078d0:	9305      	str	r3, [sp, #20]
 80078d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d019      	beq.n	800790e <__gethex+0x252>
 80078da:	f1bb 0f20 	cmp.w	fp, #32
 80078de:	d107      	bne.n	80078f0 <__gethex+0x234>
 80078e0:	9b04      	ldr	r3, [sp, #16]
 80078e2:	9a01      	ldr	r2, [sp, #4]
 80078e4:	f843 2b04 	str.w	r2, [r3], #4
 80078e8:	9304      	str	r3, [sp, #16]
 80078ea:	2300      	movs	r3, #0
 80078ec:	469b      	mov	fp, r3
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80078f4:	f7ff fecd 	bl	8007692 <__hexdig_fun>
 80078f8:	9b01      	ldr	r3, [sp, #4]
 80078fa:	f000 000f 	and.w	r0, r0, #15
 80078fe:	fa00 f00b 	lsl.w	r0, r0, fp
 8007902:	4303      	orrs	r3, r0
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	f10b 0b04 	add.w	fp, fp, #4
 800790a:	9b05      	ldr	r3, [sp, #20]
 800790c:	e00d      	b.n	800792a <__gethex+0x26e>
 800790e:	9b05      	ldr	r3, [sp, #20]
 8007910:	9a08      	ldr	r2, [sp, #32]
 8007912:	4413      	add	r3, r2
 8007914:	42bb      	cmp	r3, r7
 8007916:	d3e0      	bcc.n	80078da <__gethex+0x21e>
 8007918:	4618      	mov	r0, r3
 800791a:	4652      	mov	r2, sl
 800791c:	9903      	ldr	r1, [sp, #12]
 800791e:	9309      	str	r3, [sp, #36]	; 0x24
 8007920:	f001 fc5e 	bl	80091e0 <strncmp>
 8007924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007926:	2800      	cmp	r0, #0
 8007928:	d1d7      	bne.n	80078da <__gethex+0x21e>
 800792a:	461e      	mov	r6, r3
 800792c:	e78c      	b.n	8007848 <__gethex+0x18c>
 800792e:	f04f 0a03 	mov.w	sl, #3
 8007932:	e7b9      	b.n	80078a8 <__gethex+0x1ec>
 8007934:	da09      	bge.n	800794a <__gethex+0x28e>
 8007936:	1bf7      	subs	r7, r6, r7
 8007938:	4621      	mov	r1, r4
 800793a:	463a      	mov	r2, r7
 800793c:	9802      	ldr	r0, [sp, #8]
 800793e:	f000 fc5f 	bl	8008200 <__lshift>
 8007942:	4604      	mov	r4, r0
 8007944:	1bed      	subs	r5, r5, r7
 8007946:	f100 0914 	add.w	r9, r0, #20
 800794a:	f04f 0a00 	mov.w	sl, #0
 800794e:	e7b0      	b.n	80078b2 <__gethex+0x1f6>
 8007950:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007954:	42a8      	cmp	r0, r5
 8007956:	dd71      	ble.n	8007a3c <__gethex+0x380>
 8007958:	1b45      	subs	r5, r0, r5
 800795a:	42ae      	cmp	r6, r5
 800795c:	dc34      	bgt.n	80079c8 <__gethex+0x30c>
 800795e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007962:	2b02      	cmp	r3, #2
 8007964:	d028      	beq.n	80079b8 <__gethex+0x2fc>
 8007966:	2b03      	cmp	r3, #3
 8007968:	d02a      	beq.n	80079c0 <__gethex+0x304>
 800796a:	2b01      	cmp	r3, #1
 800796c:	d115      	bne.n	800799a <__gethex+0x2de>
 800796e:	42ae      	cmp	r6, r5
 8007970:	d113      	bne.n	800799a <__gethex+0x2de>
 8007972:	2e01      	cmp	r6, #1
 8007974:	d10b      	bne.n	800798e <__gethex+0x2d2>
 8007976:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800797a:	9a06      	ldr	r2, [sp, #24]
 800797c:	2762      	movs	r7, #98	; 0x62
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	2301      	movs	r3, #1
 8007982:	6123      	str	r3, [r4, #16]
 8007984:	f8c9 3000 	str.w	r3, [r9]
 8007988:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800798a:	601c      	str	r4, [r3, #0]
 800798c:	e728      	b.n	80077e0 <__gethex+0x124>
 800798e:	4620      	mov	r0, r4
 8007990:	1e71      	subs	r1, r6, #1
 8007992:	f000 fe74 	bl	800867e <__any_on>
 8007996:	2800      	cmp	r0, #0
 8007998:	d1ed      	bne.n	8007976 <__gethex+0x2ba>
 800799a:	4621      	mov	r1, r4
 800799c:	9802      	ldr	r0, [sp, #8]
 800799e:	f000 fa17 	bl	8007dd0 <_Bfree>
 80079a2:	2300      	movs	r3, #0
 80079a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079a6:	2750      	movs	r7, #80	; 0x50
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e719      	b.n	80077e0 <__gethex+0x124>
 80079ac:	0800a118 	.word	0x0800a118
 80079b0:	0800a09c 	.word	0x0800a09c
 80079b4:	0800a0ad 	.word	0x0800a0ad
 80079b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1ed      	bne.n	800799a <__gethex+0x2de>
 80079be:	e7da      	b.n	8007976 <__gethex+0x2ba>
 80079c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1d7      	bne.n	8007976 <__gethex+0x2ba>
 80079c6:	e7e8      	b.n	800799a <__gethex+0x2de>
 80079c8:	1e6f      	subs	r7, r5, #1
 80079ca:	f1ba 0f00 	cmp.w	sl, #0
 80079ce:	d132      	bne.n	8007a36 <__gethex+0x37a>
 80079d0:	b127      	cbz	r7, 80079dc <__gethex+0x320>
 80079d2:	4639      	mov	r1, r7
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 fe52 	bl	800867e <__any_on>
 80079da:	4682      	mov	sl, r0
 80079dc:	2101      	movs	r1, #1
 80079de:	117b      	asrs	r3, r7, #5
 80079e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80079e4:	f007 071f 	and.w	r7, r7, #31
 80079e8:	fa01 f707 	lsl.w	r7, r1, r7
 80079ec:	421f      	tst	r7, r3
 80079ee:	f04f 0702 	mov.w	r7, #2
 80079f2:	4629      	mov	r1, r5
 80079f4:	4620      	mov	r0, r4
 80079f6:	bf18      	it	ne
 80079f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80079fc:	1b76      	subs	r6, r6, r5
 80079fe:	f7ff fdf5 	bl	80075ec <rshift>
 8007a02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007a06:	f1ba 0f00 	cmp.w	sl, #0
 8007a0a:	d048      	beq.n	8007a9e <__gethex+0x3e2>
 8007a0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d015      	beq.n	8007a40 <__gethex+0x384>
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d017      	beq.n	8007a48 <__gethex+0x38c>
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d109      	bne.n	8007a30 <__gethex+0x374>
 8007a1c:	f01a 0f02 	tst.w	sl, #2
 8007a20:	d006      	beq.n	8007a30 <__gethex+0x374>
 8007a22:	f8d9 0000 	ldr.w	r0, [r9]
 8007a26:	ea4a 0a00 	orr.w	sl, sl, r0
 8007a2a:	f01a 0f01 	tst.w	sl, #1
 8007a2e:	d10e      	bne.n	8007a4e <__gethex+0x392>
 8007a30:	f047 0710 	orr.w	r7, r7, #16
 8007a34:	e033      	b.n	8007a9e <__gethex+0x3e2>
 8007a36:	f04f 0a01 	mov.w	sl, #1
 8007a3a:	e7cf      	b.n	80079dc <__gethex+0x320>
 8007a3c:	2701      	movs	r7, #1
 8007a3e:	e7e2      	b.n	8007a06 <__gethex+0x34a>
 8007a40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a42:	f1c3 0301 	rsb	r3, r3, #1
 8007a46:	9315      	str	r3, [sp, #84]	; 0x54
 8007a48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d0f0      	beq.n	8007a30 <__gethex+0x374>
 8007a4e:	f04f 0c00 	mov.w	ip, #0
 8007a52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007a56:	f104 0314 	add.w	r3, r4, #20
 8007a5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007a5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a68:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007a6c:	d01c      	beq.n	8007aa8 <__gethex+0x3ec>
 8007a6e:	3201      	adds	r2, #1
 8007a70:	6002      	str	r2, [r0, #0]
 8007a72:	2f02      	cmp	r7, #2
 8007a74:	f104 0314 	add.w	r3, r4, #20
 8007a78:	d13d      	bne.n	8007af6 <__gethex+0x43a>
 8007a7a:	f8d8 2000 	ldr.w	r2, [r8]
 8007a7e:	3a01      	subs	r2, #1
 8007a80:	42b2      	cmp	r2, r6
 8007a82:	d10a      	bne.n	8007a9a <__gethex+0x3de>
 8007a84:	2201      	movs	r2, #1
 8007a86:	1171      	asrs	r1, r6, #5
 8007a88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a8c:	f006 061f 	and.w	r6, r6, #31
 8007a90:	fa02 f606 	lsl.w	r6, r2, r6
 8007a94:	421e      	tst	r6, r3
 8007a96:	bf18      	it	ne
 8007a98:	4617      	movne	r7, r2
 8007a9a:	f047 0720 	orr.w	r7, r7, #32
 8007a9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007aa0:	601c      	str	r4, [r3, #0]
 8007aa2:	9b06      	ldr	r3, [sp, #24]
 8007aa4:	601d      	str	r5, [r3, #0]
 8007aa6:	e69b      	b.n	80077e0 <__gethex+0x124>
 8007aa8:	4299      	cmp	r1, r3
 8007aaa:	f843 cc04 	str.w	ip, [r3, #-4]
 8007aae:	d8d8      	bhi.n	8007a62 <__gethex+0x3a6>
 8007ab0:	68a3      	ldr	r3, [r4, #8]
 8007ab2:	459b      	cmp	fp, r3
 8007ab4:	db17      	blt.n	8007ae6 <__gethex+0x42a>
 8007ab6:	6861      	ldr	r1, [r4, #4]
 8007ab8:	9802      	ldr	r0, [sp, #8]
 8007aba:	3101      	adds	r1, #1
 8007abc:	f000 f948 	bl	8007d50 <_Balloc>
 8007ac0:	4681      	mov	r9, r0
 8007ac2:	b918      	cbnz	r0, 8007acc <__gethex+0x410>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	2184      	movs	r1, #132	; 0x84
 8007ac8:	4b19      	ldr	r3, [pc, #100]	; (8007b30 <__gethex+0x474>)
 8007aca:	e6ac      	b.n	8007826 <__gethex+0x16a>
 8007acc:	6922      	ldr	r2, [r4, #16]
 8007ace:	f104 010c 	add.w	r1, r4, #12
 8007ad2:	3202      	adds	r2, #2
 8007ad4:	0092      	lsls	r2, r2, #2
 8007ad6:	300c      	adds	r0, #12
 8007ad8:	f000 f92c 	bl	8007d34 <memcpy>
 8007adc:	4621      	mov	r1, r4
 8007ade:	9802      	ldr	r0, [sp, #8]
 8007ae0:	f000 f976 	bl	8007dd0 <_Bfree>
 8007ae4:	464c      	mov	r4, r9
 8007ae6:	6923      	ldr	r3, [r4, #16]
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	6122      	str	r2, [r4, #16]
 8007aec:	2201      	movs	r2, #1
 8007aee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007af2:	615a      	str	r2, [r3, #20]
 8007af4:	e7bd      	b.n	8007a72 <__gethex+0x3b6>
 8007af6:	6922      	ldr	r2, [r4, #16]
 8007af8:	455a      	cmp	r2, fp
 8007afa:	dd0b      	ble.n	8007b14 <__gethex+0x458>
 8007afc:	2101      	movs	r1, #1
 8007afe:	4620      	mov	r0, r4
 8007b00:	f7ff fd74 	bl	80075ec <rshift>
 8007b04:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b08:	3501      	adds	r5, #1
 8007b0a:	42ab      	cmp	r3, r5
 8007b0c:	f6ff aed5 	blt.w	80078ba <__gethex+0x1fe>
 8007b10:	2701      	movs	r7, #1
 8007b12:	e7c2      	b.n	8007a9a <__gethex+0x3de>
 8007b14:	f016 061f 	ands.w	r6, r6, #31
 8007b18:	d0fa      	beq.n	8007b10 <__gethex+0x454>
 8007b1a:	449a      	add	sl, r3
 8007b1c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007b20:	f000 fa0c 	bl	8007f3c <__hi0bits>
 8007b24:	f1c6 0620 	rsb	r6, r6, #32
 8007b28:	42b0      	cmp	r0, r6
 8007b2a:	dbe7      	blt.n	8007afc <__gethex+0x440>
 8007b2c:	e7f0      	b.n	8007b10 <__gethex+0x454>
 8007b2e:	bf00      	nop
 8007b30:	0800a09c 	.word	0x0800a09c

08007b34 <L_shift>:
 8007b34:	f1c2 0208 	rsb	r2, r2, #8
 8007b38:	0092      	lsls	r2, r2, #2
 8007b3a:	b570      	push	{r4, r5, r6, lr}
 8007b3c:	f1c2 0620 	rsb	r6, r2, #32
 8007b40:	6843      	ldr	r3, [r0, #4]
 8007b42:	6804      	ldr	r4, [r0, #0]
 8007b44:	fa03 f506 	lsl.w	r5, r3, r6
 8007b48:	432c      	orrs	r4, r5
 8007b4a:	40d3      	lsrs	r3, r2
 8007b4c:	6004      	str	r4, [r0, #0]
 8007b4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007b52:	4288      	cmp	r0, r1
 8007b54:	d3f4      	bcc.n	8007b40 <L_shift+0xc>
 8007b56:	bd70      	pop	{r4, r5, r6, pc}

08007b58 <__match>:
 8007b58:	b530      	push	{r4, r5, lr}
 8007b5a:	6803      	ldr	r3, [r0, #0]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b62:	b914      	cbnz	r4, 8007b6a <__match+0x12>
 8007b64:	6003      	str	r3, [r0, #0]
 8007b66:	2001      	movs	r0, #1
 8007b68:	bd30      	pop	{r4, r5, pc}
 8007b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007b72:	2d19      	cmp	r5, #25
 8007b74:	bf98      	it	ls
 8007b76:	3220      	addls	r2, #32
 8007b78:	42a2      	cmp	r2, r4
 8007b7a:	d0f0      	beq.n	8007b5e <__match+0x6>
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e7f3      	b.n	8007b68 <__match+0x10>

08007b80 <__hexnan>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	2500      	movs	r5, #0
 8007b86:	680b      	ldr	r3, [r1, #0]
 8007b88:	4682      	mov	sl, r0
 8007b8a:	115e      	asrs	r6, r3, #5
 8007b8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007b90:	f013 031f 	ands.w	r3, r3, #31
 8007b94:	bf18      	it	ne
 8007b96:	3604      	addne	r6, #4
 8007b98:	1f37      	subs	r7, r6, #4
 8007b9a:	4690      	mov	r8, r2
 8007b9c:	46b9      	mov	r9, r7
 8007b9e:	463c      	mov	r4, r7
 8007ba0:	46ab      	mov	fp, r5
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	6801      	ldr	r1, [r0, #0]
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	f846 5c04 	str.w	r5, [r6, #-4]
 8007bac:	9502      	str	r5, [sp, #8]
 8007bae:	784a      	ldrb	r2, [r1, #1]
 8007bb0:	1c4b      	adds	r3, r1, #1
 8007bb2:	9303      	str	r3, [sp, #12]
 8007bb4:	b342      	cbz	r2, 8007c08 <__hexnan+0x88>
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	9105      	str	r1, [sp, #20]
 8007bba:	9204      	str	r2, [sp, #16]
 8007bbc:	f7ff fd69 	bl	8007692 <__hexdig_fun>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d14f      	bne.n	8007c64 <__hexnan+0xe4>
 8007bc4:	9a04      	ldr	r2, [sp, #16]
 8007bc6:	9905      	ldr	r1, [sp, #20]
 8007bc8:	2a20      	cmp	r2, #32
 8007bca:	d818      	bhi.n	8007bfe <__hexnan+0x7e>
 8007bcc:	9b02      	ldr	r3, [sp, #8]
 8007bce:	459b      	cmp	fp, r3
 8007bd0:	dd13      	ble.n	8007bfa <__hexnan+0x7a>
 8007bd2:	454c      	cmp	r4, r9
 8007bd4:	d206      	bcs.n	8007be4 <__hexnan+0x64>
 8007bd6:	2d07      	cmp	r5, #7
 8007bd8:	dc04      	bgt.n	8007be4 <__hexnan+0x64>
 8007bda:	462a      	mov	r2, r5
 8007bdc:	4649      	mov	r1, r9
 8007bde:	4620      	mov	r0, r4
 8007be0:	f7ff ffa8 	bl	8007b34 <L_shift>
 8007be4:	4544      	cmp	r4, r8
 8007be6:	d950      	bls.n	8007c8a <__hexnan+0x10a>
 8007be8:	2300      	movs	r3, #0
 8007bea:	f1a4 0904 	sub.w	r9, r4, #4
 8007bee:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bf2:	461d      	mov	r5, r3
 8007bf4:	464c      	mov	r4, r9
 8007bf6:	f8cd b008 	str.w	fp, [sp, #8]
 8007bfa:	9903      	ldr	r1, [sp, #12]
 8007bfc:	e7d7      	b.n	8007bae <__hexnan+0x2e>
 8007bfe:	2a29      	cmp	r2, #41	; 0x29
 8007c00:	d156      	bne.n	8007cb0 <__hexnan+0x130>
 8007c02:	3102      	adds	r1, #2
 8007c04:	f8ca 1000 	str.w	r1, [sl]
 8007c08:	f1bb 0f00 	cmp.w	fp, #0
 8007c0c:	d050      	beq.n	8007cb0 <__hexnan+0x130>
 8007c0e:	454c      	cmp	r4, r9
 8007c10:	d206      	bcs.n	8007c20 <__hexnan+0xa0>
 8007c12:	2d07      	cmp	r5, #7
 8007c14:	dc04      	bgt.n	8007c20 <__hexnan+0xa0>
 8007c16:	462a      	mov	r2, r5
 8007c18:	4649      	mov	r1, r9
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f7ff ff8a 	bl	8007b34 <L_shift>
 8007c20:	4544      	cmp	r4, r8
 8007c22:	d934      	bls.n	8007c8e <__hexnan+0x10e>
 8007c24:	4623      	mov	r3, r4
 8007c26:	f1a8 0204 	sub.w	r2, r8, #4
 8007c2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007c2e:	429f      	cmp	r7, r3
 8007c30:	f842 1f04 	str.w	r1, [r2, #4]!
 8007c34:	d2f9      	bcs.n	8007c2a <__hexnan+0xaa>
 8007c36:	1b3b      	subs	r3, r7, r4
 8007c38:	f023 0303 	bic.w	r3, r3, #3
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	3401      	adds	r4, #1
 8007c40:	3e03      	subs	r6, #3
 8007c42:	42b4      	cmp	r4, r6
 8007c44:	bf88      	it	hi
 8007c46:	2304      	movhi	r3, #4
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4443      	add	r3, r8
 8007c4c:	f843 2b04 	str.w	r2, [r3], #4
 8007c50:	429f      	cmp	r7, r3
 8007c52:	d2fb      	bcs.n	8007c4c <__hexnan+0xcc>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	b91b      	cbnz	r3, 8007c60 <__hexnan+0xe0>
 8007c58:	4547      	cmp	r7, r8
 8007c5a:	d127      	bne.n	8007cac <__hexnan+0x12c>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	2005      	movs	r0, #5
 8007c62:	e026      	b.n	8007cb2 <__hexnan+0x132>
 8007c64:	3501      	adds	r5, #1
 8007c66:	2d08      	cmp	r5, #8
 8007c68:	f10b 0b01 	add.w	fp, fp, #1
 8007c6c:	dd06      	ble.n	8007c7c <__hexnan+0xfc>
 8007c6e:	4544      	cmp	r4, r8
 8007c70:	d9c3      	bls.n	8007bfa <__hexnan+0x7a>
 8007c72:	2300      	movs	r3, #0
 8007c74:	2501      	movs	r5, #1
 8007c76:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c7a:	3c04      	subs	r4, #4
 8007c7c:	6822      	ldr	r2, [r4, #0]
 8007c7e:	f000 000f 	and.w	r0, r0, #15
 8007c82:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007c86:	6022      	str	r2, [r4, #0]
 8007c88:	e7b7      	b.n	8007bfa <__hexnan+0x7a>
 8007c8a:	2508      	movs	r5, #8
 8007c8c:	e7b5      	b.n	8007bfa <__hexnan+0x7a>
 8007c8e:	9b01      	ldr	r3, [sp, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0df      	beq.n	8007c54 <__hexnan+0xd4>
 8007c94:	f04f 32ff 	mov.w	r2, #4294967295
 8007c98:	f1c3 0320 	rsb	r3, r3, #32
 8007c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ca4:	401a      	ands	r2, r3
 8007ca6:	f846 2c04 	str.w	r2, [r6, #-4]
 8007caa:	e7d3      	b.n	8007c54 <__hexnan+0xd4>
 8007cac:	3f04      	subs	r7, #4
 8007cae:	e7d1      	b.n	8007c54 <__hexnan+0xd4>
 8007cb0:	2004      	movs	r0, #4
 8007cb2:	b007      	add	sp, #28
 8007cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007cb8 <_localeconv_r>:
 8007cb8:	4800      	ldr	r0, [pc, #0]	; (8007cbc <_localeconv_r+0x4>)
 8007cba:	4770      	bx	lr
 8007cbc:	2000016c 	.word	0x2000016c

08007cc0 <_lseek_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4d05      	ldr	r5, [pc, #20]	; (8007ce0 <_lseek_r+0x20>)
 8007ccc:	602a      	str	r2, [r5, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f7fa fa10 	bl	80020f4 <_lseek>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_lseek_r+0x1e>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_lseek_r+0x1e>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	200003c8 	.word	0x200003c8

08007ce4 <malloc>:
 8007ce4:	4b02      	ldr	r3, [pc, #8]	; (8007cf0 <malloc+0xc>)
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	f000 bd43 	b.w	8008774 <_malloc_r>
 8007cee:	bf00      	nop
 8007cf0:	20000014 	.word	0x20000014

08007cf4 <__ascii_mbtowc>:
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	b901      	cbnz	r1, 8007cfa <__ascii_mbtowc+0x6>
 8007cf8:	a901      	add	r1, sp, #4
 8007cfa:	b142      	cbz	r2, 8007d0e <__ascii_mbtowc+0x1a>
 8007cfc:	b14b      	cbz	r3, 8007d12 <__ascii_mbtowc+0x1e>
 8007cfe:	7813      	ldrb	r3, [r2, #0]
 8007d00:	600b      	str	r3, [r1, #0]
 8007d02:	7812      	ldrb	r2, [r2, #0]
 8007d04:	1e10      	subs	r0, r2, #0
 8007d06:	bf18      	it	ne
 8007d08:	2001      	movne	r0, #1
 8007d0a:	b002      	add	sp, #8
 8007d0c:	4770      	bx	lr
 8007d0e:	4610      	mov	r0, r2
 8007d10:	e7fb      	b.n	8007d0a <__ascii_mbtowc+0x16>
 8007d12:	f06f 0001 	mvn.w	r0, #1
 8007d16:	e7f8      	b.n	8007d0a <__ascii_mbtowc+0x16>

08007d18 <memchr>:
 8007d18:	4603      	mov	r3, r0
 8007d1a:	b510      	push	{r4, lr}
 8007d1c:	b2c9      	uxtb	r1, r1
 8007d1e:	4402      	add	r2, r0
 8007d20:	4293      	cmp	r3, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	d101      	bne.n	8007d2a <memchr+0x12>
 8007d26:	2000      	movs	r0, #0
 8007d28:	e003      	b.n	8007d32 <memchr+0x1a>
 8007d2a:	7804      	ldrb	r4, [r0, #0]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	428c      	cmp	r4, r1
 8007d30:	d1f6      	bne.n	8007d20 <memchr+0x8>
 8007d32:	bd10      	pop	{r4, pc}

08007d34 <memcpy>:
 8007d34:	440a      	add	r2, r1
 8007d36:	4291      	cmp	r1, r2
 8007d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d3c:	d100      	bne.n	8007d40 <memcpy+0xc>
 8007d3e:	4770      	bx	lr
 8007d40:	b510      	push	{r4, lr}
 8007d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d46:	4291      	cmp	r1, r2
 8007d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d4c:	d1f9      	bne.n	8007d42 <memcpy+0xe>
 8007d4e:	bd10      	pop	{r4, pc}

08007d50 <_Balloc>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d54:	4604      	mov	r4, r0
 8007d56:	460d      	mov	r5, r1
 8007d58:	b976      	cbnz	r6, 8007d78 <_Balloc+0x28>
 8007d5a:	2010      	movs	r0, #16
 8007d5c:	f7ff ffc2 	bl	8007ce4 <malloc>
 8007d60:	4602      	mov	r2, r0
 8007d62:	6260      	str	r0, [r4, #36]	; 0x24
 8007d64:	b920      	cbnz	r0, 8007d70 <_Balloc+0x20>
 8007d66:	2166      	movs	r1, #102	; 0x66
 8007d68:	4b17      	ldr	r3, [pc, #92]	; (8007dc8 <_Balloc+0x78>)
 8007d6a:	4818      	ldr	r0, [pc, #96]	; (8007dcc <_Balloc+0x7c>)
 8007d6c:	f001 fb0e 	bl	800938c <__assert_func>
 8007d70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d74:	6006      	str	r6, [r0, #0]
 8007d76:	60c6      	str	r6, [r0, #12]
 8007d78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d7a:	68f3      	ldr	r3, [r6, #12]
 8007d7c:	b183      	cbz	r3, 8007da0 <_Balloc+0x50>
 8007d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d86:	b9b8      	cbnz	r0, 8007db8 <_Balloc+0x68>
 8007d88:	2101      	movs	r1, #1
 8007d8a:	fa01 f605 	lsl.w	r6, r1, r5
 8007d8e:	1d72      	adds	r2, r6, #5
 8007d90:	4620      	mov	r0, r4
 8007d92:	0092      	lsls	r2, r2, #2
 8007d94:	f000 fc94 	bl	80086c0 <_calloc_r>
 8007d98:	b160      	cbz	r0, 8007db4 <_Balloc+0x64>
 8007d9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d9e:	e00e      	b.n	8007dbe <_Balloc+0x6e>
 8007da0:	2221      	movs	r2, #33	; 0x21
 8007da2:	2104      	movs	r1, #4
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 fc8b 	bl	80086c0 <_calloc_r>
 8007daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dac:	60f0      	str	r0, [r6, #12]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e4      	bne.n	8007d7e <_Balloc+0x2e>
 8007db4:	2000      	movs	r0, #0
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	6802      	ldr	r2, [r0, #0]
 8007dba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dc4:	e7f7      	b.n	8007db6 <_Balloc+0x66>
 8007dc6:	bf00      	nop
 8007dc8:	0800a026 	.word	0x0800a026
 8007dcc:	0800a12c 	.word	0x0800a12c

08007dd0 <_Bfree>:
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	b976      	cbnz	r6, 8007df8 <_Bfree+0x28>
 8007dda:	2010      	movs	r0, #16
 8007ddc:	f7ff ff82 	bl	8007ce4 <malloc>
 8007de0:	4602      	mov	r2, r0
 8007de2:	6268      	str	r0, [r5, #36]	; 0x24
 8007de4:	b920      	cbnz	r0, 8007df0 <_Bfree+0x20>
 8007de6:	218a      	movs	r1, #138	; 0x8a
 8007de8:	4b08      	ldr	r3, [pc, #32]	; (8007e0c <_Bfree+0x3c>)
 8007dea:	4809      	ldr	r0, [pc, #36]	; (8007e10 <_Bfree+0x40>)
 8007dec:	f001 face 	bl	800938c <__assert_func>
 8007df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007df4:	6006      	str	r6, [r0, #0]
 8007df6:	60c6      	str	r6, [r0, #12]
 8007df8:	b13c      	cbz	r4, 8007e0a <_Bfree+0x3a>
 8007dfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007dfc:	6862      	ldr	r2, [r4, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e04:	6021      	str	r1, [r4, #0]
 8007e06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}
 8007e0c:	0800a026 	.word	0x0800a026
 8007e10:	0800a12c 	.word	0x0800a12c

08007e14 <__multadd>:
 8007e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e18:	4698      	mov	r8, r3
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	690e      	ldr	r6, [r1, #16]
 8007e20:	4607      	mov	r7, r0
 8007e22:	f101 0014 	add.w	r0, r1, #20
 8007e26:	6805      	ldr	r5, [r0, #0]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	b2a9      	uxth	r1, r5
 8007e2c:	fb02 8101 	mla	r1, r2, r1, r8
 8007e30:	0c2d      	lsrs	r5, r5, #16
 8007e32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007e36:	fb02 c505 	mla	r5, r2, r5, ip
 8007e3a:	b289      	uxth	r1, r1
 8007e3c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007e40:	429e      	cmp	r6, r3
 8007e42:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007e46:	f840 1b04 	str.w	r1, [r0], #4
 8007e4a:	dcec      	bgt.n	8007e26 <__multadd+0x12>
 8007e4c:	f1b8 0f00 	cmp.w	r8, #0
 8007e50:	d022      	beq.n	8007e98 <__multadd+0x84>
 8007e52:	68a3      	ldr	r3, [r4, #8]
 8007e54:	42b3      	cmp	r3, r6
 8007e56:	dc19      	bgt.n	8007e8c <__multadd+0x78>
 8007e58:	6861      	ldr	r1, [r4, #4]
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	3101      	adds	r1, #1
 8007e5e:	f7ff ff77 	bl	8007d50 <_Balloc>
 8007e62:	4605      	mov	r5, r0
 8007e64:	b928      	cbnz	r0, 8007e72 <__multadd+0x5e>
 8007e66:	4602      	mov	r2, r0
 8007e68:	21b5      	movs	r1, #181	; 0xb5
 8007e6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ea0 <__multadd+0x8c>)
 8007e6c:	480d      	ldr	r0, [pc, #52]	; (8007ea4 <__multadd+0x90>)
 8007e6e:	f001 fa8d 	bl	800938c <__assert_func>
 8007e72:	6922      	ldr	r2, [r4, #16]
 8007e74:	f104 010c 	add.w	r1, r4, #12
 8007e78:	3202      	adds	r2, #2
 8007e7a:	0092      	lsls	r2, r2, #2
 8007e7c:	300c      	adds	r0, #12
 8007e7e:	f7ff ff59 	bl	8007d34 <memcpy>
 8007e82:	4621      	mov	r1, r4
 8007e84:	4638      	mov	r0, r7
 8007e86:	f7ff ffa3 	bl	8007dd0 <_Bfree>
 8007e8a:	462c      	mov	r4, r5
 8007e8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007e90:	3601      	adds	r6, #1
 8007e92:	f8c3 8014 	str.w	r8, [r3, #20]
 8007e96:	6126      	str	r6, [r4, #16]
 8007e98:	4620      	mov	r0, r4
 8007e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e9e:	bf00      	nop
 8007ea0:	0800a09c 	.word	0x0800a09c
 8007ea4:	0800a12c 	.word	0x0800a12c

08007ea8 <__s2b>:
 8007ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eac:	4615      	mov	r5, r2
 8007eae:	2209      	movs	r2, #9
 8007eb0:	461f      	mov	r7, r3
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eba:	4606      	mov	r6, r0
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	db09      	blt.n	8007ed8 <__s2b+0x30>
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f7ff ff43 	bl	8007d50 <_Balloc>
 8007eca:	b940      	cbnz	r0, 8007ede <__s2b+0x36>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	21ce      	movs	r1, #206	; 0xce
 8007ed0:	4b18      	ldr	r3, [pc, #96]	; (8007f34 <__s2b+0x8c>)
 8007ed2:	4819      	ldr	r0, [pc, #100]	; (8007f38 <__s2b+0x90>)
 8007ed4:	f001 fa5a 	bl	800938c <__assert_func>
 8007ed8:	0052      	lsls	r2, r2, #1
 8007eda:	3101      	adds	r1, #1
 8007edc:	e7f0      	b.n	8007ec0 <__s2b+0x18>
 8007ede:	9b08      	ldr	r3, [sp, #32]
 8007ee0:	2d09      	cmp	r5, #9
 8007ee2:	6143      	str	r3, [r0, #20]
 8007ee4:	f04f 0301 	mov.w	r3, #1
 8007ee8:	6103      	str	r3, [r0, #16]
 8007eea:	dd16      	ble.n	8007f1a <__s2b+0x72>
 8007eec:	f104 0909 	add.w	r9, r4, #9
 8007ef0:	46c8      	mov	r8, r9
 8007ef2:	442c      	add	r4, r5
 8007ef4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ef8:	4601      	mov	r1, r0
 8007efa:	220a      	movs	r2, #10
 8007efc:	4630      	mov	r0, r6
 8007efe:	3b30      	subs	r3, #48	; 0x30
 8007f00:	f7ff ff88 	bl	8007e14 <__multadd>
 8007f04:	45a0      	cmp	r8, r4
 8007f06:	d1f5      	bne.n	8007ef4 <__s2b+0x4c>
 8007f08:	f1a5 0408 	sub.w	r4, r5, #8
 8007f0c:	444c      	add	r4, r9
 8007f0e:	1b2d      	subs	r5, r5, r4
 8007f10:	1963      	adds	r3, r4, r5
 8007f12:	42bb      	cmp	r3, r7
 8007f14:	db04      	blt.n	8007f20 <__s2b+0x78>
 8007f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f1a:	2509      	movs	r5, #9
 8007f1c:	340a      	adds	r4, #10
 8007f1e:	e7f6      	b.n	8007f0e <__s2b+0x66>
 8007f20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f24:	4601      	mov	r1, r0
 8007f26:	220a      	movs	r2, #10
 8007f28:	4630      	mov	r0, r6
 8007f2a:	3b30      	subs	r3, #48	; 0x30
 8007f2c:	f7ff ff72 	bl	8007e14 <__multadd>
 8007f30:	e7ee      	b.n	8007f10 <__s2b+0x68>
 8007f32:	bf00      	nop
 8007f34:	0800a09c 	.word	0x0800a09c
 8007f38:	0800a12c 	.word	0x0800a12c

08007f3c <__hi0bits>:
 8007f3c:	0c02      	lsrs	r2, r0, #16
 8007f3e:	0412      	lsls	r2, r2, #16
 8007f40:	4603      	mov	r3, r0
 8007f42:	b9ca      	cbnz	r2, 8007f78 <__hi0bits+0x3c>
 8007f44:	0403      	lsls	r3, r0, #16
 8007f46:	2010      	movs	r0, #16
 8007f48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007f4c:	bf04      	itt	eq
 8007f4e:	021b      	lsleq	r3, r3, #8
 8007f50:	3008      	addeq	r0, #8
 8007f52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007f56:	bf04      	itt	eq
 8007f58:	011b      	lsleq	r3, r3, #4
 8007f5a:	3004      	addeq	r0, #4
 8007f5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007f60:	bf04      	itt	eq
 8007f62:	009b      	lsleq	r3, r3, #2
 8007f64:	3002      	addeq	r0, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	db05      	blt.n	8007f76 <__hi0bits+0x3a>
 8007f6a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007f6e:	f100 0001 	add.w	r0, r0, #1
 8007f72:	bf08      	it	eq
 8007f74:	2020      	moveq	r0, #32
 8007f76:	4770      	bx	lr
 8007f78:	2000      	movs	r0, #0
 8007f7a:	e7e5      	b.n	8007f48 <__hi0bits+0xc>

08007f7c <__lo0bits>:
 8007f7c:	6803      	ldr	r3, [r0, #0]
 8007f7e:	4602      	mov	r2, r0
 8007f80:	f013 0007 	ands.w	r0, r3, #7
 8007f84:	d00b      	beq.n	8007f9e <__lo0bits+0x22>
 8007f86:	07d9      	lsls	r1, r3, #31
 8007f88:	d422      	bmi.n	8007fd0 <__lo0bits+0x54>
 8007f8a:	0798      	lsls	r0, r3, #30
 8007f8c:	bf49      	itett	mi
 8007f8e:	085b      	lsrmi	r3, r3, #1
 8007f90:	089b      	lsrpl	r3, r3, #2
 8007f92:	2001      	movmi	r0, #1
 8007f94:	6013      	strmi	r3, [r2, #0]
 8007f96:	bf5c      	itt	pl
 8007f98:	2002      	movpl	r0, #2
 8007f9a:	6013      	strpl	r3, [r2, #0]
 8007f9c:	4770      	bx	lr
 8007f9e:	b299      	uxth	r1, r3
 8007fa0:	b909      	cbnz	r1, 8007fa6 <__lo0bits+0x2a>
 8007fa2:	2010      	movs	r0, #16
 8007fa4:	0c1b      	lsrs	r3, r3, #16
 8007fa6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007faa:	bf04      	itt	eq
 8007fac:	0a1b      	lsreq	r3, r3, #8
 8007fae:	3008      	addeq	r0, #8
 8007fb0:	0719      	lsls	r1, r3, #28
 8007fb2:	bf04      	itt	eq
 8007fb4:	091b      	lsreq	r3, r3, #4
 8007fb6:	3004      	addeq	r0, #4
 8007fb8:	0799      	lsls	r1, r3, #30
 8007fba:	bf04      	itt	eq
 8007fbc:	089b      	lsreq	r3, r3, #2
 8007fbe:	3002      	addeq	r0, #2
 8007fc0:	07d9      	lsls	r1, r3, #31
 8007fc2:	d403      	bmi.n	8007fcc <__lo0bits+0x50>
 8007fc4:	085b      	lsrs	r3, r3, #1
 8007fc6:	f100 0001 	add.w	r0, r0, #1
 8007fca:	d003      	beq.n	8007fd4 <__lo0bits+0x58>
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	4770      	bx	lr
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	4770      	bx	lr
 8007fd4:	2020      	movs	r0, #32
 8007fd6:	4770      	bx	lr

08007fd8 <__i2b>:
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	460c      	mov	r4, r1
 8007fdc:	2101      	movs	r1, #1
 8007fde:	f7ff feb7 	bl	8007d50 <_Balloc>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	b928      	cbnz	r0, 8007ff2 <__i2b+0x1a>
 8007fe6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007fea:	4b04      	ldr	r3, [pc, #16]	; (8007ffc <__i2b+0x24>)
 8007fec:	4804      	ldr	r0, [pc, #16]	; (8008000 <__i2b+0x28>)
 8007fee:	f001 f9cd 	bl	800938c <__assert_func>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	6144      	str	r4, [r0, #20]
 8007ff6:	6103      	str	r3, [r0, #16]
 8007ff8:	bd10      	pop	{r4, pc}
 8007ffa:	bf00      	nop
 8007ffc:	0800a09c 	.word	0x0800a09c
 8008000:	0800a12c 	.word	0x0800a12c

08008004 <__multiply>:
 8008004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008008:	4614      	mov	r4, r2
 800800a:	690a      	ldr	r2, [r1, #16]
 800800c:	6923      	ldr	r3, [r4, #16]
 800800e:	460d      	mov	r5, r1
 8008010:	429a      	cmp	r2, r3
 8008012:	bfbe      	ittt	lt
 8008014:	460b      	movlt	r3, r1
 8008016:	4625      	movlt	r5, r4
 8008018:	461c      	movlt	r4, r3
 800801a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800801e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008022:	68ab      	ldr	r3, [r5, #8]
 8008024:	6869      	ldr	r1, [r5, #4]
 8008026:	eb0a 0709 	add.w	r7, sl, r9
 800802a:	42bb      	cmp	r3, r7
 800802c:	b085      	sub	sp, #20
 800802e:	bfb8      	it	lt
 8008030:	3101      	addlt	r1, #1
 8008032:	f7ff fe8d 	bl	8007d50 <_Balloc>
 8008036:	b930      	cbnz	r0, 8008046 <__multiply+0x42>
 8008038:	4602      	mov	r2, r0
 800803a:	f240 115d 	movw	r1, #349	; 0x15d
 800803e:	4b41      	ldr	r3, [pc, #260]	; (8008144 <__multiply+0x140>)
 8008040:	4841      	ldr	r0, [pc, #260]	; (8008148 <__multiply+0x144>)
 8008042:	f001 f9a3 	bl	800938c <__assert_func>
 8008046:	f100 0614 	add.w	r6, r0, #20
 800804a:	4633      	mov	r3, r6
 800804c:	2200      	movs	r2, #0
 800804e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008052:	4543      	cmp	r3, r8
 8008054:	d31e      	bcc.n	8008094 <__multiply+0x90>
 8008056:	f105 0c14 	add.w	ip, r5, #20
 800805a:	f104 0314 	add.w	r3, r4, #20
 800805e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008062:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008066:	9202      	str	r2, [sp, #8]
 8008068:	ebac 0205 	sub.w	r2, ip, r5
 800806c:	3a15      	subs	r2, #21
 800806e:	f022 0203 	bic.w	r2, r2, #3
 8008072:	3204      	adds	r2, #4
 8008074:	f105 0115 	add.w	r1, r5, #21
 8008078:	458c      	cmp	ip, r1
 800807a:	bf38      	it	cc
 800807c:	2204      	movcc	r2, #4
 800807e:	9201      	str	r2, [sp, #4]
 8008080:	9a02      	ldr	r2, [sp, #8]
 8008082:	9303      	str	r3, [sp, #12]
 8008084:	429a      	cmp	r2, r3
 8008086:	d808      	bhi.n	800809a <__multiply+0x96>
 8008088:	2f00      	cmp	r7, #0
 800808a:	dc55      	bgt.n	8008138 <__multiply+0x134>
 800808c:	6107      	str	r7, [r0, #16]
 800808e:	b005      	add	sp, #20
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	f843 2b04 	str.w	r2, [r3], #4
 8008098:	e7db      	b.n	8008052 <__multiply+0x4e>
 800809a:	f8b3 a000 	ldrh.w	sl, [r3]
 800809e:	f1ba 0f00 	cmp.w	sl, #0
 80080a2:	d020      	beq.n	80080e6 <__multiply+0xe2>
 80080a4:	46b1      	mov	r9, r6
 80080a6:	2200      	movs	r2, #0
 80080a8:	f105 0e14 	add.w	lr, r5, #20
 80080ac:	f85e 4b04 	ldr.w	r4, [lr], #4
 80080b0:	f8d9 b000 	ldr.w	fp, [r9]
 80080b4:	b2a1      	uxth	r1, r4
 80080b6:	fa1f fb8b 	uxth.w	fp, fp
 80080ba:	fb0a b101 	mla	r1, sl, r1, fp
 80080be:	4411      	add	r1, r2
 80080c0:	f8d9 2000 	ldr.w	r2, [r9]
 80080c4:	0c24      	lsrs	r4, r4, #16
 80080c6:	0c12      	lsrs	r2, r2, #16
 80080c8:	fb0a 2404 	mla	r4, sl, r4, r2
 80080cc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80080d0:	b289      	uxth	r1, r1
 80080d2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80080d6:	45f4      	cmp	ip, lr
 80080d8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80080dc:	f849 1b04 	str.w	r1, [r9], #4
 80080e0:	d8e4      	bhi.n	80080ac <__multiply+0xa8>
 80080e2:	9901      	ldr	r1, [sp, #4]
 80080e4:	5072      	str	r2, [r6, r1]
 80080e6:	9a03      	ldr	r2, [sp, #12]
 80080e8:	3304      	adds	r3, #4
 80080ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080ee:	f1b9 0f00 	cmp.w	r9, #0
 80080f2:	d01f      	beq.n	8008134 <__multiply+0x130>
 80080f4:	46b6      	mov	lr, r6
 80080f6:	f04f 0a00 	mov.w	sl, #0
 80080fa:	6834      	ldr	r4, [r6, #0]
 80080fc:	f105 0114 	add.w	r1, r5, #20
 8008100:	880a      	ldrh	r2, [r1, #0]
 8008102:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008106:	b2a4      	uxth	r4, r4
 8008108:	fb09 b202 	mla	r2, r9, r2, fp
 800810c:	4492      	add	sl, r2
 800810e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008112:	f84e 4b04 	str.w	r4, [lr], #4
 8008116:	f851 4b04 	ldr.w	r4, [r1], #4
 800811a:	f8be 2000 	ldrh.w	r2, [lr]
 800811e:	0c24      	lsrs	r4, r4, #16
 8008120:	fb09 2404 	mla	r4, r9, r4, r2
 8008124:	458c      	cmp	ip, r1
 8008126:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800812a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800812e:	d8e7      	bhi.n	8008100 <__multiply+0xfc>
 8008130:	9a01      	ldr	r2, [sp, #4]
 8008132:	50b4      	str	r4, [r6, r2]
 8008134:	3604      	adds	r6, #4
 8008136:	e7a3      	b.n	8008080 <__multiply+0x7c>
 8008138:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1a5      	bne.n	800808c <__multiply+0x88>
 8008140:	3f01      	subs	r7, #1
 8008142:	e7a1      	b.n	8008088 <__multiply+0x84>
 8008144:	0800a09c 	.word	0x0800a09c
 8008148:	0800a12c 	.word	0x0800a12c

0800814c <__pow5mult>:
 800814c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008150:	4615      	mov	r5, r2
 8008152:	f012 0203 	ands.w	r2, r2, #3
 8008156:	4606      	mov	r6, r0
 8008158:	460f      	mov	r7, r1
 800815a:	d007      	beq.n	800816c <__pow5mult+0x20>
 800815c:	4c25      	ldr	r4, [pc, #148]	; (80081f4 <__pow5mult+0xa8>)
 800815e:	3a01      	subs	r2, #1
 8008160:	2300      	movs	r3, #0
 8008162:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008166:	f7ff fe55 	bl	8007e14 <__multadd>
 800816a:	4607      	mov	r7, r0
 800816c:	10ad      	asrs	r5, r5, #2
 800816e:	d03d      	beq.n	80081ec <__pow5mult+0xa0>
 8008170:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008172:	b97c      	cbnz	r4, 8008194 <__pow5mult+0x48>
 8008174:	2010      	movs	r0, #16
 8008176:	f7ff fdb5 	bl	8007ce4 <malloc>
 800817a:	4602      	mov	r2, r0
 800817c:	6270      	str	r0, [r6, #36]	; 0x24
 800817e:	b928      	cbnz	r0, 800818c <__pow5mult+0x40>
 8008180:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008184:	4b1c      	ldr	r3, [pc, #112]	; (80081f8 <__pow5mult+0xac>)
 8008186:	481d      	ldr	r0, [pc, #116]	; (80081fc <__pow5mult+0xb0>)
 8008188:	f001 f900 	bl	800938c <__assert_func>
 800818c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008190:	6004      	str	r4, [r0, #0]
 8008192:	60c4      	str	r4, [r0, #12]
 8008194:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008198:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800819c:	b94c      	cbnz	r4, 80081b2 <__pow5mult+0x66>
 800819e:	f240 2171 	movw	r1, #625	; 0x271
 80081a2:	4630      	mov	r0, r6
 80081a4:	f7ff ff18 	bl	8007fd8 <__i2b>
 80081a8:	2300      	movs	r3, #0
 80081aa:	4604      	mov	r4, r0
 80081ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80081b0:	6003      	str	r3, [r0, #0]
 80081b2:	f04f 0900 	mov.w	r9, #0
 80081b6:	07eb      	lsls	r3, r5, #31
 80081b8:	d50a      	bpl.n	80081d0 <__pow5mult+0x84>
 80081ba:	4639      	mov	r1, r7
 80081bc:	4622      	mov	r2, r4
 80081be:	4630      	mov	r0, r6
 80081c0:	f7ff ff20 	bl	8008004 <__multiply>
 80081c4:	4680      	mov	r8, r0
 80081c6:	4639      	mov	r1, r7
 80081c8:	4630      	mov	r0, r6
 80081ca:	f7ff fe01 	bl	8007dd0 <_Bfree>
 80081ce:	4647      	mov	r7, r8
 80081d0:	106d      	asrs	r5, r5, #1
 80081d2:	d00b      	beq.n	80081ec <__pow5mult+0xa0>
 80081d4:	6820      	ldr	r0, [r4, #0]
 80081d6:	b938      	cbnz	r0, 80081e8 <__pow5mult+0x9c>
 80081d8:	4622      	mov	r2, r4
 80081da:	4621      	mov	r1, r4
 80081dc:	4630      	mov	r0, r6
 80081de:	f7ff ff11 	bl	8008004 <__multiply>
 80081e2:	6020      	str	r0, [r4, #0]
 80081e4:	f8c0 9000 	str.w	r9, [r0]
 80081e8:	4604      	mov	r4, r0
 80081ea:	e7e4      	b.n	80081b6 <__pow5mult+0x6a>
 80081ec:	4638      	mov	r0, r7
 80081ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f2:	bf00      	nop
 80081f4:	0800a280 	.word	0x0800a280
 80081f8:	0800a026 	.word	0x0800a026
 80081fc:	0800a12c 	.word	0x0800a12c

08008200 <__lshift>:
 8008200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008204:	460c      	mov	r4, r1
 8008206:	4607      	mov	r7, r0
 8008208:	4691      	mov	r9, r2
 800820a:	6923      	ldr	r3, [r4, #16]
 800820c:	6849      	ldr	r1, [r1, #4]
 800820e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008212:	68a3      	ldr	r3, [r4, #8]
 8008214:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008218:	f108 0601 	add.w	r6, r8, #1
 800821c:	42b3      	cmp	r3, r6
 800821e:	db0b      	blt.n	8008238 <__lshift+0x38>
 8008220:	4638      	mov	r0, r7
 8008222:	f7ff fd95 	bl	8007d50 <_Balloc>
 8008226:	4605      	mov	r5, r0
 8008228:	b948      	cbnz	r0, 800823e <__lshift+0x3e>
 800822a:	4602      	mov	r2, r0
 800822c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008230:	4b27      	ldr	r3, [pc, #156]	; (80082d0 <__lshift+0xd0>)
 8008232:	4828      	ldr	r0, [pc, #160]	; (80082d4 <__lshift+0xd4>)
 8008234:	f001 f8aa 	bl	800938c <__assert_func>
 8008238:	3101      	adds	r1, #1
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	e7ee      	b.n	800821c <__lshift+0x1c>
 800823e:	2300      	movs	r3, #0
 8008240:	f100 0114 	add.w	r1, r0, #20
 8008244:	f100 0210 	add.w	r2, r0, #16
 8008248:	4618      	mov	r0, r3
 800824a:	4553      	cmp	r3, sl
 800824c:	db33      	blt.n	80082b6 <__lshift+0xb6>
 800824e:	6920      	ldr	r0, [r4, #16]
 8008250:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008254:	f104 0314 	add.w	r3, r4, #20
 8008258:	f019 091f 	ands.w	r9, r9, #31
 800825c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008260:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008264:	d02b      	beq.n	80082be <__lshift+0xbe>
 8008266:	468a      	mov	sl, r1
 8008268:	2200      	movs	r2, #0
 800826a:	f1c9 0e20 	rsb	lr, r9, #32
 800826e:	6818      	ldr	r0, [r3, #0]
 8008270:	fa00 f009 	lsl.w	r0, r0, r9
 8008274:	4302      	orrs	r2, r0
 8008276:	f84a 2b04 	str.w	r2, [sl], #4
 800827a:	f853 2b04 	ldr.w	r2, [r3], #4
 800827e:	459c      	cmp	ip, r3
 8008280:	fa22 f20e 	lsr.w	r2, r2, lr
 8008284:	d8f3      	bhi.n	800826e <__lshift+0x6e>
 8008286:	ebac 0304 	sub.w	r3, ip, r4
 800828a:	3b15      	subs	r3, #21
 800828c:	f023 0303 	bic.w	r3, r3, #3
 8008290:	3304      	adds	r3, #4
 8008292:	f104 0015 	add.w	r0, r4, #21
 8008296:	4584      	cmp	ip, r0
 8008298:	bf38      	it	cc
 800829a:	2304      	movcc	r3, #4
 800829c:	50ca      	str	r2, [r1, r3]
 800829e:	b10a      	cbz	r2, 80082a4 <__lshift+0xa4>
 80082a0:	f108 0602 	add.w	r6, r8, #2
 80082a4:	3e01      	subs	r6, #1
 80082a6:	4638      	mov	r0, r7
 80082a8:	4621      	mov	r1, r4
 80082aa:	612e      	str	r6, [r5, #16]
 80082ac:	f7ff fd90 	bl	8007dd0 <_Bfree>
 80082b0:	4628      	mov	r0, r5
 80082b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80082ba:	3301      	adds	r3, #1
 80082bc:	e7c5      	b.n	800824a <__lshift+0x4a>
 80082be:	3904      	subs	r1, #4
 80082c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082c4:	459c      	cmp	ip, r3
 80082c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80082ca:	d8f9      	bhi.n	80082c0 <__lshift+0xc0>
 80082cc:	e7ea      	b.n	80082a4 <__lshift+0xa4>
 80082ce:	bf00      	nop
 80082d0:	0800a09c 	.word	0x0800a09c
 80082d4:	0800a12c 	.word	0x0800a12c

080082d8 <__mcmp>:
 80082d8:	4603      	mov	r3, r0
 80082da:	690a      	ldr	r2, [r1, #16]
 80082dc:	6900      	ldr	r0, [r0, #16]
 80082de:	b530      	push	{r4, r5, lr}
 80082e0:	1a80      	subs	r0, r0, r2
 80082e2:	d10d      	bne.n	8008300 <__mcmp+0x28>
 80082e4:	3314      	adds	r3, #20
 80082e6:	3114      	adds	r1, #20
 80082e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80082ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80082f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082f8:	4295      	cmp	r5, r2
 80082fa:	d002      	beq.n	8008302 <__mcmp+0x2a>
 80082fc:	d304      	bcc.n	8008308 <__mcmp+0x30>
 80082fe:	2001      	movs	r0, #1
 8008300:	bd30      	pop	{r4, r5, pc}
 8008302:	42a3      	cmp	r3, r4
 8008304:	d3f4      	bcc.n	80082f0 <__mcmp+0x18>
 8008306:	e7fb      	b.n	8008300 <__mcmp+0x28>
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	e7f8      	b.n	8008300 <__mcmp+0x28>
	...

08008310 <__mdiff>:
 8008310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	460c      	mov	r4, r1
 8008316:	4606      	mov	r6, r0
 8008318:	4611      	mov	r1, r2
 800831a:	4620      	mov	r0, r4
 800831c:	4692      	mov	sl, r2
 800831e:	f7ff ffdb 	bl	80082d8 <__mcmp>
 8008322:	1e05      	subs	r5, r0, #0
 8008324:	d111      	bne.n	800834a <__mdiff+0x3a>
 8008326:	4629      	mov	r1, r5
 8008328:	4630      	mov	r0, r6
 800832a:	f7ff fd11 	bl	8007d50 <_Balloc>
 800832e:	4602      	mov	r2, r0
 8008330:	b928      	cbnz	r0, 800833e <__mdiff+0x2e>
 8008332:	f240 2132 	movw	r1, #562	; 0x232
 8008336:	4b3c      	ldr	r3, [pc, #240]	; (8008428 <__mdiff+0x118>)
 8008338:	483c      	ldr	r0, [pc, #240]	; (800842c <__mdiff+0x11c>)
 800833a:	f001 f827 	bl	800938c <__assert_func>
 800833e:	2301      	movs	r3, #1
 8008340:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008344:	4610      	mov	r0, r2
 8008346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834a:	bfa4      	itt	ge
 800834c:	4653      	movge	r3, sl
 800834e:	46a2      	movge	sl, r4
 8008350:	4630      	mov	r0, r6
 8008352:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008356:	bfa6      	itte	ge
 8008358:	461c      	movge	r4, r3
 800835a:	2500      	movge	r5, #0
 800835c:	2501      	movlt	r5, #1
 800835e:	f7ff fcf7 	bl	8007d50 <_Balloc>
 8008362:	4602      	mov	r2, r0
 8008364:	b918      	cbnz	r0, 800836e <__mdiff+0x5e>
 8008366:	f44f 7110 	mov.w	r1, #576	; 0x240
 800836a:	4b2f      	ldr	r3, [pc, #188]	; (8008428 <__mdiff+0x118>)
 800836c:	e7e4      	b.n	8008338 <__mdiff+0x28>
 800836e:	f100 0814 	add.w	r8, r0, #20
 8008372:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008376:	60c5      	str	r5, [r0, #12]
 8008378:	f04f 0c00 	mov.w	ip, #0
 800837c:	f10a 0514 	add.w	r5, sl, #20
 8008380:	f10a 0010 	add.w	r0, sl, #16
 8008384:	46c2      	mov	sl, r8
 8008386:	6926      	ldr	r6, [r4, #16]
 8008388:	f104 0914 	add.w	r9, r4, #20
 800838c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008390:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008394:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008398:	f859 3b04 	ldr.w	r3, [r9], #4
 800839c:	fa1f f18b 	uxth.w	r1, fp
 80083a0:	4461      	add	r1, ip
 80083a2:	fa1f fc83 	uxth.w	ip, r3
 80083a6:	0c1b      	lsrs	r3, r3, #16
 80083a8:	eba1 010c 	sub.w	r1, r1, ip
 80083ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083b0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80083b4:	b289      	uxth	r1, r1
 80083b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80083ba:	454e      	cmp	r6, r9
 80083bc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80083c0:	f84a 3b04 	str.w	r3, [sl], #4
 80083c4:	d8e6      	bhi.n	8008394 <__mdiff+0x84>
 80083c6:	1b33      	subs	r3, r6, r4
 80083c8:	3b15      	subs	r3, #21
 80083ca:	f023 0303 	bic.w	r3, r3, #3
 80083ce:	3415      	adds	r4, #21
 80083d0:	3304      	adds	r3, #4
 80083d2:	42a6      	cmp	r6, r4
 80083d4:	bf38      	it	cc
 80083d6:	2304      	movcc	r3, #4
 80083d8:	441d      	add	r5, r3
 80083da:	4443      	add	r3, r8
 80083dc:	461e      	mov	r6, r3
 80083de:	462c      	mov	r4, r5
 80083e0:	4574      	cmp	r4, lr
 80083e2:	d30e      	bcc.n	8008402 <__mdiff+0xf2>
 80083e4:	f10e 0103 	add.w	r1, lr, #3
 80083e8:	1b49      	subs	r1, r1, r5
 80083ea:	f021 0103 	bic.w	r1, r1, #3
 80083ee:	3d03      	subs	r5, #3
 80083f0:	45ae      	cmp	lr, r5
 80083f2:	bf38      	it	cc
 80083f4:	2100      	movcc	r1, #0
 80083f6:	4419      	add	r1, r3
 80083f8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80083fc:	b18b      	cbz	r3, 8008422 <__mdiff+0x112>
 80083fe:	6117      	str	r7, [r2, #16]
 8008400:	e7a0      	b.n	8008344 <__mdiff+0x34>
 8008402:	f854 8b04 	ldr.w	r8, [r4], #4
 8008406:	fa1f f188 	uxth.w	r1, r8
 800840a:	4461      	add	r1, ip
 800840c:	1408      	asrs	r0, r1, #16
 800840e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008412:	b289      	uxth	r1, r1
 8008414:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008418:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800841c:	f846 1b04 	str.w	r1, [r6], #4
 8008420:	e7de      	b.n	80083e0 <__mdiff+0xd0>
 8008422:	3f01      	subs	r7, #1
 8008424:	e7e8      	b.n	80083f8 <__mdiff+0xe8>
 8008426:	bf00      	nop
 8008428:	0800a09c 	.word	0x0800a09c
 800842c:	0800a12c 	.word	0x0800a12c

08008430 <__ulp>:
 8008430:	4b11      	ldr	r3, [pc, #68]	; (8008478 <__ulp+0x48>)
 8008432:	400b      	ands	r3, r1
 8008434:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008438:	2b00      	cmp	r3, #0
 800843a:	dd02      	ble.n	8008442 <__ulp+0x12>
 800843c:	2000      	movs	r0, #0
 800843e:	4619      	mov	r1, r3
 8008440:	4770      	bx	lr
 8008442:	425b      	negs	r3, r3
 8008444:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008448:	f04f 0000 	mov.w	r0, #0
 800844c:	f04f 0100 	mov.w	r1, #0
 8008450:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008454:	da04      	bge.n	8008460 <__ulp+0x30>
 8008456:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800845a:	fa43 f102 	asr.w	r1, r3, r2
 800845e:	4770      	bx	lr
 8008460:	f1a2 0314 	sub.w	r3, r2, #20
 8008464:	2b1e      	cmp	r3, #30
 8008466:	bfd6      	itet	le
 8008468:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800846c:	2301      	movgt	r3, #1
 800846e:	fa22 f303 	lsrle.w	r3, r2, r3
 8008472:	4618      	mov	r0, r3
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	7ff00000 	.word	0x7ff00000

0800847c <__b2d>:
 800847c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008480:	6907      	ldr	r7, [r0, #16]
 8008482:	f100 0914 	add.w	r9, r0, #20
 8008486:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800848a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800848e:	f1a7 0804 	sub.w	r8, r7, #4
 8008492:	4630      	mov	r0, r6
 8008494:	f7ff fd52 	bl	8007f3c <__hi0bits>
 8008498:	f1c0 0320 	rsb	r3, r0, #32
 800849c:	280a      	cmp	r0, #10
 800849e:	600b      	str	r3, [r1, #0]
 80084a0:	491f      	ldr	r1, [pc, #124]	; (8008520 <__b2d+0xa4>)
 80084a2:	dc17      	bgt.n	80084d4 <__b2d+0x58>
 80084a4:	45c1      	cmp	r9, r8
 80084a6:	bf28      	it	cs
 80084a8:	2200      	movcs	r2, #0
 80084aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80084ae:	fa26 f30c 	lsr.w	r3, r6, ip
 80084b2:	bf38      	it	cc
 80084b4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80084b8:	ea43 0501 	orr.w	r5, r3, r1
 80084bc:	f100 0315 	add.w	r3, r0, #21
 80084c0:	fa06 f303 	lsl.w	r3, r6, r3
 80084c4:	fa22 f20c 	lsr.w	r2, r2, ip
 80084c8:	ea43 0402 	orr.w	r4, r3, r2
 80084cc:	4620      	mov	r0, r4
 80084ce:	4629      	mov	r1, r5
 80084d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084d4:	45c1      	cmp	r9, r8
 80084d6:	bf2e      	itee	cs
 80084d8:	2200      	movcs	r2, #0
 80084da:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80084de:	f1a7 0808 	subcc.w	r8, r7, #8
 80084e2:	f1b0 030b 	subs.w	r3, r0, #11
 80084e6:	d016      	beq.n	8008516 <__b2d+0x9a>
 80084e8:	f1c3 0720 	rsb	r7, r3, #32
 80084ec:	fa22 f107 	lsr.w	r1, r2, r7
 80084f0:	45c8      	cmp	r8, r9
 80084f2:	fa06 f603 	lsl.w	r6, r6, r3
 80084f6:	ea46 0601 	orr.w	r6, r6, r1
 80084fa:	bf94      	ite	ls
 80084fc:	2100      	movls	r1, #0
 80084fe:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008502:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008506:	fa02 f003 	lsl.w	r0, r2, r3
 800850a:	40f9      	lsrs	r1, r7
 800850c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008510:	ea40 0401 	orr.w	r4, r0, r1
 8008514:	e7da      	b.n	80084cc <__b2d+0x50>
 8008516:	4614      	mov	r4, r2
 8008518:	ea46 0501 	orr.w	r5, r6, r1
 800851c:	e7d6      	b.n	80084cc <__b2d+0x50>
 800851e:	bf00      	nop
 8008520:	3ff00000 	.word	0x3ff00000

08008524 <__d2b>:
 8008524:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008528:	2101      	movs	r1, #1
 800852a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800852e:	4690      	mov	r8, r2
 8008530:	461d      	mov	r5, r3
 8008532:	f7ff fc0d 	bl	8007d50 <_Balloc>
 8008536:	4604      	mov	r4, r0
 8008538:	b930      	cbnz	r0, 8008548 <__d2b+0x24>
 800853a:	4602      	mov	r2, r0
 800853c:	f240 310a 	movw	r1, #778	; 0x30a
 8008540:	4b24      	ldr	r3, [pc, #144]	; (80085d4 <__d2b+0xb0>)
 8008542:	4825      	ldr	r0, [pc, #148]	; (80085d8 <__d2b+0xb4>)
 8008544:	f000 ff22 	bl	800938c <__assert_func>
 8008548:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800854c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008550:	bb2d      	cbnz	r5, 800859e <__d2b+0x7a>
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	f1b8 0300 	subs.w	r3, r8, #0
 8008558:	d026      	beq.n	80085a8 <__d2b+0x84>
 800855a:	4668      	mov	r0, sp
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	f7ff fd0d 	bl	8007f7c <__lo0bits>
 8008562:	9900      	ldr	r1, [sp, #0]
 8008564:	b1f0      	cbz	r0, 80085a4 <__d2b+0x80>
 8008566:	9a01      	ldr	r2, [sp, #4]
 8008568:	f1c0 0320 	rsb	r3, r0, #32
 800856c:	fa02 f303 	lsl.w	r3, r2, r3
 8008570:	430b      	orrs	r3, r1
 8008572:	40c2      	lsrs	r2, r0
 8008574:	6163      	str	r3, [r4, #20]
 8008576:	9201      	str	r2, [sp, #4]
 8008578:	9b01      	ldr	r3, [sp, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	bf14      	ite	ne
 800857e:	2102      	movne	r1, #2
 8008580:	2101      	moveq	r1, #1
 8008582:	61a3      	str	r3, [r4, #24]
 8008584:	6121      	str	r1, [r4, #16]
 8008586:	b1c5      	cbz	r5, 80085ba <__d2b+0x96>
 8008588:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800858c:	4405      	add	r5, r0
 800858e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008592:	603d      	str	r5, [r7, #0]
 8008594:	6030      	str	r0, [r6, #0]
 8008596:	4620      	mov	r0, r4
 8008598:	b002      	add	sp, #8
 800859a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800859e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085a2:	e7d6      	b.n	8008552 <__d2b+0x2e>
 80085a4:	6161      	str	r1, [r4, #20]
 80085a6:	e7e7      	b.n	8008578 <__d2b+0x54>
 80085a8:	a801      	add	r0, sp, #4
 80085aa:	f7ff fce7 	bl	8007f7c <__lo0bits>
 80085ae:	2101      	movs	r1, #1
 80085b0:	9b01      	ldr	r3, [sp, #4]
 80085b2:	6121      	str	r1, [r4, #16]
 80085b4:	6163      	str	r3, [r4, #20]
 80085b6:	3020      	adds	r0, #32
 80085b8:	e7e5      	b.n	8008586 <__d2b+0x62>
 80085ba:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80085be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085c2:	6038      	str	r0, [r7, #0]
 80085c4:	6918      	ldr	r0, [r3, #16]
 80085c6:	f7ff fcb9 	bl	8007f3c <__hi0bits>
 80085ca:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80085ce:	6031      	str	r1, [r6, #0]
 80085d0:	e7e1      	b.n	8008596 <__d2b+0x72>
 80085d2:	bf00      	nop
 80085d4:	0800a09c 	.word	0x0800a09c
 80085d8:	0800a12c 	.word	0x0800a12c

080085dc <__ratio>:
 80085dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	4688      	mov	r8, r1
 80085e2:	4669      	mov	r1, sp
 80085e4:	4681      	mov	r9, r0
 80085e6:	f7ff ff49 	bl	800847c <__b2d>
 80085ea:	460f      	mov	r7, r1
 80085ec:	4604      	mov	r4, r0
 80085ee:	460d      	mov	r5, r1
 80085f0:	4640      	mov	r0, r8
 80085f2:	a901      	add	r1, sp, #4
 80085f4:	f7ff ff42 	bl	800847c <__b2d>
 80085f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008600:	468b      	mov	fp, r1
 8008602:	eba3 0c02 	sub.w	ip, r3, r2
 8008606:	e9dd 3200 	ldrd	r3, r2, [sp]
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008610:	2b00      	cmp	r3, #0
 8008612:	bfd5      	itete	le
 8008614:	460a      	movle	r2, r1
 8008616:	462a      	movgt	r2, r5
 8008618:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800861c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008620:	bfd8      	it	le
 8008622:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008626:	465b      	mov	r3, fp
 8008628:	4602      	mov	r2, r0
 800862a:	4639      	mov	r1, r7
 800862c:	4620      	mov	r0, r4
 800862e:	f7f8 f87d 	bl	800072c <__aeabi_ddiv>
 8008632:	b003      	add	sp, #12
 8008634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008638 <__copybits>:
 8008638:	3901      	subs	r1, #1
 800863a:	b570      	push	{r4, r5, r6, lr}
 800863c:	1149      	asrs	r1, r1, #5
 800863e:	6914      	ldr	r4, [r2, #16]
 8008640:	3101      	adds	r1, #1
 8008642:	f102 0314 	add.w	r3, r2, #20
 8008646:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800864a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800864e:	1f05      	subs	r5, r0, #4
 8008650:	42a3      	cmp	r3, r4
 8008652:	d30c      	bcc.n	800866e <__copybits+0x36>
 8008654:	1aa3      	subs	r3, r4, r2
 8008656:	3b11      	subs	r3, #17
 8008658:	f023 0303 	bic.w	r3, r3, #3
 800865c:	3211      	adds	r2, #17
 800865e:	42a2      	cmp	r2, r4
 8008660:	bf88      	it	hi
 8008662:	2300      	movhi	r3, #0
 8008664:	4418      	add	r0, r3
 8008666:	2300      	movs	r3, #0
 8008668:	4288      	cmp	r0, r1
 800866a:	d305      	bcc.n	8008678 <__copybits+0x40>
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008672:	f845 6f04 	str.w	r6, [r5, #4]!
 8008676:	e7eb      	b.n	8008650 <__copybits+0x18>
 8008678:	f840 3b04 	str.w	r3, [r0], #4
 800867c:	e7f4      	b.n	8008668 <__copybits+0x30>

0800867e <__any_on>:
 800867e:	f100 0214 	add.w	r2, r0, #20
 8008682:	6900      	ldr	r0, [r0, #16]
 8008684:	114b      	asrs	r3, r1, #5
 8008686:	4298      	cmp	r0, r3
 8008688:	b510      	push	{r4, lr}
 800868a:	db11      	blt.n	80086b0 <__any_on+0x32>
 800868c:	dd0a      	ble.n	80086a4 <__any_on+0x26>
 800868e:	f011 011f 	ands.w	r1, r1, #31
 8008692:	d007      	beq.n	80086a4 <__any_on+0x26>
 8008694:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008698:	fa24 f001 	lsr.w	r0, r4, r1
 800869c:	fa00 f101 	lsl.w	r1, r0, r1
 80086a0:	428c      	cmp	r4, r1
 80086a2:	d10b      	bne.n	80086bc <__any_on+0x3e>
 80086a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d803      	bhi.n	80086b4 <__any_on+0x36>
 80086ac:	2000      	movs	r0, #0
 80086ae:	bd10      	pop	{r4, pc}
 80086b0:	4603      	mov	r3, r0
 80086b2:	e7f7      	b.n	80086a4 <__any_on+0x26>
 80086b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086b8:	2900      	cmp	r1, #0
 80086ba:	d0f5      	beq.n	80086a8 <__any_on+0x2a>
 80086bc:	2001      	movs	r0, #1
 80086be:	e7f6      	b.n	80086ae <__any_on+0x30>

080086c0 <_calloc_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	fb02 f501 	mul.w	r5, r2, r1
 80086c6:	4629      	mov	r1, r5
 80086c8:	f000 f854 	bl	8008774 <_malloc_r>
 80086cc:	4604      	mov	r4, r0
 80086ce:	b118      	cbz	r0, 80086d8 <_calloc_r+0x18>
 80086d0:	462a      	mov	r2, r5
 80086d2:	2100      	movs	r1, #0
 80086d4:	f7fc fb3a 	bl	8004d4c <memset>
 80086d8:	4620      	mov	r0, r4
 80086da:	bd38      	pop	{r3, r4, r5, pc}

080086dc <_free_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4605      	mov	r5, r0
 80086e0:	2900      	cmp	r1, #0
 80086e2:	d043      	beq.n	800876c <_free_r+0x90>
 80086e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e8:	1f0c      	subs	r4, r1, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	bfb8      	it	lt
 80086ee:	18e4      	addlt	r4, r4, r3
 80086f0:	f001 f850 	bl	8009794 <__malloc_lock>
 80086f4:	4a1e      	ldr	r2, [pc, #120]	; (8008770 <_free_r+0x94>)
 80086f6:	6813      	ldr	r3, [r2, #0]
 80086f8:	4610      	mov	r0, r2
 80086fa:	b933      	cbnz	r3, 800870a <_free_r+0x2e>
 80086fc:	6063      	str	r3, [r4, #4]
 80086fe:	6014      	str	r4, [r2, #0]
 8008700:	4628      	mov	r0, r5
 8008702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008706:	f001 b84b 	b.w	80097a0 <__malloc_unlock>
 800870a:	42a3      	cmp	r3, r4
 800870c:	d90a      	bls.n	8008724 <_free_r+0x48>
 800870e:	6821      	ldr	r1, [r4, #0]
 8008710:	1862      	adds	r2, r4, r1
 8008712:	4293      	cmp	r3, r2
 8008714:	bf01      	itttt	eq
 8008716:	681a      	ldreq	r2, [r3, #0]
 8008718:	685b      	ldreq	r3, [r3, #4]
 800871a:	1852      	addeq	r2, r2, r1
 800871c:	6022      	streq	r2, [r4, #0]
 800871e:	6063      	str	r3, [r4, #4]
 8008720:	6004      	str	r4, [r0, #0]
 8008722:	e7ed      	b.n	8008700 <_free_r+0x24>
 8008724:	461a      	mov	r2, r3
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	b10b      	cbz	r3, 800872e <_free_r+0x52>
 800872a:	42a3      	cmp	r3, r4
 800872c:	d9fa      	bls.n	8008724 <_free_r+0x48>
 800872e:	6811      	ldr	r1, [r2, #0]
 8008730:	1850      	adds	r0, r2, r1
 8008732:	42a0      	cmp	r0, r4
 8008734:	d10b      	bne.n	800874e <_free_r+0x72>
 8008736:	6820      	ldr	r0, [r4, #0]
 8008738:	4401      	add	r1, r0
 800873a:	1850      	adds	r0, r2, r1
 800873c:	4283      	cmp	r3, r0
 800873e:	6011      	str	r1, [r2, #0]
 8008740:	d1de      	bne.n	8008700 <_free_r+0x24>
 8008742:	6818      	ldr	r0, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	4401      	add	r1, r0
 8008748:	6011      	str	r1, [r2, #0]
 800874a:	6053      	str	r3, [r2, #4]
 800874c:	e7d8      	b.n	8008700 <_free_r+0x24>
 800874e:	d902      	bls.n	8008756 <_free_r+0x7a>
 8008750:	230c      	movs	r3, #12
 8008752:	602b      	str	r3, [r5, #0]
 8008754:	e7d4      	b.n	8008700 <_free_r+0x24>
 8008756:	6820      	ldr	r0, [r4, #0]
 8008758:	1821      	adds	r1, r4, r0
 800875a:	428b      	cmp	r3, r1
 800875c:	bf01      	itttt	eq
 800875e:	6819      	ldreq	r1, [r3, #0]
 8008760:	685b      	ldreq	r3, [r3, #4]
 8008762:	1809      	addeq	r1, r1, r0
 8008764:	6021      	streq	r1, [r4, #0]
 8008766:	6063      	str	r3, [r4, #4]
 8008768:	6054      	str	r4, [r2, #4]
 800876a:	e7c9      	b.n	8008700 <_free_r+0x24>
 800876c:	bd38      	pop	{r3, r4, r5, pc}
 800876e:	bf00      	nop
 8008770:	20000214 	.word	0x20000214

08008774 <_malloc_r>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	1ccd      	adds	r5, r1, #3
 8008778:	f025 0503 	bic.w	r5, r5, #3
 800877c:	3508      	adds	r5, #8
 800877e:	2d0c      	cmp	r5, #12
 8008780:	bf38      	it	cc
 8008782:	250c      	movcc	r5, #12
 8008784:	2d00      	cmp	r5, #0
 8008786:	4606      	mov	r6, r0
 8008788:	db01      	blt.n	800878e <_malloc_r+0x1a>
 800878a:	42a9      	cmp	r1, r5
 800878c:	d903      	bls.n	8008796 <_malloc_r+0x22>
 800878e:	230c      	movs	r3, #12
 8008790:	6033      	str	r3, [r6, #0]
 8008792:	2000      	movs	r0, #0
 8008794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008796:	f000 fffd 	bl	8009794 <__malloc_lock>
 800879a:	4921      	ldr	r1, [pc, #132]	; (8008820 <_malloc_r+0xac>)
 800879c:	680a      	ldr	r2, [r1, #0]
 800879e:	4614      	mov	r4, r2
 80087a0:	b99c      	cbnz	r4, 80087ca <_malloc_r+0x56>
 80087a2:	4f20      	ldr	r7, [pc, #128]	; (8008824 <_malloc_r+0xb0>)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	b923      	cbnz	r3, 80087b2 <_malloc_r+0x3e>
 80087a8:	4621      	mov	r1, r4
 80087aa:	4630      	mov	r0, r6
 80087ac:	f000 fcce 	bl	800914c <_sbrk_r>
 80087b0:	6038      	str	r0, [r7, #0]
 80087b2:	4629      	mov	r1, r5
 80087b4:	4630      	mov	r0, r6
 80087b6:	f000 fcc9 	bl	800914c <_sbrk_r>
 80087ba:	1c43      	adds	r3, r0, #1
 80087bc:	d123      	bne.n	8008806 <_malloc_r+0x92>
 80087be:	230c      	movs	r3, #12
 80087c0:	4630      	mov	r0, r6
 80087c2:	6033      	str	r3, [r6, #0]
 80087c4:	f000 ffec 	bl	80097a0 <__malloc_unlock>
 80087c8:	e7e3      	b.n	8008792 <_malloc_r+0x1e>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	1b5b      	subs	r3, r3, r5
 80087ce:	d417      	bmi.n	8008800 <_malloc_r+0x8c>
 80087d0:	2b0b      	cmp	r3, #11
 80087d2:	d903      	bls.n	80087dc <_malloc_r+0x68>
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	441c      	add	r4, r3
 80087d8:	6025      	str	r5, [r4, #0]
 80087da:	e004      	b.n	80087e6 <_malloc_r+0x72>
 80087dc:	6863      	ldr	r3, [r4, #4]
 80087de:	42a2      	cmp	r2, r4
 80087e0:	bf0c      	ite	eq
 80087e2:	600b      	streq	r3, [r1, #0]
 80087e4:	6053      	strne	r3, [r2, #4]
 80087e6:	4630      	mov	r0, r6
 80087e8:	f000 ffda 	bl	80097a0 <__malloc_unlock>
 80087ec:	f104 000b 	add.w	r0, r4, #11
 80087f0:	1d23      	adds	r3, r4, #4
 80087f2:	f020 0007 	bic.w	r0, r0, #7
 80087f6:	1ac2      	subs	r2, r0, r3
 80087f8:	d0cc      	beq.n	8008794 <_malloc_r+0x20>
 80087fa:	1a1b      	subs	r3, r3, r0
 80087fc:	50a3      	str	r3, [r4, r2]
 80087fe:	e7c9      	b.n	8008794 <_malloc_r+0x20>
 8008800:	4622      	mov	r2, r4
 8008802:	6864      	ldr	r4, [r4, #4]
 8008804:	e7cc      	b.n	80087a0 <_malloc_r+0x2c>
 8008806:	1cc4      	adds	r4, r0, #3
 8008808:	f024 0403 	bic.w	r4, r4, #3
 800880c:	42a0      	cmp	r0, r4
 800880e:	d0e3      	beq.n	80087d8 <_malloc_r+0x64>
 8008810:	1a21      	subs	r1, r4, r0
 8008812:	4630      	mov	r0, r6
 8008814:	f000 fc9a 	bl	800914c <_sbrk_r>
 8008818:	3001      	adds	r0, #1
 800881a:	d1dd      	bne.n	80087d8 <_malloc_r+0x64>
 800881c:	e7cf      	b.n	80087be <_malloc_r+0x4a>
 800881e:	bf00      	nop
 8008820:	20000214 	.word	0x20000214
 8008824:	20000218 	.word	0x20000218

08008828 <__ssputs_r>:
 8008828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800882c:	688e      	ldr	r6, [r1, #8]
 800882e:	4682      	mov	sl, r0
 8008830:	429e      	cmp	r6, r3
 8008832:	460c      	mov	r4, r1
 8008834:	4690      	mov	r8, r2
 8008836:	461f      	mov	r7, r3
 8008838:	d838      	bhi.n	80088ac <__ssputs_r+0x84>
 800883a:	898a      	ldrh	r2, [r1, #12]
 800883c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008840:	d032      	beq.n	80088a8 <__ssputs_r+0x80>
 8008842:	6825      	ldr	r5, [r4, #0]
 8008844:	6909      	ldr	r1, [r1, #16]
 8008846:	3301      	adds	r3, #1
 8008848:	eba5 0901 	sub.w	r9, r5, r1
 800884c:	6965      	ldr	r5, [r4, #20]
 800884e:	444b      	add	r3, r9
 8008850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008854:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008858:	106d      	asrs	r5, r5, #1
 800885a:	429d      	cmp	r5, r3
 800885c:	bf38      	it	cc
 800885e:	461d      	movcc	r5, r3
 8008860:	0553      	lsls	r3, r2, #21
 8008862:	d531      	bpl.n	80088c8 <__ssputs_r+0xa0>
 8008864:	4629      	mov	r1, r5
 8008866:	f7ff ff85 	bl	8008774 <_malloc_r>
 800886a:	4606      	mov	r6, r0
 800886c:	b950      	cbnz	r0, 8008884 <__ssputs_r+0x5c>
 800886e:	230c      	movs	r3, #12
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
 8008874:	f8ca 3000 	str.w	r3, [sl]
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800887e:	81a3      	strh	r3, [r4, #12]
 8008880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008884:	464a      	mov	r2, r9
 8008886:	6921      	ldr	r1, [r4, #16]
 8008888:	f7ff fa54 	bl	8007d34 <memcpy>
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008896:	81a3      	strh	r3, [r4, #12]
 8008898:	6126      	str	r6, [r4, #16]
 800889a:	444e      	add	r6, r9
 800889c:	6026      	str	r6, [r4, #0]
 800889e:	463e      	mov	r6, r7
 80088a0:	6165      	str	r5, [r4, #20]
 80088a2:	eba5 0509 	sub.w	r5, r5, r9
 80088a6:	60a5      	str	r5, [r4, #8]
 80088a8:	42be      	cmp	r6, r7
 80088aa:	d900      	bls.n	80088ae <__ssputs_r+0x86>
 80088ac:	463e      	mov	r6, r7
 80088ae:	4632      	mov	r2, r6
 80088b0:	4641      	mov	r1, r8
 80088b2:	6820      	ldr	r0, [r4, #0]
 80088b4:	f000 ff54 	bl	8009760 <memmove>
 80088b8:	68a3      	ldr	r3, [r4, #8]
 80088ba:	6822      	ldr	r2, [r4, #0]
 80088bc:	1b9b      	subs	r3, r3, r6
 80088be:	4432      	add	r2, r6
 80088c0:	2000      	movs	r0, #0
 80088c2:	60a3      	str	r3, [r4, #8]
 80088c4:	6022      	str	r2, [r4, #0]
 80088c6:	e7db      	b.n	8008880 <__ssputs_r+0x58>
 80088c8:	462a      	mov	r2, r5
 80088ca:	f000 ff6f 	bl	80097ac <_realloc_r>
 80088ce:	4606      	mov	r6, r0
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d1e1      	bne.n	8008898 <__ssputs_r+0x70>
 80088d4:	4650      	mov	r0, sl
 80088d6:	6921      	ldr	r1, [r4, #16]
 80088d8:	f7ff ff00 	bl	80086dc <_free_r>
 80088dc:	e7c7      	b.n	800886e <__ssputs_r+0x46>
	...

080088e0 <_svfiprintf_r>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	4698      	mov	r8, r3
 80088e6:	898b      	ldrh	r3, [r1, #12]
 80088e8:	4607      	mov	r7, r0
 80088ea:	061b      	lsls	r3, r3, #24
 80088ec:	460d      	mov	r5, r1
 80088ee:	4614      	mov	r4, r2
 80088f0:	b09d      	sub	sp, #116	; 0x74
 80088f2:	d50e      	bpl.n	8008912 <_svfiprintf_r+0x32>
 80088f4:	690b      	ldr	r3, [r1, #16]
 80088f6:	b963      	cbnz	r3, 8008912 <_svfiprintf_r+0x32>
 80088f8:	2140      	movs	r1, #64	; 0x40
 80088fa:	f7ff ff3b 	bl	8008774 <_malloc_r>
 80088fe:	6028      	str	r0, [r5, #0]
 8008900:	6128      	str	r0, [r5, #16]
 8008902:	b920      	cbnz	r0, 800890e <_svfiprintf_r+0x2e>
 8008904:	230c      	movs	r3, #12
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	e0d1      	b.n	8008ab2 <_svfiprintf_r+0x1d2>
 800890e:	2340      	movs	r3, #64	; 0x40
 8008910:	616b      	str	r3, [r5, #20]
 8008912:	2300      	movs	r3, #0
 8008914:	9309      	str	r3, [sp, #36]	; 0x24
 8008916:	2320      	movs	r3, #32
 8008918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800891c:	2330      	movs	r3, #48	; 0x30
 800891e:	f04f 0901 	mov.w	r9, #1
 8008922:	f8cd 800c 	str.w	r8, [sp, #12]
 8008926:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008acc <_svfiprintf_r+0x1ec>
 800892a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800892e:	4623      	mov	r3, r4
 8008930:	469a      	mov	sl, r3
 8008932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008936:	b10a      	cbz	r2, 800893c <_svfiprintf_r+0x5c>
 8008938:	2a25      	cmp	r2, #37	; 0x25
 800893a:	d1f9      	bne.n	8008930 <_svfiprintf_r+0x50>
 800893c:	ebba 0b04 	subs.w	fp, sl, r4
 8008940:	d00b      	beq.n	800895a <_svfiprintf_r+0x7a>
 8008942:	465b      	mov	r3, fp
 8008944:	4622      	mov	r2, r4
 8008946:	4629      	mov	r1, r5
 8008948:	4638      	mov	r0, r7
 800894a:	f7ff ff6d 	bl	8008828 <__ssputs_r>
 800894e:	3001      	adds	r0, #1
 8008950:	f000 80aa 	beq.w	8008aa8 <_svfiprintf_r+0x1c8>
 8008954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008956:	445a      	add	r2, fp
 8008958:	9209      	str	r2, [sp, #36]	; 0x24
 800895a:	f89a 3000 	ldrb.w	r3, [sl]
 800895e:	2b00      	cmp	r3, #0
 8008960:	f000 80a2 	beq.w	8008aa8 <_svfiprintf_r+0x1c8>
 8008964:	2300      	movs	r3, #0
 8008966:	f04f 32ff 	mov.w	r2, #4294967295
 800896a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800896e:	f10a 0a01 	add.w	sl, sl, #1
 8008972:	9304      	str	r3, [sp, #16]
 8008974:	9307      	str	r3, [sp, #28]
 8008976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800897a:	931a      	str	r3, [sp, #104]	; 0x68
 800897c:	4654      	mov	r4, sl
 800897e:	2205      	movs	r2, #5
 8008980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008984:	4851      	ldr	r0, [pc, #324]	; (8008acc <_svfiprintf_r+0x1ec>)
 8008986:	f7ff f9c7 	bl	8007d18 <memchr>
 800898a:	9a04      	ldr	r2, [sp, #16]
 800898c:	b9d8      	cbnz	r0, 80089c6 <_svfiprintf_r+0xe6>
 800898e:	06d0      	lsls	r0, r2, #27
 8008990:	bf44      	itt	mi
 8008992:	2320      	movmi	r3, #32
 8008994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008998:	0711      	lsls	r1, r2, #28
 800899a:	bf44      	itt	mi
 800899c:	232b      	movmi	r3, #43	; 0x2b
 800899e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089a2:	f89a 3000 	ldrb.w	r3, [sl]
 80089a6:	2b2a      	cmp	r3, #42	; 0x2a
 80089a8:	d015      	beq.n	80089d6 <_svfiprintf_r+0xf6>
 80089aa:	4654      	mov	r4, sl
 80089ac:	2000      	movs	r0, #0
 80089ae:	f04f 0c0a 	mov.w	ip, #10
 80089b2:	9a07      	ldr	r2, [sp, #28]
 80089b4:	4621      	mov	r1, r4
 80089b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ba:	3b30      	subs	r3, #48	; 0x30
 80089bc:	2b09      	cmp	r3, #9
 80089be:	d94e      	bls.n	8008a5e <_svfiprintf_r+0x17e>
 80089c0:	b1b0      	cbz	r0, 80089f0 <_svfiprintf_r+0x110>
 80089c2:	9207      	str	r2, [sp, #28]
 80089c4:	e014      	b.n	80089f0 <_svfiprintf_r+0x110>
 80089c6:	eba0 0308 	sub.w	r3, r0, r8
 80089ca:	fa09 f303 	lsl.w	r3, r9, r3
 80089ce:	4313      	orrs	r3, r2
 80089d0:	46a2      	mov	sl, r4
 80089d2:	9304      	str	r3, [sp, #16]
 80089d4:	e7d2      	b.n	800897c <_svfiprintf_r+0x9c>
 80089d6:	9b03      	ldr	r3, [sp, #12]
 80089d8:	1d19      	adds	r1, r3, #4
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	9103      	str	r1, [sp, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bfbb      	ittet	lt
 80089e2:	425b      	neglt	r3, r3
 80089e4:	f042 0202 	orrlt.w	r2, r2, #2
 80089e8:	9307      	strge	r3, [sp, #28]
 80089ea:	9307      	strlt	r3, [sp, #28]
 80089ec:	bfb8      	it	lt
 80089ee:	9204      	strlt	r2, [sp, #16]
 80089f0:	7823      	ldrb	r3, [r4, #0]
 80089f2:	2b2e      	cmp	r3, #46	; 0x2e
 80089f4:	d10c      	bne.n	8008a10 <_svfiprintf_r+0x130>
 80089f6:	7863      	ldrb	r3, [r4, #1]
 80089f8:	2b2a      	cmp	r3, #42	; 0x2a
 80089fa:	d135      	bne.n	8008a68 <_svfiprintf_r+0x188>
 80089fc:	9b03      	ldr	r3, [sp, #12]
 80089fe:	3402      	adds	r4, #2
 8008a00:	1d1a      	adds	r2, r3, #4
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	9203      	str	r2, [sp, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	bfb8      	it	lt
 8008a0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a0e:	9305      	str	r3, [sp, #20]
 8008a10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008adc <_svfiprintf_r+0x1fc>
 8008a14:	2203      	movs	r2, #3
 8008a16:	4650      	mov	r0, sl
 8008a18:	7821      	ldrb	r1, [r4, #0]
 8008a1a:	f7ff f97d 	bl	8007d18 <memchr>
 8008a1e:	b140      	cbz	r0, 8008a32 <_svfiprintf_r+0x152>
 8008a20:	2340      	movs	r3, #64	; 0x40
 8008a22:	eba0 000a 	sub.w	r0, r0, sl
 8008a26:	fa03 f000 	lsl.w	r0, r3, r0
 8008a2a:	9b04      	ldr	r3, [sp, #16]
 8008a2c:	3401      	adds	r4, #1
 8008a2e:	4303      	orrs	r3, r0
 8008a30:	9304      	str	r3, [sp, #16]
 8008a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a36:	2206      	movs	r2, #6
 8008a38:	4825      	ldr	r0, [pc, #148]	; (8008ad0 <_svfiprintf_r+0x1f0>)
 8008a3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a3e:	f7ff f96b 	bl	8007d18 <memchr>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d038      	beq.n	8008ab8 <_svfiprintf_r+0x1d8>
 8008a46:	4b23      	ldr	r3, [pc, #140]	; (8008ad4 <_svfiprintf_r+0x1f4>)
 8008a48:	bb1b      	cbnz	r3, 8008a92 <_svfiprintf_r+0x1b2>
 8008a4a:	9b03      	ldr	r3, [sp, #12]
 8008a4c:	3307      	adds	r3, #7
 8008a4e:	f023 0307 	bic.w	r3, r3, #7
 8008a52:	3308      	adds	r3, #8
 8008a54:	9303      	str	r3, [sp, #12]
 8008a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a58:	4433      	add	r3, r6
 8008a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a5c:	e767      	b.n	800892e <_svfiprintf_r+0x4e>
 8008a5e:	460c      	mov	r4, r1
 8008a60:	2001      	movs	r0, #1
 8008a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a66:	e7a5      	b.n	80089b4 <_svfiprintf_r+0xd4>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f04f 0c0a 	mov.w	ip, #10
 8008a6e:	4619      	mov	r1, r3
 8008a70:	3401      	adds	r4, #1
 8008a72:	9305      	str	r3, [sp, #20]
 8008a74:	4620      	mov	r0, r4
 8008a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a7a:	3a30      	subs	r2, #48	; 0x30
 8008a7c:	2a09      	cmp	r2, #9
 8008a7e:	d903      	bls.n	8008a88 <_svfiprintf_r+0x1a8>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0c5      	beq.n	8008a10 <_svfiprintf_r+0x130>
 8008a84:	9105      	str	r1, [sp, #20]
 8008a86:	e7c3      	b.n	8008a10 <_svfiprintf_r+0x130>
 8008a88:	4604      	mov	r4, r0
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a90:	e7f0      	b.n	8008a74 <_svfiprintf_r+0x194>
 8008a92:	ab03      	add	r3, sp, #12
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	462a      	mov	r2, r5
 8008a98:	4638      	mov	r0, r7
 8008a9a:	4b0f      	ldr	r3, [pc, #60]	; (8008ad8 <_svfiprintf_r+0x1f8>)
 8008a9c:	a904      	add	r1, sp, #16
 8008a9e:	f7fc f9fb 	bl	8004e98 <_printf_float>
 8008aa2:	1c42      	adds	r2, r0, #1
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	d1d6      	bne.n	8008a56 <_svfiprintf_r+0x176>
 8008aa8:	89ab      	ldrh	r3, [r5, #12]
 8008aaa:	065b      	lsls	r3, r3, #25
 8008aac:	f53f af2c 	bmi.w	8008908 <_svfiprintf_r+0x28>
 8008ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ab2:	b01d      	add	sp, #116	; 0x74
 8008ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab8:	ab03      	add	r3, sp, #12
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	462a      	mov	r2, r5
 8008abe:	4638      	mov	r0, r7
 8008ac0:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <_svfiprintf_r+0x1f8>)
 8008ac2:	a904      	add	r1, sp, #16
 8008ac4:	f7fc fc84 	bl	80053d0 <_printf_i>
 8008ac8:	e7eb      	b.n	8008aa2 <_svfiprintf_r+0x1c2>
 8008aca:	bf00      	nop
 8008acc:	0800a28c 	.word	0x0800a28c
 8008ad0:	0800a296 	.word	0x0800a296
 8008ad4:	08004e99 	.word	0x08004e99
 8008ad8:	08008829 	.word	0x08008829
 8008adc:	0800a292 	.word	0x0800a292

08008ae0 <_sungetc_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	1c4b      	adds	r3, r1, #1
 8008ae4:	4614      	mov	r4, r2
 8008ae6:	d103      	bne.n	8008af0 <_sungetc_r+0x10>
 8008ae8:	f04f 35ff 	mov.w	r5, #4294967295
 8008aec:	4628      	mov	r0, r5
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	8993      	ldrh	r3, [r2, #12]
 8008af2:	b2cd      	uxtb	r5, r1
 8008af4:	f023 0320 	bic.w	r3, r3, #32
 8008af8:	8193      	strh	r3, [r2, #12]
 8008afa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008afc:	6852      	ldr	r2, [r2, #4]
 8008afe:	b18b      	cbz	r3, 8008b24 <_sungetc_r+0x44>
 8008b00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b02:	4293      	cmp	r3, r2
 8008b04:	dd08      	ble.n	8008b18 <_sungetc_r+0x38>
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	1e5a      	subs	r2, r3, #1
 8008b0a:	6022      	str	r2, [r4, #0]
 8008b0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008b10:	6863      	ldr	r3, [r4, #4]
 8008b12:	3301      	adds	r3, #1
 8008b14:	6063      	str	r3, [r4, #4]
 8008b16:	e7e9      	b.n	8008aec <_sungetc_r+0xc>
 8008b18:	4621      	mov	r1, r4
 8008b1a:	f000 fbf1 	bl	8009300 <__submore>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d0f1      	beq.n	8008b06 <_sungetc_r+0x26>
 8008b22:	e7e1      	b.n	8008ae8 <_sungetc_r+0x8>
 8008b24:	6921      	ldr	r1, [r4, #16]
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	b151      	cbz	r1, 8008b40 <_sungetc_r+0x60>
 8008b2a:	4299      	cmp	r1, r3
 8008b2c:	d208      	bcs.n	8008b40 <_sungetc_r+0x60>
 8008b2e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008b32:	42a9      	cmp	r1, r5
 8008b34:	d104      	bne.n	8008b40 <_sungetc_r+0x60>
 8008b36:	3b01      	subs	r3, #1
 8008b38:	3201      	adds	r2, #1
 8008b3a:	6023      	str	r3, [r4, #0]
 8008b3c:	6062      	str	r2, [r4, #4]
 8008b3e:	e7d5      	b.n	8008aec <_sungetc_r+0xc>
 8008b40:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b48:	6363      	str	r3, [r4, #52]	; 0x34
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8008b4e:	4623      	mov	r3, r4
 8008b50:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	2301      	movs	r3, #1
 8008b58:	e7dc      	b.n	8008b14 <_sungetc_r+0x34>

08008b5a <__ssrefill_r>:
 8008b5a:	b510      	push	{r4, lr}
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008b60:	b169      	cbz	r1, 8008b7e <__ssrefill_r+0x24>
 8008b62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b66:	4299      	cmp	r1, r3
 8008b68:	d001      	beq.n	8008b6e <__ssrefill_r+0x14>
 8008b6a:	f7ff fdb7 	bl	80086dc <_free_r>
 8008b6e:	2000      	movs	r0, #0
 8008b70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b72:	6360      	str	r0, [r4, #52]	; 0x34
 8008b74:	6063      	str	r3, [r4, #4]
 8008b76:	b113      	cbz	r3, 8008b7e <__ssrefill_r+0x24>
 8008b78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	bd10      	pop	{r4, pc}
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	f04f 30ff 	mov.w	r0, #4294967295
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	2300      	movs	r3, #0
 8008b88:	6063      	str	r3, [r4, #4]
 8008b8a:	89a3      	ldrh	r3, [r4, #12]
 8008b8c:	f043 0320 	orr.w	r3, r3, #32
 8008b90:	81a3      	strh	r3, [r4, #12]
 8008b92:	e7f3      	b.n	8008b7c <__ssrefill_r+0x22>

08008b94 <__ssvfiscanf_r>:
 8008b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b98:	460c      	mov	r4, r1
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4606      	mov	r6, r0
 8008b9e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008ba2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008ba6:	49b3      	ldr	r1, [pc, #716]	; (8008e74 <__ssvfiscanf_r+0x2e0>)
 8008ba8:	f10d 0804 	add.w	r8, sp, #4
 8008bac:	91a0      	str	r1, [sp, #640]	; 0x280
 8008bae:	49b2      	ldr	r1, [pc, #712]	; (8008e78 <__ssvfiscanf_r+0x2e4>)
 8008bb0:	4fb2      	ldr	r7, [pc, #712]	; (8008e7c <__ssvfiscanf_r+0x2e8>)
 8008bb2:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8008e80 <__ssvfiscanf_r+0x2ec>
 8008bb6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008bba:	91a1      	str	r1, [sp, #644]	; 0x284
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	f892 a000 	ldrb.w	sl, [r2]
 8008bc2:	f1ba 0f00 	cmp.w	sl, #0
 8008bc6:	f000 8153 	beq.w	8008e70 <__ssvfiscanf_r+0x2dc>
 8008bca:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8008bce:	1c55      	adds	r5, r2, #1
 8008bd0:	f013 0308 	ands.w	r3, r3, #8
 8008bd4:	d019      	beq.n	8008c0a <__ssvfiscanf_r+0x76>
 8008bd6:	6863      	ldr	r3, [r4, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	dd0f      	ble.n	8008bfc <__ssvfiscanf_r+0x68>
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	781a      	ldrb	r2, [r3, #0]
 8008be0:	5cba      	ldrb	r2, [r7, r2]
 8008be2:	0712      	lsls	r2, r2, #28
 8008be4:	d401      	bmi.n	8008bea <__ssvfiscanf_r+0x56>
 8008be6:	462a      	mov	r2, r5
 8008be8:	e7e9      	b.n	8008bbe <__ssvfiscanf_r+0x2a>
 8008bea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008bec:	3301      	adds	r3, #1
 8008bee:	3201      	adds	r2, #1
 8008bf0:	9245      	str	r2, [sp, #276]	; 0x114
 8008bf2:	6862      	ldr	r2, [r4, #4]
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	3a01      	subs	r2, #1
 8008bf8:	6062      	str	r2, [r4, #4]
 8008bfa:	e7ec      	b.n	8008bd6 <__ssvfiscanf_r+0x42>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4630      	mov	r0, r6
 8008c00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c02:	4798      	blx	r3
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d0e9      	beq.n	8008bdc <__ssvfiscanf_r+0x48>
 8008c08:	e7ed      	b.n	8008be6 <__ssvfiscanf_r+0x52>
 8008c0a:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8008c0e:	f040 8086 	bne.w	8008d1e <__ssvfiscanf_r+0x18a>
 8008c12:	9341      	str	r3, [sp, #260]	; 0x104
 8008c14:	9343      	str	r3, [sp, #268]	; 0x10c
 8008c16:	7853      	ldrb	r3, [r2, #1]
 8008c18:	2b2a      	cmp	r3, #42	; 0x2a
 8008c1a:	bf04      	itt	eq
 8008c1c:	2310      	moveq	r3, #16
 8008c1e:	1c95      	addeq	r5, r2, #2
 8008c20:	f04f 020a 	mov.w	r2, #10
 8008c24:	bf08      	it	eq
 8008c26:	9341      	streq	r3, [sp, #260]	; 0x104
 8008c28:	46ab      	mov	fp, r5
 8008c2a:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8008c2e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008c32:	2b09      	cmp	r3, #9
 8008c34:	d91d      	bls.n	8008c72 <__ssvfiscanf_r+0xde>
 8008c36:	2203      	movs	r2, #3
 8008c38:	4891      	ldr	r0, [pc, #580]	; (8008e80 <__ssvfiscanf_r+0x2ec>)
 8008c3a:	f7ff f86d 	bl	8007d18 <memchr>
 8008c3e:	b140      	cbz	r0, 8008c52 <__ssvfiscanf_r+0xbe>
 8008c40:	2301      	movs	r3, #1
 8008c42:	465d      	mov	r5, fp
 8008c44:	eba0 0009 	sub.w	r0, r0, r9
 8008c48:	fa03 f000 	lsl.w	r0, r3, r0
 8008c4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c4e:	4318      	orrs	r0, r3
 8008c50:	9041      	str	r0, [sp, #260]	; 0x104
 8008c52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c56:	2b78      	cmp	r3, #120	; 0x78
 8008c58:	d806      	bhi.n	8008c68 <__ssvfiscanf_r+0xd4>
 8008c5a:	2b57      	cmp	r3, #87	; 0x57
 8008c5c:	d810      	bhi.n	8008c80 <__ssvfiscanf_r+0xec>
 8008c5e:	2b25      	cmp	r3, #37	; 0x25
 8008c60:	d05d      	beq.n	8008d1e <__ssvfiscanf_r+0x18a>
 8008c62:	d857      	bhi.n	8008d14 <__ssvfiscanf_r+0x180>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d075      	beq.n	8008d54 <__ssvfiscanf_r+0x1c0>
 8008c68:	2303      	movs	r3, #3
 8008c6a:	9347      	str	r3, [sp, #284]	; 0x11c
 8008c6c:	230a      	movs	r3, #10
 8008c6e:	9342      	str	r3, [sp, #264]	; 0x108
 8008c70:	e082      	b.n	8008d78 <__ssvfiscanf_r+0x1e4>
 8008c72:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008c74:	465d      	mov	r5, fp
 8008c76:	fb02 1303 	mla	r3, r2, r3, r1
 8008c7a:	3b30      	subs	r3, #48	; 0x30
 8008c7c:	9343      	str	r3, [sp, #268]	; 0x10c
 8008c7e:	e7d3      	b.n	8008c28 <__ssvfiscanf_r+0x94>
 8008c80:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008c84:	2a20      	cmp	r2, #32
 8008c86:	d8ef      	bhi.n	8008c68 <__ssvfiscanf_r+0xd4>
 8008c88:	a101      	add	r1, pc, #4	; (adr r1, 8008c90 <__ssvfiscanf_r+0xfc>)
 8008c8a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c8e:	bf00      	nop
 8008c90:	08008d63 	.word	0x08008d63
 8008c94:	08008c69 	.word	0x08008c69
 8008c98:	08008c69 	.word	0x08008c69
 8008c9c:	08008dc1 	.word	0x08008dc1
 8008ca0:	08008c69 	.word	0x08008c69
 8008ca4:	08008c69 	.word	0x08008c69
 8008ca8:	08008c69 	.word	0x08008c69
 8008cac:	08008c69 	.word	0x08008c69
 8008cb0:	08008c69 	.word	0x08008c69
 8008cb4:	08008c69 	.word	0x08008c69
 8008cb8:	08008c69 	.word	0x08008c69
 8008cbc:	08008dd7 	.word	0x08008dd7
 8008cc0:	08008dad 	.word	0x08008dad
 8008cc4:	08008d1b 	.word	0x08008d1b
 8008cc8:	08008d1b 	.word	0x08008d1b
 8008ccc:	08008d1b 	.word	0x08008d1b
 8008cd0:	08008c69 	.word	0x08008c69
 8008cd4:	08008db1 	.word	0x08008db1
 8008cd8:	08008c69 	.word	0x08008c69
 8008cdc:	08008c69 	.word	0x08008c69
 8008ce0:	08008c69 	.word	0x08008c69
 8008ce4:	08008c69 	.word	0x08008c69
 8008ce8:	08008de7 	.word	0x08008de7
 8008cec:	08008db9 	.word	0x08008db9
 8008cf0:	08008d5b 	.word	0x08008d5b
 8008cf4:	08008c69 	.word	0x08008c69
 8008cf8:	08008c69 	.word	0x08008c69
 8008cfc:	08008de3 	.word	0x08008de3
 8008d00:	08008c69 	.word	0x08008c69
 8008d04:	08008dad 	.word	0x08008dad
 8008d08:	08008c69 	.word	0x08008c69
 8008d0c:	08008c69 	.word	0x08008c69
 8008d10:	08008d63 	.word	0x08008d63
 8008d14:	3b45      	subs	r3, #69	; 0x45
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d8a6      	bhi.n	8008c68 <__ssvfiscanf_r+0xd4>
 8008d1a:	2305      	movs	r3, #5
 8008d1c:	e02b      	b.n	8008d76 <__ssvfiscanf_r+0x1e2>
 8008d1e:	6863      	ldr	r3, [r4, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dd0d      	ble.n	8008d40 <__ssvfiscanf_r+0x1ac>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	781a      	ldrb	r2, [r3, #0]
 8008d28:	4552      	cmp	r2, sl
 8008d2a:	f040 80a1 	bne.w	8008e70 <__ssvfiscanf_r+0x2dc>
 8008d2e:	3301      	adds	r3, #1
 8008d30:	6862      	ldr	r2, [r4, #4]
 8008d32:	6023      	str	r3, [r4, #0]
 8008d34:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008d36:	3a01      	subs	r2, #1
 8008d38:	3301      	adds	r3, #1
 8008d3a:	6062      	str	r2, [r4, #4]
 8008d3c:	9345      	str	r3, [sp, #276]	; 0x114
 8008d3e:	e752      	b.n	8008be6 <__ssvfiscanf_r+0x52>
 8008d40:	4621      	mov	r1, r4
 8008d42:	4630      	mov	r0, r6
 8008d44:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d46:	4798      	blx	r3
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d0eb      	beq.n	8008d24 <__ssvfiscanf_r+0x190>
 8008d4c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f040 8084 	bne.w	8008e5c <__ssvfiscanf_r+0x2c8>
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	e086      	b.n	8008e68 <__ssvfiscanf_r+0x2d4>
 8008d5a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008d5c:	f042 0220 	orr.w	r2, r2, #32
 8008d60:	9241      	str	r2, [sp, #260]	; 0x104
 8008d62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d68:	9241      	str	r2, [sp, #260]	; 0x104
 8008d6a:	2210      	movs	r2, #16
 8008d6c:	2b6f      	cmp	r3, #111	; 0x6f
 8008d6e:	bf34      	ite	cc
 8008d70:	2303      	movcc	r3, #3
 8008d72:	2304      	movcs	r3, #4
 8008d74:	9242      	str	r2, [sp, #264]	; 0x108
 8008d76:	9347      	str	r3, [sp, #284]	; 0x11c
 8008d78:	6863      	ldr	r3, [r4, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	dd41      	ble.n	8008e02 <__ssvfiscanf_r+0x26e>
 8008d7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008d80:	0659      	lsls	r1, r3, #25
 8008d82:	d404      	bmi.n	8008d8e <__ssvfiscanf_r+0x1fa>
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	781a      	ldrb	r2, [r3, #0]
 8008d88:	5cba      	ldrb	r2, [r7, r2]
 8008d8a:	0712      	lsls	r2, r2, #28
 8008d8c:	d440      	bmi.n	8008e10 <__ssvfiscanf_r+0x27c>
 8008d8e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	dc4f      	bgt.n	8008e34 <__ssvfiscanf_r+0x2a0>
 8008d94:	466b      	mov	r3, sp
 8008d96:	4622      	mov	r2, r4
 8008d98:	4630      	mov	r0, r6
 8008d9a:	a941      	add	r1, sp, #260	; 0x104
 8008d9c:	f000 f874 	bl	8008e88 <_scanf_chars>
 8008da0:	2801      	cmp	r0, #1
 8008da2:	d065      	beq.n	8008e70 <__ssvfiscanf_r+0x2dc>
 8008da4:	2802      	cmp	r0, #2
 8008da6:	f47f af1e 	bne.w	8008be6 <__ssvfiscanf_r+0x52>
 8008daa:	e7cf      	b.n	8008d4c <__ssvfiscanf_r+0x1b8>
 8008dac:	220a      	movs	r2, #10
 8008dae:	e7dd      	b.n	8008d6c <__ssvfiscanf_r+0x1d8>
 8008db0:	2300      	movs	r3, #0
 8008db2:	9342      	str	r3, [sp, #264]	; 0x108
 8008db4:	2303      	movs	r3, #3
 8008db6:	e7de      	b.n	8008d76 <__ssvfiscanf_r+0x1e2>
 8008db8:	2308      	movs	r3, #8
 8008dba:	9342      	str	r3, [sp, #264]	; 0x108
 8008dbc:	2304      	movs	r3, #4
 8008dbe:	e7da      	b.n	8008d76 <__ssvfiscanf_r+0x1e2>
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	f000 f9d2 	bl	800916c <__sccl>
 8008dc8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008dca:	4605      	mov	r5, r0
 8008dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dd0:	9341      	str	r3, [sp, #260]	; 0x104
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e7cf      	b.n	8008d76 <__ssvfiscanf_r+0x1e2>
 8008dd6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ddc:	9341      	str	r3, [sp, #260]	; 0x104
 8008dde:	2300      	movs	r3, #0
 8008de0:	e7c9      	b.n	8008d76 <__ssvfiscanf_r+0x1e2>
 8008de2:	2302      	movs	r3, #2
 8008de4:	e7c7      	b.n	8008d76 <__ssvfiscanf_r+0x1e2>
 8008de6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008de8:	06c3      	lsls	r3, r0, #27
 8008dea:	f53f aefc 	bmi.w	8008be6 <__ssvfiscanf_r+0x52>
 8008dee:	9b00      	ldr	r3, [sp, #0]
 8008df0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008df2:	1d19      	adds	r1, r3, #4
 8008df4:	9100      	str	r1, [sp, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	07c0      	lsls	r0, r0, #31
 8008dfa:	bf4c      	ite	mi
 8008dfc:	801a      	strhmi	r2, [r3, #0]
 8008dfe:	601a      	strpl	r2, [r3, #0]
 8008e00:	e6f1      	b.n	8008be6 <__ssvfiscanf_r+0x52>
 8008e02:	4621      	mov	r1, r4
 8008e04:	4630      	mov	r0, r6
 8008e06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008e08:	4798      	blx	r3
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d0b7      	beq.n	8008d7e <__ssvfiscanf_r+0x1ea>
 8008e0e:	e79d      	b.n	8008d4c <__ssvfiscanf_r+0x1b8>
 8008e10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008e12:	3201      	adds	r2, #1
 8008e14:	9245      	str	r2, [sp, #276]	; 0x114
 8008e16:	6862      	ldr	r2, [r4, #4]
 8008e18:	3a01      	subs	r2, #1
 8008e1a:	2a00      	cmp	r2, #0
 8008e1c:	6062      	str	r2, [r4, #4]
 8008e1e:	dd02      	ble.n	8008e26 <__ssvfiscanf_r+0x292>
 8008e20:	3301      	adds	r3, #1
 8008e22:	6023      	str	r3, [r4, #0]
 8008e24:	e7ae      	b.n	8008d84 <__ssvfiscanf_r+0x1f0>
 8008e26:	4621      	mov	r1, r4
 8008e28:	4630      	mov	r0, r6
 8008e2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008e2c:	4798      	blx	r3
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d0a8      	beq.n	8008d84 <__ssvfiscanf_r+0x1f0>
 8008e32:	e78b      	b.n	8008d4c <__ssvfiscanf_r+0x1b8>
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	dc06      	bgt.n	8008e46 <__ssvfiscanf_r+0x2b2>
 8008e38:	466b      	mov	r3, sp
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	a941      	add	r1, sp, #260	; 0x104
 8008e40:	f000 f87a 	bl	8008f38 <_scanf_i>
 8008e44:	e7ac      	b.n	8008da0 <__ssvfiscanf_r+0x20c>
 8008e46:	4b0f      	ldr	r3, [pc, #60]	; (8008e84 <__ssvfiscanf_r+0x2f0>)
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f43f aecc 	beq.w	8008be6 <__ssvfiscanf_r+0x52>
 8008e4e:	466b      	mov	r3, sp
 8008e50:	4622      	mov	r2, r4
 8008e52:	4630      	mov	r0, r6
 8008e54:	a941      	add	r1, sp, #260	; 0x104
 8008e56:	f7fc fbe1 	bl	800561c <_scanf_float>
 8008e5a:	e7a1      	b.n	8008da0 <__ssvfiscanf_r+0x20c>
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008e62:	bf18      	it	ne
 8008e64:	f04f 30ff 	movne.w	r0, #4294967295
 8008e68:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e70:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008e72:	e7f9      	b.n	8008e68 <__ssvfiscanf_r+0x2d4>
 8008e74:	08008ae1 	.word	0x08008ae1
 8008e78:	08008b5b 	.word	0x08008b5b
 8008e7c:	08009f19 	.word	0x08009f19
 8008e80:	0800a292 	.word	0x0800a292
 8008e84:	0800561d 	.word	0x0800561d

08008e88 <_scanf_chars>:
 8008e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e8c:	4615      	mov	r5, r2
 8008e8e:	688a      	ldr	r2, [r1, #8]
 8008e90:	4680      	mov	r8, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	b932      	cbnz	r2, 8008ea4 <_scanf_chars+0x1c>
 8008e96:	698a      	ldr	r2, [r1, #24]
 8008e98:	2a00      	cmp	r2, #0
 8008e9a:	bf0c      	ite	eq
 8008e9c:	2201      	moveq	r2, #1
 8008e9e:	f04f 32ff 	movne.w	r2, #4294967295
 8008ea2:	608a      	str	r2, [r1, #8]
 8008ea4:	2700      	movs	r7, #0
 8008ea6:	6822      	ldr	r2, [r4, #0]
 8008ea8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8008f34 <_scanf_chars+0xac>
 8008eac:	06d1      	lsls	r1, r2, #27
 8008eae:	bf5f      	itttt	pl
 8008eb0:	681a      	ldrpl	r2, [r3, #0]
 8008eb2:	1d11      	addpl	r1, r2, #4
 8008eb4:	6019      	strpl	r1, [r3, #0]
 8008eb6:	6816      	ldrpl	r6, [r2, #0]
 8008eb8:	69a0      	ldr	r0, [r4, #24]
 8008eba:	b188      	cbz	r0, 8008ee0 <_scanf_chars+0x58>
 8008ebc:	2801      	cmp	r0, #1
 8008ebe:	d107      	bne.n	8008ed0 <_scanf_chars+0x48>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	781a      	ldrb	r2, [r3, #0]
 8008ec4:	6963      	ldr	r3, [r4, #20]
 8008ec6:	5c9b      	ldrb	r3, [r3, r2]
 8008ec8:	b953      	cbnz	r3, 8008ee0 <_scanf_chars+0x58>
 8008eca:	bb27      	cbnz	r7, 8008f16 <_scanf_chars+0x8e>
 8008ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed0:	2802      	cmp	r0, #2
 8008ed2:	d120      	bne.n	8008f16 <_scanf_chars+0x8e>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008edc:	071b      	lsls	r3, r3, #28
 8008ede:	d41a      	bmi.n	8008f16 <_scanf_chars+0x8e>
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	3701      	adds	r7, #1
 8008ee4:	06da      	lsls	r2, r3, #27
 8008ee6:	bf5e      	ittt	pl
 8008ee8:	682b      	ldrpl	r3, [r5, #0]
 8008eea:	781b      	ldrbpl	r3, [r3, #0]
 8008eec:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008ef0:	682a      	ldr	r2, [r5, #0]
 8008ef2:	686b      	ldr	r3, [r5, #4]
 8008ef4:	3201      	adds	r2, #1
 8008ef6:	602a      	str	r2, [r5, #0]
 8008ef8:	68a2      	ldr	r2, [r4, #8]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	3a01      	subs	r2, #1
 8008efe:	606b      	str	r3, [r5, #4]
 8008f00:	60a2      	str	r2, [r4, #8]
 8008f02:	b142      	cbz	r2, 8008f16 <_scanf_chars+0x8e>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	dcd7      	bgt.n	8008eb8 <_scanf_chars+0x30>
 8008f08:	4629      	mov	r1, r5
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f10:	4798      	blx	r3
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d0d0      	beq.n	8008eb8 <_scanf_chars+0x30>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	f013 0310 	ands.w	r3, r3, #16
 8008f1c:	d105      	bne.n	8008f2a <_scanf_chars+0xa2>
 8008f1e:	68e2      	ldr	r2, [r4, #12]
 8008f20:	3201      	adds	r2, #1
 8008f22:	60e2      	str	r2, [r4, #12]
 8008f24:	69a2      	ldr	r2, [r4, #24]
 8008f26:	b102      	cbz	r2, 8008f2a <_scanf_chars+0xa2>
 8008f28:	7033      	strb	r3, [r6, #0]
 8008f2a:	6923      	ldr	r3, [r4, #16]
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	441f      	add	r7, r3
 8008f30:	6127      	str	r7, [r4, #16]
 8008f32:	e7cb      	b.n	8008ecc <_scanf_chars+0x44>
 8008f34:	08009f19 	.word	0x08009f19

08008f38 <_scanf_i>:
 8008f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	4698      	mov	r8, r3
 8008f40:	4b72      	ldr	r3, [pc, #456]	; (800910c <_scanf_i+0x1d4>)
 8008f42:	b087      	sub	sp, #28
 8008f44:	4682      	mov	sl, r0
 8008f46:	4616      	mov	r6, r2
 8008f48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f4c:	ab03      	add	r3, sp, #12
 8008f4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008f52:	4b6f      	ldr	r3, [pc, #444]	; (8009110 <_scanf_i+0x1d8>)
 8008f54:	69a1      	ldr	r1, [r4, #24]
 8008f56:	4a6f      	ldr	r2, [pc, #444]	; (8009114 <_scanf_i+0x1dc>)
 8008f58:	4627      	mov	r7, r4
 8008f5a:	2903      	cmp	r1, #3
 8008f5c:	bf18      	it	ne
 8008f5e:	461a      	movne	r2, r3
 8008f60:	68a3      	ldr	r3, [r4, #8]
 8008f62:	9201      	str	r2, [sp, #4]
 8008f64:	1e5a      	subs	r2, r3, #1
 8008f66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f6a:	bf81      	itttt	hi
 8008f6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f70:	eb03 0905 	addhi.w	r9, r3, r5
 8008f74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f78:	60a3      	strhi	r3, [r4, #8]
 8008f7a:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008f7e:	bf98      	it	ls
 8008f80:	f04f 0900 	movls.w	r9, #0
 8008f84:	463d      	mov	r5, r7
 8008f86:	f04f 0b00 	mov.w	fp, #0
 8008f8a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008f8e:	6023      	str	r3, [r4, #0]
 8008f90:	6831      	ldr	r1, [r6, #0]
 8008f92:	ab03      	add	r3, sp, #12
 8008f94:	2202      	movs	r2, #2
 8008f96:	7809      	ldrb	r1, [r1, #0]
 8008f98:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008f9c:	f7fe febc 	bl	8007d18 <memchr>
 8008fa0:	b328      	cbz	r0, 8008fee <_scanf_i+0xb6>
 8008fa2:	f1bb 0f01 	cmp.w	fp, #1
 8008fa6:	d159      	bne.n	800905c <_scanf_i+0x124>
 8008fa8:	6862      	ldr	r2, [r4, #4]
 8008faa:	b92a      	cbnz	r2, 8008fb8 <_scanf_i+0x80>
 8008fac:	2308      	movs	r3, #8
 8008fae:	6822      	ldr	r2, [r4, #0]
 8008fb0:	6063      	str	r3, [r4, #4]
 8008fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fb6:	6022      	str	r2, [r4, #0]
 8008fb8:	6822      	ldr	r2, [r4, #0]
 8008fba:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008fbe:	6022      	str	r2, [r4, #0]
 8008fc0:	68a2      	ldr	r2, [r4, #8]
 8008fc2:	1e51      	subs	r1, r2, #1
 8008fc4:	60a1      	str	r1, [r4, #8]
 8008fc6:	b192      	cbz	r2, 8008fee <_scanf_i+0xb6>
 8008fc8:	6832      	ldr	r2, [r6, #0]
 8008fca:	1c51      	adds	r1, r2, #1
 8008fcc:	6031      	str	r1, [r6, #0]
 8008fce:	7812      	ldrb	r2, [r2, #0]
 8008fd0:	f805 2b01 	strb.w	r2, [r5], #1
 8008fd4:	6872      	ldr	r2, [r6, #4]
 8008fd6:	3a01      	subs	r2, #1
 8008fd8:	2a00      	cmp	r2, #0
 8008fda:	6072      	str	r2, [r6, #4]
 8008fdc:	dc07      	bgt.n	8008fee <_scanf_i+0xb6>
 8008fde:	4631      	mov	r1, r6
 8008fe0:	4650      	mov	r0, sl
 8008fe2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008fe6:	4790      	blx	r2
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	f040 8085 	bne.w	80090f8 <_scanf_i+0x1c0>
 8008fee:	f10b 0b01 	add.w	fp, fp, #1
 8008ff2:	f1bb 0f03 	cmp.w	fp, #3
 8008ff6:	d1cb      	bne.n	8008f90 <_scanf_i+0x58>
 8008ff8:	6863      	ldr	r3, [r4, #4]
 8008ffa:	b90b      	cbnz	r3, 8009000 <_scanf_i+0xc8>
 8008ffc:	230a      	movs	r3, #10
 8008ffe:	6063      	str	r3, [r4, #4]
 8009000:	6863      	ldr	r3, [r4, #4]
 8009002:	4945      	ldr	r1, [pc, #276]	; (8009118 <_scanf_i+0x1e0>)
 8009004:	6960      	ldr	r0, [r4, #20]
 8009006:	1ac9      	subs	r1, r1, r3
 8009008:	f000 f8b0 	bl	800916c <__sccl>
 800900c:	f04f 0b00 	mov.w	fp, #0
 8009010:	68a3      	ldr	r3, [r4, #8]
 8009012:	6822      	ldr	r2, [r4, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d03d      	beq.n	8009094 <_scanf_i+0x15c>
 8009018:	6831      	ldr	r1, [r6, #0]
 800901a:	6960      	ldr	r0, [r4, #20]
 800901c:	f891 c000 	ldrb.w	ip, [r1]
 8009020:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009024:	2800      	cmp	r0, #0
 8009026:	d035      	beq.n	8009094 <_scanf_i+0x15c>
 8009028:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800902c:	d124      	bne.n	8009078 <_scanf_i+0x140>
 800902e:	0510      	lsls	r0, r2, #20
 8009030:	d522      	bpl.n	8009078 <_scanf_i+0x140>
 8009032:	f10b 0b01 	add.w	fp, fp, #1
 8009036:	f1b9 0f00 	cmp.w	r9, #0
 800903a:	d003      	beq.n	8009044 <_scanf_i+0x10c>
 800903c:	3301      	adds	r3, #1
 800903e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009042:	60a3      	str	r3, [r4, #8]
 8009044:	6873      	ldr	r3, [r6, #4]
 8009046:	3b01      	subs	r3, #1
 8009048:	2b00      	cmp	r3, #0
 800904a:	6073      	str	r3, [r6, #4]
 800904c:	dd1b      	ble.n	8009086 <_scanf_i+0x14e>
 800904e:	6833      	ldr	r3, [r6, #0]
 8009050:	3301      	adds	r3, #1
 8009052:	6033      	str	r3, [r6, #0]
 8009054:	68a3      	ldr	r3, [r4, #8]
 8009056:	3b01      	subs	r3, #1
 8009058:	60a3      	str	r3, [r4, #8]
 800905a:	e7d9      	b.n	8009010 <_scanf_i+0xd8>
 800905c:	f1bb 0f02 	cmp.w	fp, #2
 8009060:	d1ae      	bne.n	8008fc0 <_scanf_i+0x88>
 8009062:	6822      	ldr	r2, [r4, #0]
 8009064:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009068:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800906c:	d1bf      	bne.n	8008fee <_scanf_i+0xb6>
 800906e:	2310      	movs	r3, #16
 8009070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009074:	6063      	str	r3, [r4, #4]
 8009076:	e7a2      	b.n	8008fbe <_scanf_i+0x86>
 8009078:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800907c:	6022      	str	r2, [r4, #0]
 800907e:	780b      	ldrb	r3, [r1, #0]
 8009080:	f805 3b01 	strb.w	r3, [r5], #1
 8009084:	e7de      	b.n	8009044 <_scanf_i+0x10c>
 8009086:	4631      	mov	r1, r6
 8009088:	4650      	mov	r0, sl
 800908a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800908e:	4798      	blx	r3
 8009090:	2800      	cmp	r0, #0
 8009092:	d0df      	beq.n	8009054 <_scanf_i+0x11c>
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	05d9      	lsls	r1, r3, #23
 8009098:	d50d      	bpl.n	80090b6 <_scanf_i+0x17e>
 800909a:	42bd      	cmp	r5, r7
 800909c:	d909      	bls.n	80090b2 <_scanf_i+0x17a>
 800909e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80090a2:	4632      	mov	r2, r6
 80090a4:	4650      	mov	r0, sl
 80090a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80090ae:	4798      	blx	r3
 80090b0:	464d      	mov	r5, r9
 80090b2:	42bd      	cmp	r5, r7
 80090b4:	d028      	beq.n	8009108 <_scanf_i+0x1d0>
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	f012 0210 	ands.w	r2, r2, #16
 80090bc:	d113      	bne.n	80090e6 <_scanf_i+0x1ae>
 80090be:	702a      	strb	r2, [r5, #0]
 80090c0:	4639      	mov	r1, r7
 80090c2:	6863      	ldr	r3, [r4, #4]
 80090c4:	4650      	mov	r0, sl
 80090c6:	9e01      	ldr	r6, [sp, #4]
 80090c8:	47b0      	blx	r6
 80090ca:	f8d8 3000 	ldr.w	r3, [r8]
 80090ce:	6821      	ldr	r1, [r4, #0]
 80090d0:	1d1a      	adds	r2, r3, #4
 80090d2:	f8c8 2000 	str.w	r2, [r8]
 80090d6:	f011 0f20 	tst.w	r1, #32
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	d00f      	beq.n	80090fe <_scanf_i+0x1c6>
 80090de:	6018      	str	r0, [r3, #0]
 80090e0:	68e3      	ldr	r3, [r4, #12]
 80090e2:	3301      	adds	r3, #1
 80090e4:	60e3      	str	r3, [r4, #12]
 80090e6:	2000      	movs	r0, #0
 80090e8:	1bed      	subs	r5, r5, r7
 80090ea:	44ab      	add	fp, r5
 80090ec:	6925      	ldr	r5, [r4, #16]
 80090ee:	445d      	add	r5, fp
 80090f0:	6125      	str	r5, [r4, #16]
 80090f2:	b007      	add	sp, #28
 80090f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f8:	f04f 0b00 	mov.w	fp, #0
 80090fc:	e7ca      	b.n	8009094 <_scanf_i+0x15c>
 80090fe:	07ca      	lsls	r2, r1, #31
 8009100:	bf4c      	ite	mi
 8009102:	8018      	strhmi	r0, [r3, #0]
 8009104:	6018      	strpl	r0, [r3, #0]
 8009106:	e7eb      	b.n	80090e0 <_scanf_i+0x1a8>
 8009108:	2001      	movs	r0, #1
 800910a:	e7f2      	b.n	80090f2 <_scanf_i+0x1ba>
 800910c:	08009e64 	.word	0x08009e64
 8009110:	080092fd 	.word	0x080092fd
 8009114:	080068a9 	.word	0x080068a9
 8009118:	0800a2b6 	.word	0x0800a2b6

0800911c <_read_r>:
 800911c:	b538      	push	{r3, r4, r5, lr}
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	4611      	mov	r1, r2
 8009124:	2200      	movs	r2, #0
 8009126:	4d05      	ldr	r5, [pc, #20]	; (800913c <_read_r+0x20>)
 8009128:	602a      	str	r2, [r5, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	f7f8 ff85 	bl	800203a <_read>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_read_r+0x1e>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_read_r+0x1e>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	200003c8 	.word	0x200003c8

08009140 <nan>:
 8009140:	2000      	movs	r0, #0
 8009142:	4901      	ldr	r1, [pc, #4]	; (8009148 <nan+0x8>)
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	7ff80000 	.word	0x7ff80000

0800914c <_sbrk_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	2300      	movs	r3, #0
 8009150:	4d05      	ldr	r5, [pc, #20]	; (8009168 <_sbrk_r+0x1c>)
 8009152:	4604      	mov	r4, r0
 8009154:	4608      	mov	r0, r1
 8009156:	602b      	str	r3, [r5, #0]
 8009158:	f7f8 ffd8 	bl	800210c <_sbrk>
 800915c:	1c43      	adds	r3, r0, #1
 800915e:	d102      	bne.n	8009166 <_sbrk_r+0x1a>
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	b103      	cbz	r3, 8009166 <_sbrk_r+0x1a>
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	200003c8 	.word	0x200003c8

0800916c <__sccl>:
 800916c:	b570      	push	{r4, r5, r6, lr}
 800916e:	780b      	ldrb	r3, [r1, #0]
 8009170:	4604      	mov	r4, r0
 8009172:	2b5e      	cmp	r3, #94	; 0x5e
 8009174:	bf13      	iteet	ne
 8009176:	2200      	movne	r2, #0
 8009178:	2201      	moveq	r2, #1
 800917a:	784b      	ldrbeq	r3, [r1, #1]
 800917c:	1c48      	addne	r0, r1, #1
 800917e:	bf08      	it	eq
 8009180:	1c88      	addeq	r0, r1, #2
 8009182:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009186:	1e61      	subs	r1, r4, #1
 8009188:	f801 2f01 	strb.w	r2, [r1, #1]!
 800918c:	42a9      	cmp	r1, r5
 800918e:	d1fb      	bne.n	8009188 <__sccl+0x1c>
 8009190:	b90b      	cbnz	r3, 8009196 <__sccl+0x2a>
 8009192:	3801      	subs	r0, #1
 8009194:	bd70      	pop	{r4, r5, r6, pc}
 8009196:	f082 0101 	eor.w	r1, r2, #1
 800919a:	54e1      	strb	r1, [r4, r3]
 800919c:	1c42      	adds	r2, r0, #1
 800919e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80091a2:	4610      	mov	r0, r2
 80091a4:	2d2d      	cmp	r5, #45	; 0x2d
 80091a6:	f102 36ff 	add.w	r6, r2, #4294967295
 80091aa:	d006      	beq.n	80091ba <__sccl+0x4e>
 80091ac:	2d5d      	cmp	r5, #93	; 0x5d
 80091ae:	d0f1      	beq.n	8009194 <__sccl+0x28>
 80091b0:	b90d      	cbnz	r5, 80091b6 <__sccl+0x4a>
 80091b2:	4630      	mov	r0, r6
 80091b4:	e7ee      	b.n	8009194 <__sccl+0x28>
 80091b6:	462b      	mov	r3, r5
 80091b8:	e7ef      	b.n	800919a <__sccl+0x2e>
 80091ba:	7816      	ldrb	r6, [r2, #0]
 80091bc:	2e5d      	cmp	r6, #93	; 0x5d
 80091be:	d0fa      	beq.n	80091b6 <__sccl+0x4a>
 80091c0:	42b3      	cmp	r3, r6
 80091c2:	dcf8      	bgt.n	80091b6 <__sccl+0x4a>
 80091c4:	4618      	mov	r0, r3
 80091c6:	3001      	adds	r0, #1
 80091c8:	4286      	cmp	r6, r0
 80091ca:	5421      	strb	r1, [r4, r0]
 80091cc:	dcfb      	bgt.n	80091c6 <__sccl+0x5a>
 80091ce:	43d8      	mvns	r0, r3
 80091d0:	4430      	add	r0, r6
 80091d2:	42b3      	cmp	r3, r6
 80091d4:	bfa8      	it	ge
 80091d6:	2000      	movge	r0, #0
 80091d8:	1c5d      	adds	r5, r3, #1
 80091da:	182b      	adds	r3, r5, r0
 80091dc:	3202      	adds	r2, #2
 80091de:	e7de      	b.n	800919e <__sccl+0x32>

080091e0 <strncmp>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	b16a      	cbz	r2, 8009200 <strncmp+0x20>
 80091e4:	3901      	subs	r1, #1
 80091e6:	1884      	adds	r4, r0, r2
 80091e8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80091ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d103      	bne.n	80091fc <strncmp+0x1c>
 80091f4:	42a0      	cmp	r0, r4
 80091f6:	d001      	beq.n	80091fc <strncmp+0x1c>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1f5      	bne.n	80091e8 <strncmp+0x8>
 80091fc:	1a98      	subs	r0, r3, r2
 80091fe:	bd10      	pop	{r4, pc}
 8009200:	4610      	mov	r0, r2
 8009202:	e7fc      	b.n	80091fe <strncmp+0x1e>

08009204 <_strtoul_l.isra.0>:
 8009204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009208:	468c      	mov	ip, r1
 800920a:	4686      	mov	lr, r0
 800920c:	4e3a      	ldr	r6, [pc, #232]	; (80092f8 <_strtoul_l.isra.0+0xf4>)
 800920e:	4660      	mov	r0, ip
 8009210:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009214:	5da5      	ldrb	r5, [r4, r6]
 8009216:	f015 0508 	ands.w	r5, r5, #8
 800921a:	d1f8      	bne.n	800920e <_strtoul_l.isra.0+0xa>
 800921c:	2c2d      	cmp	r4, #45	; 0x2d
 800921e:	d134      	bne.n	800928a <_strtoul_l.isra.0+0x86>
 8009220:	f04f 0801 	mov.w	r8, #1
 8009224:	f89c 4000 	ldrb.w	r4, [ip]
 8009228:	f100 0c02 	add.w	ip, r0, #2
 800922c:	2b00      	cmp	r3, #0
 800922e:	d05e      	beq.n	80092ee <_strtoul_l.isra.0+0xea>
 8009230:	2b10      	cmp	r3, #16
 8009232:	d10c      	bne.n	800924e <_strtoul_l.isra.0+0x4a>
 8009234:	2c30      	cmp	r4, #48	; 0x30
 8009236:	d10a      	bne.n	800924e <_strtoul_l.isra.0+0x4a>
 8009238:	f89c 0000 	ldrb.w	r0, [ip]
 800923c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009240:	2858      	cmp	r0, #88	; 0x58
 8009242:	d14f      	bne.n	80092e4 <_strtoul_l.isra.0+0xe0>
 8009244:	2310      	movs	r3, #16
 8009246:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800924a:	f10c 0c02 	add.w	ip, ip, #2
 800924e:	f04f 37ff 	mov.w	r7, #4294967295
 8009252:	fbb7 f7f3 	udiv	r7, r7, r3
 8009256:	2500      	movs	r5, #0
 8009258:	fb03 f907 	mul.w	r9, r3, r7
 800925c:	4628      	mov	r0, r5
 800925e:	ea6f 0909 	mvn.w	r9, r9
 8009262:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009266:	2e09      	cmp	r6, #9
 8009268:	d818      	bhi.n	800929c <_strtoul_l.isra.0+0x98>
 800926a:	4634      	mov	r4, r6
 800926c:	42a3      	cmp	r3, r4
 800926e:	dd24      	ble.n	80092ba <_strtoul_l.isra.0+0xb6>
 8009270:	2d00      	cmp	r5, #0
 8009272:	db1f      	blt.n	80092b4 <_strtoul_l.isra.0+0xb0>
 8009274:	4287      	cmp	r7, r0
 8009276:	d31d      	bcc.n	80092b4 <_strtoul_l.isra.0+0xb0>
 8009278:	d101      	bne.n	800927e <_strtoul_l.isra.0+0x7a>
 800927a:	45a1      	cmp	r9, r4
 800927c:	db1a      	blt.n	80092b4 <_strtoul_l.isra.0+0xb0>
 800927e:	2501      	movs	r5, #1
 8009280:	fb00 4003 	mla	r0, r0, r3, r4
 8009284:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009288:	e7eb      	b.n	8009262 <_strtoul_l.isra.0+0x5e>
 800928a:	2c2b      	cmp	r4, #43	; 0x2b
 800928c:	bf08      	it	eq
 800928e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009292:	46a8      	mov	r8, r5
 8009294:	bf08      	it	eq
 8009296:	f100 0c02 	addeq.w	ip, r0, #2
 800929a:	e7c7      	b.n	800922c <_strtoul_l.isra.0+0x28>
 800929c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80092a0:	2e19      	cmp	r6, #25
 80092a2:	d801      	bhi.n	80092a8 <_strtoul_l.isra.0+0xa4>
 80092a4:	3c37      	subs	r4, #55	; 0x37
 80092a6:	e7e1      	b.n	800926c <_strtoul_l.isra.0+0x68>
 80092a8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80092ac:	2e19      	cmp	r6, #25
 80092ae:	d804      	bhi.n	80092ba <_strtoul_l.isra.0+0xb6>
 80092b0:	3c57      	subs	r4, #87	; 0x57
 80092b2:	e7db      	b.n	800926c <_strtoul_l.isra.0+0x68>
 80092b4:	f04f 35ff 	mov.w	r5, #4294967295
 80092b8:	e7e4      	b.n	8009284 <_strtoul_l.isra.0+0x80>
 80092ba:	2d00      	cmp	r5, #0
 80092bc:	da07      	bge.n	80092ce <_strtoul_l.isra.0+0xca>
 80092be:	2322      	movs	r3, #34	; 0x22
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295
 80092c4:	f8ce 3000 	str.w	r3, [lr]
 80092c8:	b942      	cbnz	r2, 80092dc <_strtoul_l.isra.0+0xd8>
 80092ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092ce:	f1b8 0f00 	cmp.w	r8, #0
 80092d2:	d000      	beq.n	80092d6 <_strtoul_l.isra.0+0xd2>
 80092d4:	4240      	negs	r0, r0
 80092d6:	2a00      	cmp	r2, #0
 80092d8:	d0f7      	beq.n	80092ca <_strtoul_l.isra.0+0xc6>
 80092da:	b10d      	cbz	r5, 80092e0 <_strtoul_l.isra.0+0xdc>
 80092dc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80092e0:	6011      	str	r1, [r2, #0]
 80092e2:	e7f2      	b.n	80092ca <_strtoul_l.isra.0+0xc6>
 80092e4:	2430      	movs	r4, #48	; 0x30
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1b1      	bne.n	800924e <_strtoul_l.isra.0+0x4a>
 80092ea:	2308      	movs	r3, #8
 80092ec:	e7af      	b.n	800924e <_strtoul_l.isra.0+0x4a>
 80092ee:	2c30      	cmp	r4, #48	; 0x30
 80092f0:	d0a2      	beq.n	8009238 <_strtoul_l.isra.0+0x34>
 80092f2:	230a      	movs	r3, #10
 80092f4:	e7ab      	b.n	800924e <_strtoul_l.isra.0+0x4a>
 80092f6:	bf00      	nop
 80092f8:	08009f19 	.word	0x08009f19

080092fc <_strtoul_r>:
 80092fc:	f7ff bf82 	b.w	8009204 <_strtoul_l.isra.0>

08009300 <__submore>:
 8009300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009304:	460c      	mov	r4, r1
 8009306:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800930c:	4299      	cmp	r1, r3
 800930e:	d11b      	bne.n	8009348 <__submore+0x48>
 8009310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009314:	f7ff fa2e 	bl	8008774 <_malloc_r>
 8009318:	b918      	cbnz	r0, 8009322 <__submore+0x22>
 800931a:	f04f 30ff 	mov.w	r0, #4294967295
 800931e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009326:	63a3      	str	r3, [r4, #56]	; 0x38
 8009328:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800932c:	6360      	str	r0, [r4, #52]	; 0x34
 800932e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009332:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009336:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800933a:	7043      	strb	r3, [r0, #1]
 800933c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009340:	7003      	strb	r3, [r0, #0]
 8009342:	6020      	str	r0, [r4, #0]
 8009344:	2000      	movs	r0, #0
 8009346:	e7ea      	b.n	800931e <__submore+0x1e>
 8009348:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800934a:	0077      	lsls	r7, r6, #1
 800934c:	463a      	mov	r2, r7
 800934e:	f000 fa2d 	bl	80097ac <_realloc_r>
 8009352:	4605      	mov	r5, r0
 8009354:	2800      	cmp	r0, #0
 8009356:	d0e0      	beq.n	800931a <__submore+0x1a>
 8009358:	eb00 0806 	add.w	r8, r0, r6
 800935c:	4601      	mov	r1, r0
 800935e:	4632      	mov	r2, r6
 8009360:	4640      	mov	r0, r8
 8009362:	f7fe fce7 	bl	8007d34 <memcpy>
 8009366:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800936a:	f8c4 8000 	str.w	r8, [r4]
 800936e:	e7e9      	b.n	8009344 <__submore+0x44>

08009370 <__ascii_wctomb>:
 8009370:	4603      	mov	r3, r0
 8009372:	4608      	mov	r0, r1
 8009374:	b141      	cbz	r1, 8009388 <__ascii_wctomb+0x18>
 8009376:	2aff      	cmp	r2, #255	; 0xff
 8009378:	d904      	bls.n	8009384 <__ascii_wctomb+0x14>
 800937a:	228a      	movs	r2, #138	; 0x8a
 800937c:	f04f 30ff 	mov.w	r0, #4294967295
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	4770      	bx	lr
 8009384:	2001      	movs	r0, #1
 8009386:	700a      	strb	r2, [r1, #0]
 8009388:	4770      	bx	lr
	...

0800938c <__assert_func>:
 800938c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800938e:	4614      	mov	r4, r2
 8009390:	461a      	mov	r2, r3
 8009392:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <__assert_func+0x2c>)
 8009394:	4605      	mov	r5, r0
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68d8      	ldr	r0, [r3, #12]
 800939a:	b14c      	cbz	r4, 80093b0 <__assert_func+0x24>
 800939c:	4b07      	ldr	r3, [pc, #28]	; (80093bc <__assert_func+0x30>)
 800939e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093a2:	9100      	str	r1, [sp, #0]
 80093a4:	462b      	mov	r3, r5
 80093a6:	4906      	ldr	r1, [pc, #24]	; (80093c0 <__assert_func+0x34>)
 80093a8:	f000 f9a6 	bl	80096f8 <fiprintf>
 80093ac:	f000 fc3c 	bl	8009c28 <abort>
 80093b0:	4b04      	ldr	r3, [pc, #16]	; (80093c4 <__assert_func+0x38>)
 80093b2:	461c      	mov	r4, r3
 80093b4:	e7f3      	b.n	800939e <__assert_func+0x12>
 80093b6:	bf00      	nop
 80093b8:	20000014 	.word	0x20000014
 80093bc:	0800a2b8 	.word	0x0800a2b8
 80093c0:	0800a2c5 	.word	0x0800a2c5
 80093c4:	0800a2f3 	.word	0x0800a2f3

080093c8 <__sflush_r>:
 80093c8:	898a      	ldrh	r2, [r1, #12]
 80093ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ce:	4605      	mov	r5, r0
 80093d0:	0710      	lsls	r0, r2, #28
 80093d2:	460c      	mov	r4, r1
 80093d4:	d458      	bmi.n	8009488 <__sflush_r+0xc0>
 80093d6:	684b      	ldr	r3, [r1, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	dc05      	bgt.n	80093e8 <__sflush_r+0x20>
 80093dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dc02      	bgt.n	80093e8 <__sflush_r+0x20>
 80093e2:	2000      	movs	r0, #0
 80093e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093ea:	2e00      	cmp	r6, #0
 80093ec:	d0f9      	beq.n	80093e2 <__sflush_r+0x1a>
 80093ee:	2300      	movs	r3, #0
 80093f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093f4:	682f      	ldr	r7, [r5, #0]
 80093f6:	602b      	str	r3, [r5, #0]
 80093f8:	d032      	beq.n	8009460 <__sflush_r+0x98>
 80093fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093fc:	89a3      	ldrh	r3, [r4, #12]
 80093fe:	075a      	lsls	r2, r3, #29
 8009400:	d505      	bpl.n	800940e <__sflush_r+0x46>
 8009402:	6863      	ldr	r3, [r4, #4]
 8009404:	1ac0      	subs	r0, r0, r3
 8009406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009408:	b10b      	cbz	r3, 800940e <__sflush_r+0x46>
 800940a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800940c:	1ac0      	subs	r0, r0, r3
 800940e:	2300      	movs	r3, #0
 8009410:	4602      	mov	r2, r0
 8009412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009414:	4628      	mov	r0, r5
 8009416:	6a21      	ldr	r1, [r4, #32]
 8009418:	47b0      	blx	r6
 800941a:	1c43      	adds	r3, r0, #1
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	d106      	bne.n	800942e <__sflush_r+0x66>
 8009420:	6829      	ldr	r1, [r5, #0]
 8009422:	291d      	cmp	r1, #29
 8009424:	d82c      	bhi.n	8009480 <__sflush_r+0xb8>
 8009426:	4a2a      	ldr	r2, [pc, #168]	; (80094d0 <__sflush_r+0x108>)
 8009428:	40ca      	lsrs	r2, r1
 800942a:	07d6      	lsls	r6, r2, #31
 800942c:	d528      	bpl.n	8009480 <__sflush_r+0xb8>
 800942e:	2200      	movs	r2, #0
 8009430:	6062      	str	r2, [r4, #4]
 8009432:	6922      	ldr	r2, [r4, #16]
 8009434:	04d9      	lsls	r1, r3, #19
 8009436:	6022      	str	r2, [r4, #0]
 8009438:	d504      	bpl.n	8009444 <__sflush_r+0x7c>
 800943a:	1c42      	adds	r2, r0, #1
 800943c:	d101      	bne.n	8009442 <__sflush_r+0x7a>
 800943e:	682b      	ldr	r3, [r5, #0]
 8009440:	b903      	cbnz	r3, 8009444 <__sflush_r+0x7c>
 8009442:	6560      	str	r0, [r4, #84]	; 0x54
 8009444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009446:	602f      	str	r7, [r5, #0]
 8009448:	2900      	cmp	r1, #0
 800944a:	d0ca      	beq.n	80093e2 <__sflush_r+0x1a>
 800944c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009450:	4299      	cmp	r1, r3
 8009452:	d002      	beq.n	800945a <__sflush_r+0x92>
 8009454:	4628      	mov	r0, r5
 8009456:	f7ff f941 	bl	80086dc <_free_r>
 800945a:	2000      	movs	r0, #0
 800945c:	6360      	str	r0, [r4, #52]	; 0x34
 800945e:	e7c1      	b.n	80093e4 <__sflush_r+0x1c>
 8009460:	6a21      	ldr	r1, [r4, #32]
 8009462:	2301      	movs	r3, #1
 8009464:	4628      	mov	r0, r5
 8009466:	47b0      	blx	r6
 8009468:	1c41      	adds	r1, r0, #1
 800946a:	d1c7      	bne.n	80093fc <__sflush_r+0x34>
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d0c4      	beq.n	80093fc <__sflush_r+0x34>
 8009472:	2b1d      	cmp	r3, #29
 8009474:	d001      	beq.n	800947a <__sflush_r+0xb2>
 8009476:	2b16      	cmp	r3, #22
 8009478:	d101      	bne.n	800947e <__sflush_r+0xb6>
 800947a:	602f      	str	r7, [r5, #0]
 800947c:	e7b1      	b.n	80093e2 <__sflush_r+0x1a>
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	e7ad      	b.n	80093e4 <__sflush_r+0x1c>
 8009488:	690f      	ldr	r7, [r1, #16]
 800948a:	2f00      	cmp	r7, #0
 800948c:	d0a9      	beq.n	80093e2 <__sflush_r+0x1a>
 800948e:	0793      	lsls	r3, r2, #30
 8009490:	bf18      	it	ne
 8009492:	2300      	movne	r3, #0
 8009494:	680e      	ldr	r6, [r1, #0]
 8009496:	bf08      	it	eq
 8009498:	694b      	ldreq	r3, [r1, #20]
 800949a:	eba6 0807 	sub.w	r8, r6, r7
 800949e:	600f      	str	r7, [r1, #0]
 80094a0:	608b      	str	r3, [r1, #8]
 80094a2:	f1b8 0f00 	cmp.w	r8, #0
 80094a6:	dd9c      	ble.n	80093e2 <__sflush_r+0x1a>
 80094a8:	4643      	mov	r3, r8
 80094aa:	463a      	mov	r2, r7
 80094ac:	4628      	mov	r0, r5
 80094ae:	6a21      	ldr	r1, [r4, #32]
 80094b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094b2:	47b0      	blx	r6
 80094b4:	2800      	cmp	r0, #0
 80094b6:	dc06      	bgt.n	80094c6 <__sflush_r+0xfe>
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	f04f 30ff 	mov.w	r0, #4294967295
 80094be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c2:	81a3      	strh	r3, [r4, #12]
 80094c4:	e78e      	b.n	80093e4 <__sflush_r+0x1c>
 80094c6:	4407      	add	r7, r0
 80094c8:	eba8 0800 	sub.w	r8, r8, r0
 80094cc:	e7e9      	b.n	80094a2 <__sflush_r+0xda>
 80094ce:	bf00      	nop
 80094d0:	20400001 	.word	0x20400001

080094d4 <_fflush_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	690b      	ldr	r3, [r1, #16]
 80094d8:	4605      	mov	r5, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	b913      	cbnz	r3, 80094e4 <_fflush_r+0x10>
 80094de:	2500      	movs	r5, #0
 80094e0:	4628      	mov	r0, r5
 80094e2:	bd38      	pop	{r3, r4, r5, pc}
 80094e4:	b118      	cbz	r0, 80094ee <_fflush_r+0x1a>
 80094e6:	6983      	ldr	r3, [r0, #24]
 80094e8:	b90b      	cbnz	r3, 80094ee <_fflush_r+0x1a>
 80094ea:	f000 f887 	bl	80095fc <__sinit>
 80094ee:	4b14      	ldr	r3, [pc, #80]	; (8009540 <_fflush_r+0x6c>)
 80094f0:	429c      	cmp	r4, r3
 80094f2:	d11b      	bne.n	800952c <_fflush_r+0x58>
 80094f4:	686c      	ldr	r4, [r5, #4]
 80094f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0ef      	beq.n	80094de <_fflush_r+0xa>
 80094fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009500:	07d0      	lsls	r0, r2, #31
 8009502:	d404      	bmi.n	800950e <_fflush_r+0x3a>
 8009504:	0599      	lsls	r1, r3, #22
 8009506:	d402      	bmi.n	800950e <_fflush_r+0x3a>
 8009508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800950a:	f000 f927 	bl	800975c <__retarget_lock_acquire_recursive>
 800950e:	4628      	mov	r0, r5
 8009510:	4621      	mov	r1, r4
 8009512:	f7ff ff59 	bl	80093c8 <__sflush_r>
 8009516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009518:	4605      	mov	r5, r0
 800951a:	07da      	lsls	r2, r3, #31
 800951c:	d4e0      	bmi.n	80094e0 <_fflush_r+0xc>
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	059b      	lsls	r3, r3, #22
 8009522:	d4dd      	bmi.n	80094e0 <_fflush_r+0xc>
 8009524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009526:	f000 f91a 	bl	800975e <__retarget_lock_release_recursive>
 800952a:	e7d9      	b.n	80094e0 <_fflush_r+0xc>
 800952c:	4b05      	ldr	r3, [pc, #20]	; (8009544 <_fflush_r+0x70>)
 800952e:	429c      	cmp	r4, r3
 8009530:	d101      	bne.n	8009536 <_fflush_r+0x62>
 8009532:	68ac      	ldr	r4, [r5, #8]
 8009534:	e7df      	b.n	80094f6 <_fflush_r+0x22>
 8009536:	4b04      	ldr	r3, [pc, #16]	; (8009548 <_fflush_r+0x74>)
 8009538:	429c      	cmp	r4, r3
 800953a:	bf08      	it	eq
 800953c:	68ec      	ldreq	r4, [r5, #12]
 800953e:	e7da      	b.n	80094f6 <_fflush_r+0x22>
 8009540:	0800a314 	.word	0x0800a314
 8009544:	0800a334 	.word	0x0800a334
 8009548:	0800a2f4 	.word	0x0800a2f4

0800954c <std>:
 800954c:	2300      	movs	r3, #0
 800954e:	b510      	push	{r4, lr}
 8009550:	4604      	mov	r4, r0
 8009552:	e9c0 3300 	strd	r3, r3, [r0]
 8009556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800955a:	6083      	str	r3, [r0, #8]
 800955c:	8181      	strh	r1, [r0, #12]
 800955e:	6643      	str	r3, [r0, #100]	; 0x64
 8009560:	81c2      	strh	r2, [r0, #14]
 8009562:	6183      	str	r3, [r0, #24]
 8009564:	4619      	mov	r1, r3
 8009566:	2208      	movs	r2, #8
 8009568:	305c      	adds	r0, #92	; 0x5c
 800956a:	f7fb fbef 	bl	8004d4c <memset>
 800956e:	4b05      	ldr	r3, [pc, #20]	; (8009584 <std+0x38>)
 8009570:	6224      	str	r4, [r4, #32]
 8009572:	6263      	str	r3, [r4, #36]	; 0x24
 8009574:	4b04      	ldr	r3, [pc, #16]	; (8009588 <std+0x3c>)
 8009576:	62a3      	str	r3, [r4, #40]	; 0x28
 8009578:	4b04      	ldr	r3, [pc, #16]	; (800958c <std+0x40>)
 800957a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800957c:	4b04      	ldr	r3, [pc, #16]	; (8009590 <std+0x44>)
 800957e:	6323      	str	r3, [r4, #48]	; 0x30
 8009580:	bd10      	pop	{r4, pc}
 8009582:	bf00      	nop
 8009584:	08005add 	.word	0x08005add
 8009588:	08005b03 	.word	0x08005b03
 800958c:	08005b3b 	.word	0x08005b3b
 8009590:	08005b5f 	.word	0x08005b5f

08009594 <_cleanup_r>:
 8009594:	4901      	ldr	r1, [pc, #4]	; (800959c <_cleanup_r+0x8>)
 8009596:	f000 b8c1 	b.w	800971c <_fwalk_reent>
 800959a:	bf00      	nop
 800959c:	080094d5 	.word	0x080094d5

080095a0 <__sfmoreglue>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	2568      	movs	r5, #104	; 0x68
 80095a4:	1e4a      	subs	r2, r1, #1
 80095a6:	4355      	muls	r5, r2
 80095a8:	460e      	mov	r6, r1
 80095aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095ae:	f7ff f8e1 	bl	8008774 <_malloc_r>
 80095b2:	4604      	mov	r4, r0
 80095b4:	b140      	cbz	r0, 80095c8 <__sfmoreglue+0x28>
 80095b6:	2100      	movs	r1, #0
 80095b8:	e9c0 1600 	strd	r1, r6, [r0]
 80095bc:	300c      	adds	r0, #12
 80095be:	60a0      	str	r0, [r4, #8]
 80095c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095c4:	f7fb fbc2 	bl	8004d4c <memset>
 80095c8:	4620      	mov	r0, r4
 80095ca:	bd70      	pop	{r4, r5, r6, pc}

080095cc <__sfp_lock_acquire>:
 80095cc:	4801      	ldr	r0, [pc, #4]	; (80095d4 <__sfp_lock_acquire+0x8>)
 80095ce:	f000 b8c5 	b.w	800975c <__retarget_lock_acquire_recursive>
 80095d2:	bf00      	nop
 80095d4:	200003d4 	.word	0x200003d4

080095d8 <__sfp_lock_release>:
 80095d8:	4801      	ldr	r0, [pc, #4]	; (80095e0 <__sfp_lock_release+0x8>)
 80095da:	f000 b8c0 	b.w	800975e <__retarget_lock_release_recursive>
 80095de:	bf00      	nop
 80095e0:	200003d4 	.word	0x200003d4

080095e4 <__sinit_lock_acquire>:
 80095e4:	4801      	ldr	r0, [pc, #4]	; (80095ec <__sinit_lock_acquire+0x8>)
 80095e6:	f000 b8b9 	b.w	800975c <__retarget_lock_acquire_recursive>
 80095ea:	bf00      	nop
 80095ec:	200003cf 	.word	0x200003cf

080095f0 <__sinit_lock_release>:
 80095f0:	4801      	ldr	r0, [pc, #4]	; (80095f8 <__sinit_lock_release+0x8>)
 80095f2:	f000 b8b4 	b.w	800975e <__retarget_lock_release_recursive>
 80095f6:	bf00      	nop
 80095f8:	200003cf 	.word	0x200003cf

080095fc <__sinit>:
 80095fc:	b510      	push	{r4, lr}
 80095fe:	4604      	mov	r4, r0
 8009600:	f7ff fff0 	bl	80095e4 <__sinit_lock_acquire>
 8009604:	69a3      	ldr	r3, [r4, #24]
 8009606:	b11b      	cbz	r3, 8009610 <__sinit+0x14>
 8009608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800960c:	f7ff bff0 	b.w	80095f0 <__sinit_lock_release>
 8009610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009614:	6523      	str	r3, [r4, #80]	; 0x50
 8009616:	4b13      	ldr	r3, [pc, #76]	; (8009664 <__sinit+0x68>)
 8009618:	4a13      	ldr	r2, [pc, #76]	; (8009668 <__sinit+0x6c>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	62a2      	str	r2, [r4, #40]	; 0x28
 800961e:	42a3      	cmp	r3, r4
 8009620:	bf08      	it	eq
 8009622:	2301      	moveq	r3, #1
 8009624:	4620      	mov	r0, r4
 8009626:	bf08      	it	eq
 8009628:	61a3      	streq	r3, [r4, #24]
 800962a:	f000 f81f 	bl	800966c <__sfp>
 800962e:	6060      	str	r0, [r4, #4]
 8009630:	4620      	mov	r0, r4
 8009632:	f000 f81b 	bl	800966c <__sfp>
 8009636:	60a0      	str	r0, [r4, #8]
 8009638:	4620      	mov	r0, r4
 800963a:	f000 f817 	bl	800966c <__sfp>
 800963e:	2200      	movs	r2, #0
 8009640:	2104      	movs	r1, #4
 8009642:	60e0      	str	r0, [r4, #12]
 8009644:	6860      	ldr	r0, [r4, #4]
 8009646:	f7ff ff81 	bl	800954c <std>
 800964a:	2201      	movs	r2, #1
 800964c:	2109      	movs	r1, #9
 800964e:	68a0      	ldr	r0, [r4, #8]
 8009650:	f7ff ff7c 	bl	800954c <std>
 8009654:	2202      	movs	r2, #2
 8009656:	2112      	movs	r1, #18
 8009658:	68e0      	ldr	r0, [r4, #12]
 800965a:	f7ff ff77 	bl	800954c <std>
 800965e:	2301      	movs	r3, #1
 8009660:	61a3      	str	r3, [r4, #24]
 8009662:	e7d1      	b.n	8009608 <__sinit+0xc>
 8009664:	08009e88 	.word	0x08009e88
 8009668:	08009595 	.word	0x08009595

0800966c <__sfp>:
 800966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966e:	4607      	mov	r7, r0
 8009670:	f7ff ffac 	bl	80095cc <__sfp_lock_acquire>
 8009674:	4b1e      	ldr	r3, [pc, #120]	; (80096f0 <__sfp+0x84>)
 8009676:	681e      	ldr	r6, [r3, #0]
 8009678:	69b3      	ldr	r3, [r6, #24]
 800967a:	b913      	cbnz	r3, 8009682 <__sfp+0x16>
 800967c:	4630      	mov	r0, r6
 800967e:	f7ff ffbd 	bl	80095fc <__sinit>
 8009682:	3648      	adds	r6, #72	; 0x48
 8009684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009688:	3b01      	subs	r3, #1
 800968a:	d503      	bpl.n	8009694 <__sfp+0x28>
 800968c:	6833      	ldr	r3, [r6, #0]
 800968e:	b30b      	cbz	r3, 80096d4 <__sfp+0x68>
 8009690:	6836      	ldr	r6, [r6, #0]
 8009692:	e7f7      	b.n	8009684 <__sfp+0x18>
 8009694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009698:	b9d5      	cbnz	r5, 80096d0 <__sfp+0x64>
 800969a:	4b16      	ldr	r3, [pc, #88]	; (80096f4 <__sfp+0x88>)
 800969c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096a0:	60e3      	str	r3, [r4, #12]
 80096a2:	6665      	str	r5, [r4, #100]	; 0x64
 80096a4:	f000 f859 	bl	800975a <__retarget_lock_init_recursive>
 80096a8:	f7ff ff96 	bl	80095d8 <__sfp_lock_release>
 80096ac:	2208      	movs	r2, #8
 80096ae:	4629      	mov	r1, r5
 80096b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096b8:	6025      	str	r5, [r4, #0]
 80096ba:	61a5      	str	r5, [r4, #24]
 80096bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096c0:	f7fb fb44 	bl	8004d4c <memset>
 80096c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096cc:	4620      	mov	r0, r4
 80096ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d0:	3468      	adds	r4, #104	; 0x68
 80096d2:	e7d9      	b.n	8009688 <__sfp+0x1c>
 80096d4:	2104      	movs	r1, #4
 80096d6:	4638      	mov	r0, r7
 80096d8:	f7ff ff62 	bl	80095a0 <__sfmoreglue>
 80096dc:	4604      	mov	r4, r0
 80096de:	6030      	str	r0, [r6, #0]
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d1d5      	bne.n	8009690 <__sfp+0x24>
 80096e4:	f7ff ff78 	bl	80095d8 <__sfp_lock_release>
 80096e8:	230c      	movs	r3, #12
 80096ea:	603b      	str	r3, [r7, #0]
 80096ec:	e7ee      	b.n	80096cc <__sfp+0x60>
 80096ee:	bf00      	nop
 80096f0:	08009e88 	.word	0x08009e88
 80096f4:	ffff0001 	.word	0xffff0001

080096f8 <fiprintf>:
 80096f8:	b40e      	push	{r1, r2, r3}
 80096fa:	b503      	push	{r0, r1, lr}
 80096fc:	4601      	mov	r1, r0
 80096fe:	ab03      	add	r3, sp, #12
 8009700:	4805      	ldr	r0, [pc, #20]	; (8009718 <fiprintf+0x20>)
 8009702:	f853 2b04 	ldr.w	r2, [r3], #4
 8009706:	6800      	ldr	r0, [r0, #0]
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	f000 f89d 	bl	8009848 <_vfiprintf_r>
 800970e:	b002      	add	sp, #8
 8009710:	f85d eb04 	ldr.w	lr, [sp], #4
 8009714:	b003      	add	sp, #12
 8009716:	4770      	bx	lr
 8009718:	20000014 	.word	0x20000014

0800971c <_fwalk_reent>:
 800971c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009720:	4606      	mov	r6, r0
 8009722:	4688      	mov	r8, r1
 8009724:	2700      	movs	r7, #0
 8009726:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800972a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800972e:	f1b9 0901 	subs.w	r9, r9, #1
 8009732:	d505      	bpl.n	8009740 <_fwalk_reent+0x24>
 8009734:	6824      	ldr	r4, [r4, #0]
 8009736:	2c00      	cmp	r4, #0
 8009738:	d1f7      	bne.n	800972a <_fwalk_reent+0xe>
 800973a:	4638      	mov	r0, r7
 800973c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009740:	89ab      	ldrh	r3, [r5, #12]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d907      	bls.n	8009756 <_fwalk_reent+0x3a>
 8009746:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800974a:	3301      	adds	r3, #1
 800974c:	d003      	beq.n	8009756 <_fwalk_reent+0x3a>
 800974e:	4629      	mov	r1, r5
 8009750:	4630      	mov	r0, r6
 8009752:	47c0      	blx	r8
 8009754:	4307      	orrs	r7, r0
 8009756:	3568      	adds	r5, #104	; 0x68
 8009758:	e7e9      	b.n	800972e <_fwalk_reent+0x12>

0800975a <__retarget_lock_init_recursive>:
 800975a:	4770      	bx	lr

0800975c <__retarget_lock_acquire_recursive>:
 800975c:	4770      	bx	lr

0800975e <__retarget_lock_release_recursive>:
 800975e:	4770      	bx	lr

08009760 <memmove>:
 8009760:	4288      	cmp	r0, r1
 8009762:	b510      	push	{r4, lr}
 8009764:	eb01 0402 	add.w	r4, r1, r2
 8009768:	d902      	bls.n	8009770 <memmove+0x10>
 800976a:	4284      	cmp	r4, r0
 800976c:	4623      	mov	r3, r4
 800976e:	d807      	bhi.n	8009780 <memmove+0x20>
 8009770:	1e43      	subs	r3, r0, #1
 8009772:	42a1      	cmp	r1, r4
 8009774:	d008      	beq.n	8009788 <memmove+0x28>
 8009776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800977a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800977e:	e7f8      	b.n	8009772 <memmove+0x12>
 8009780:	4601      	mov	r1, r0
 8009782:	4402      	add	r2, r0
 8009784:	428a      	cmp	r2, r1
 8009786:	d100      	bne.n	800978a <memmove+0x2a>
 8009788:	bd10      	pop	{r4, pc}
 800978a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800978e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009792:	e7f7      	b.n	8009784 <memmove+0x24>

08009794 <__malloc_lock>:
 8009794:	4801      	ldr	r0, [pc, #4]	; (800979c <__malloc_lock+0x8>)
 8009796:	f7ff bfe1 	b.w	800975c <__retarget_lock_acquire_recursive>
 800979a:	bf00      	nop
 800979c:	200003d0 	.word	0x200003d0

080097a0 <__malloc_unlock>:
 80097a0:	4801      	ldr	r0, [pc, #4]	; (80097a8 <__malloc_unlock+0x8>)
 80097a2:	f7ff bfdc 	b.w	800975e <__retarget_lock_release_recursive>
 80097a6:	bf00      	nop
 80097a8:	200003d0 	.word	0x200003d0

080097ac <_realloc_r>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	4607      	mov	r7, r0
 80097b0:	4614      	mov	r4, r2
 80097b2:	460e      	mov	r6, r1
 80097b4:	b921      	cbnz	r1, 80097c0 <_realloc_r+0x14>
 80097b6:	4611      	mov	r1, r2
 80097b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80097bc:	f7fe bfda 	b.w	8008774 <_malloc_r>
 80097c0:	b922      	cbnz	r2, 80097cc <_realloc_r+0x20>
 80097c2:	f7fe ff8b 	bl	80086dc <_free_r>
 80097c6:	4625      	mov	r5, r4
 80097c8:	4628      	mov	r0, r5
 80097ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097cc:	f000 fa98 	bl	8009d00 <_malloc_usable_size_r>
 80097d0:	42a0      	cmp	r0, r4
 80097d2:	d20f      	bcs.n	80097f4 <_realloc_r+0x48>
 80097d4:	4621      	mov	r1, r4
 80097d6:	4638      	mov	r0, r7
 80097d8:	f7fe ffcc 	bl	8008774 <_malloc_r>
 80097dc:	4605      	mov	r5, r0
 80097de:	2800      	cmp	r0, #0
 80097e0:	d0f2      	beq.n	80097c8 <_realloc_r+0x1c>
 80097e2:	4631      	mov	r1, r6
 80097e4:	4622      	mov	r2, r4
 80097e6:	f7fe faa5 	bl	8007d34 <memcpy>
 80097ea:	4631      	mov	r1, r6
 80097ec:	4638      	mov	r0, r7
 80097ee:	f7fe ff75 	bl	80086dc <_free_r>
 80097f2:	e7e9      	b.n	80097c8 <_realloc_r+0x1c>
 80097f4:	4635      	mov	r5, r6
 80097f6:	e7e7      	b.n	80097c8 <_realloc_r+0x1c>

080097f8 <__sfputc_r>:
 80097f8:	6893      	ldr	r3, [r2, #8]
 80097fa:	b410      	push	{r4}
 80097fc:	3b01      	subs	r3, #1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	6093      	str	r3, [r2, #8]
 8009802:	da07      	bge.n	8009814 <__sfputc_r+0x1c>
 8009804:	6994      	ldr	r4, [r2, #24]
 8009806:	42a3      	cmp	r3, r4
 8009808:	db01      	blt.n	800980e <__sfputc_r+0x16>
 800980a:	290a      	cmp	r1, #10
 800980c:	d102      	bne.n	8009814 <__sfputc_r+0x1c>
 800980e:	bc10      	pop	{r4}
 8009810:	f000 b94a 	b.w	8009aa8 <__swbuf_r>
 8009814:	6813      	ldr	r3, [r2, #0]
 8009816:	1c58      	adds	r0, r3, #1
 8009818:	6010      	str	r0, [r2, #0]
 800981a:	7019      	strb	r1, [r3, #0]
 800981c:	4608      	mov	r0, r1
 800981e:	bc10      	pop	{r4}
 8009820:	4770      	bx	lr

08009822 <__sfputs_r>:
 8009822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009824:	4606      	mov	r6, r0
 8009826:	460f      	mov	r7, r1
 8009828:	4614      	mov	r4, r2
 800982a:	18d5      	adds	r5, r2, r3
 800982c:	42ac      	cmp	r4, r5
 800982e:	d101      	bne.n	8009834 <__sfputs_r+0x12>
 8009830:	2000      	movs	r0, #0
 8009832:	e007      	b.n	8009844 <__sfputs_r+0x22>
 8009834:	463a      	mov	r2, r7
 8009836:	4630      	mov	r0, r6
 8009838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800983c:	f7ff ffdc 	bl	80097f8 <__sfputc_r>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d1f3      	bne.n	800982c <__sfputs_r+0xa>
 8009844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009848 <_vfiprintf_r>:
 8009848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	460d      	mov	r5, r1
 800984e:	4614      	mov	r4, r2
 8009850:	4698      	mov	r8, r3
 8009852:	4606      	mov	r6, r0
 8009854:	b09d      	sub	sp, #116	; 0x74
 8009856:	b118      	cbz	r0, 8009860 <_vfiprintf_r+0x18>
 8009858:	6983      	ldr	r3, [r0, #24]
 800985a:	b90b      	cbnz	r3, 8009860 <_vfiprintf_r+0x18>
 800985c:	f7ff fece 	bl	80095fc <__sinit>
 8009860:	4b89      	ldr	r3, [pc, #548]	; (8009a88 <_vfiprintf_r+0x240>)
 8009862:	429d      	cmp	r5, r3
 8009864:	d11b      	bne.n	800989e <_vfiprintf_r+0x56>
 8009866:	6875      	ldr	r5, [r6, #4]
 8009868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800986a:	07d9      	lsls	r1, r3, #31
 800986c:	d405      	bmi.n	800987a <_vfiprintf_r+0x32>
 800986e:	89ab      	ldrh	r3, [r5, #12]
 8009870:	059a      	lsls	r2, r3, #22
 8009872:	d402      	bmi.n	800987a <_vfiprintf_r+0x32>
 8009874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009876:	f7ff ff71 	bl	800975c <__retarget_lock_acquire_recursive>
 800987a:	89ab      	ldrh	r3, [r5, #12]
 800987c:	071b      	lsls	r3, r3, #28
 800987e:	d501      	bpl.n	8009884 <_vfiprintf_r+0x3c>
 8009880:	692b      	ldr	r3, [r5, #16]
 8009882:	b9eb      	cbnz	r3, 80098c0 <_vfiprintf_r+0x78>
 8009884:	4629      	mov	r1, r5
 8009886:	4630      	mov	r0, r6
 8009888:	f000 f960 	bl	8009b4c <__swsetup_r>
 800988c:	b1c0      	cbz	r0, 80098c0 <_vfiprintf_r+0x78>
 800988e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009890:	07dc      	lsls	r4, r3, #31
 8009892:	d50e      	bpl.n	80098b2 <_vfiprintf_r+0x6a>
 8009894:	f04f 30ff 	mov.w	r0, #4294967295
 8009898:	b01d      	add	sp, #116	; 0x74
 800989a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989e:	4b7b      	ldr	r3, [pc, #492]	; (8009a8c <_vfiprintf_r+0x244>)
 80098a0:	429d      	cmp	r5, r3
 80098a2:	d101      	bne.n	80098a8 <_vfiprintf_r+0x60>
 80098a4:	68b5      	ldr	r5, [r6, #8]
 80098a6:	e7df      	b.n	8009868 <_vfiprintf_r+0x20>
 80098a8:	4b79      	ldr	r3, [pc, #484]	; (8009a90 <_vfiprintf_r+0x248>)
 80098aa:	429d      	cmp	r5, r3
 80098ac:	bf08      	it	eq
 80098ae:	68f5      	ldreq	r5, [r6, #12]
 80098b0:	e7da      	b.n	8009868 <_vfiprintf_r+0x20>
 80098b2:	89ab      	ldrh	r3, [r5, #12]
 80098b4:	0598      	lsls	r0, r3, #22
 80098b6:	d4ed      	bmi.n	8009894 <_vfiprintf_r+0x4c>
 80098b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ba:	f7ff ff50 	bl	800975e <__retarget_lock_release_recursive>
 80098be:	e7e9      	b.n	8009894 <_vfiprintf_r+0x4c>
 80098c0:	2300      	movs	r3, #0
 80098c2:	9309      	str	r3, [sp, #36]	; 0x24
 80098c4:	2320      	movs	r3, #32
 80098c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098ca:	2330      	movs	r3, #48	; 0x30
 80098cc:	f04f 0901 	mov.w	r9, #1
 80098d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80098d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009a94 <_vfiprintf_r+0x24c>
 80098d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098dc:	4623      	mov	r3, r4
 80098de:	469a      	mov	sl, r3
 80098e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098e4:	b10a      	cbz	r2, 80098ea <_vfiprintf_r+0xa2>
 80098e6:	2a25      	cmp	r2, #37	; 0x25
 80098e8:	d1f9      	bne.n	80098de <_vfiprintf_r+0x96>
 80098ea:	ebba 0b04 	subs.w	fp, sl, r4
 80098ee:	d00b      	beq.n	8009908 <_vfiprintf_r+0xc0>
 80098f0:	465b      	mov	r3, fp
 80098f2:	4622      	mov	r2, r4
 80098f4:	4629      	mov	r1, r5
 80098f6:	4630      	mov	r0, r6
 80098f8:	f7ff ff93 	bl	8009822 <__sfputs_r>
 80098fc:	3001      	adds	r0, #1
 80098fe:	f000 80aa 	beq.w	8009a56 <_vfiprintf_r+0x20e>
 8009902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009904:	445a      	add	r2, fp
 8009906:	9209      	str	r2, [sp, #36]	; 0x24
 8009908:	f89a 3000 	ldrb.w	r3, [sl]
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 80a2 	beq.w	8009a56 <_vfiprintf_r+0x20e>
 8009912:	2300      	movs	r3, #0
 8009914:	f04f 32ff 	mov.w	r2, #4294967295
 8009918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800991c:	f10a 0a01 	add.w	sl, sl, #1
 8009920:	9304      	str	r3, [sp, #16]
 8009922:	9307      	str	r3, [sp, #28]
 8009924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009928:	931a      	str	r3, [sp, #104]	; 0x68
 800992a:	4654      	mov	r4, sl
 800992c:	2205      	movs	r2, #5
 800992e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009932:	4858      	ldr	r0, [pc, #352]	; (8009a94 <_vfiprintf_r+0x24c>)
 8009934:	f7fe f9f0 	bl	8007d18 <memchr>
 8009938:	9a04      	ldr	r2, [sp, #16]
 800993a:	b9d8      	cbnz	r0, 8009974 <_vfiprintf_r+0x12c>
 800993c:	06d1      	lsls	r1, r2, #27
 800993e:	bf44      	itt	mi
 8009940:	2320      	movmi	r3, #32
 8009942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009946:	0713      	lsls	r3, r2, #28
 8009948:	bf44      	itt	mi
 800994a:	232b      	movmi	r3, #43	; 0x2b
 800994c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009950:	f89a 3000 	ldrb.w	r3, [sl]
 8009954:	2b2a      	cmp	r3, #42	; 0x2a
 8009956:	d015      	beq.n	8009984 <_vfiprintf_r+0x13c>
 8009958:	4654      	mov	r4, sl
 800995a:	2000      	movs	r0, #0
 800995c:	f04f 0c0a 	mov.w	ip, #10
 8009960:	9a07      	ldr	r2, [sp, #28]
 8009962:	4621      	mov	r1, r4
 8009964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009968:	3b30      	subs	r3, #48	; 0x30
 800996a:	2b09      	cmp	r3, #9
 800996c:	d94e      	bls.n	8009a0c <_vfiprintf_r+0x1c4>
 800996e:	b1b0      	cbz	r0, 800999e <_vfiprintf_r+0x156>
 8009970:	9207      	str	r2, [sp, #28]
 8009972:	e014      	b.n	800999e <_vfiprintf_r+0x156>
 8009974:	eba0 0308 	sub.w	r3, r0, r8
 8009978:	fa09 f303 	lsl.w	r3, r9, r3
 800997c:	4313      	orrs	r3, r2
 800997e:	46a2      	mov	sl, r4
 8009980:	9304      	str	r3, [sp, #16]
 8009982:	e7d2      	b.n	800992a <_vfiprintf_r+0xe2>
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	1d19      	adds	r1, r3, #4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	9103      	str	r1, [sp, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	bfbb      	ittet	lt
 8009990:	425b      	neglt	r3, r3
 8009992:	f042 0202 	orrlt.w	r2, r2, #2
 8009996:	9307      	strge	r3, [sp, #28]
 8009998:	9307      	strlt	r3, [sp, #28]
 800999a:	bfb8      	it	lt
 800999c:	9204      	strlt	r2, [sp, #16]
 800999e:	7823      	ldrb	r3, [r4, #0]
 80099a0:	2b2e      	cmp	r3, #46	; 0x2e
 80099a2:	d10c      	bne.n	80099be <_vfiprintf_r+0x176>
 80099a4:	7863      	ldrb	r3, [r4, #1]
 80099a6:	2b2a      	cmp	r3, #42	; 0x2a
 80099a8:	d135      	bne.n	8009a16 <_vfiprintf_r+0x1ce>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	3402      	adds	r4, #2
 80099ae:	1d1a      	adds	r2, r3, #4
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	9203      	str	r2, [sp, #12]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	bfb8      	it	lt
 80099b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80099bc:	9305      	str	r3, [sp, #20]
 80099be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009aa4 <_vfiprintf_r+0x25c>
 80099c2:	2203      	movs	r2, #3
 80099c4:	4650      	mov	r0, sl
 80099c6:	7821      	ldrb	r1, [r4, #0]
 80099c8:	f7fe f9a6 	bl	8007d18 <memchr>
 80099cc:	b140      	cbz	r0, 80099e0 <_vfiprintf_r+0x198>
 80099ce:	2340      	movs	r3, #64	; 0x40
 80099d0:	eba0 000a 	sub.w	r0, r0, sl
 80099d4:	fa03 f000 	lsl.w	r0, r3, r0
 80099d8:	9b04      	ldr	r3, [sp, #16]
 80099da:	3401      	adds	r4, #1
 80099dc:	4303      	orrs	r3, r0
 80099de:	9304      	str	r3, [sp, #16]
 80099e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e4:	2206      	movs	r2, #6
 80099e6:	482c      	ldr	r0, [pc, #176]	; (8009a98 <_vfiprintf_r+0x250>)
 80099e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099ec:	f7fe f994 	bl	8007d18 <memchr>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d03f      	beq.n	8009a74 <_vfiprintf_r+0x22c>
 80099f4:	4b29      	ldr	r3, [pc, #164]	; (8009a9c <_vfiprintf_r+0x254>)
 80099f6:	bb1b      	cbnz	r3, 8009a40 <_vfiprintf_r+0x1f8>
 80099f8:	9b03      	ldr	r3, [sp, #12]
 80099fa:	3307      	adds	r3, #7
 80099fc:	f023 0307 	bic.w	r3, r3, #7
 8009a00:	3308      	adds	r3, #8
 8009a02:	9303      	str	r3, [sp, #12]
 8009a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a06:	443b      	add	r3, r7
 8009a08:	9309      	str	r3, [sp, #36]	; 0x24
 8009a0a:	e767      	b.n	80098dc <_vfiprintf_r+0x94>
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	2001      	movs	r0, #1
 8009a10:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a14:	e7a5      	b.n	8009962 <_vfiprintf_r+0x11a>
 8009a16:	2300      	movs	r3, #0
 8009a18:	f04f 0c0a 	mov.w	ip, #10
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	3401      	adds	r4, #1
 8009a20:	9305      	str	r3, [sp, #20]
 8009a22:	4620      	mov	r0, r4
 8009a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a28:	3a30      	subs	r2, #48	; 0x30
 8009a2a:	2a09      	cmp	r2, #9
 8009a2c:	d903      	bls.n	8009a36 <_vfiprintf_r+0x1ee>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0c5      	beq.n	80099be <_vfiprintf_r+0x176>
 8009a32:	9105      	str	r1, [sp, #20]
 8009a34:	e7c3      	b.n	80099be <_vfiprintf_r+0x176>
 8009a36:	4604      	mov	r4, r0
 8009a38:	2301      	movs	r3, #1
 8009a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a3e:	e7f0      	b.n	8009a22 <_vfiprintf_r+0x1da>
 8009a40:	ab03      	add	r3, sp, #12
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	462a      	mov	r2, r5
 8009a46:	4630      	mov	r0, r6
 8009a48:	4b15      	ldr	r3, [pc, #84]	; (8009aa0 <_vfiprintf_r+0x258>)
 8009a4a:	a904      	add	r1, sp, #16
 8009a4c:	f7fb fa24 	bl	8004e98 <_printf_float>
 8009a50:	4607      	mov	r7, r0
 8009a52:	1c78      	adds	r0, r7, #1
 8009a54:	d1d6      	bne.n	8009a04 <_vfiprintf_r+0x1bc>
 8009a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a58:	07d9      	lsls	r1, r3, #31
 8009a5a:	d405      	bmi.n	8009a68 <_vfiprintf_r+0x220>
 8009a5c:	89ab      	ldrh	r3, [r5, #12]
 8009a5e:	059a      	lsls	r2, r3, #22
 8009a60:	d402      	bmi.n	8009a68 <_vfiprintf_r+0x220>
 8009a62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a64:	f7ff fe7b 	bl	800975e <__retarget_lock_release_recursive>
 8009a68:	89ab      	ldrh	r3, [r5, #12]
 8009a6a:	065b      	lsls	r3, r3, #25
 8009a6c:	f53f af12 	bmi.w	8009894 <_vfiprintf_r+0x4c>
 8009a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a72:	e711      	b.n	8009898 <_vfiprintf_r+0x50>
 8009a74:	ab03      	add	r3, sp, #12
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	462a      	mov	r2, r5
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	4b08      	ldr	r3, [pc, #32]	; (8009aa0 <_vfiprintf_r+0x258>)
 8009a7e:	a904      	add	r1, sp, #16
 8009a80:	f7fb fca6 	bl	80053d0 <_printf_i>
 8009a84:	e7e4      	b.n	8009a50 <_vfiprintf_r+0x208>
 8009a86:	bf00      	nop
 8009a88:	0800a314 	.word	0x0800a314
 8009a8c:	0800a334 	.word	0x0800a334
 8009a90:	0800a2f4 	.word	0x0800a2f4
 8009a94:	0800a28c 	.word	0x0800a28c
 8009a98:	0800a296 	.word	0x0800a296
 8009a9c:	08004e99 	.word	0x08004e99
 8009aa0:	08009823 	.word	0x08009823
 8009aa4:	0800a292 	.word	0x0800a292

08009aa8 <__swbuf_r>:
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	460e      	mov	r6, r1
 8009aac:	4614      	mov	r4, r2
 8009aae:	4605      	mov	r5, r0
 8009ab0:	b118      	cbz	r0, 8009aba <__swbuf_r+0x12>
 8009ab2:	6983      	ldr	r3, [r0, #24]
 8009ab4:	b90b      	cbnz	r3, 8009aba <__swbuf_r+0x12>
 8009ab6:	f7ff fda1 	bl	80095fc <__sinit>
 8009aba:	4b21      	ldr	r3, [pc, #132]	; (8009b40 <__swbuf_r+0x98>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	d12b      	bne.n	8009b18 <__swbuf_r+0x70>
 8009ac0:	686c      	ldr	r4, [r5, #4]
 8009ac2:	69a3      	ldr	r3, [r4, #24]
 8009ac4:	60a3      	str	r3, [r4, #8]
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	071a      	lsls	r2, r3, #28
 8009aca:	d52f      	bpl.n	8009b2c <__swbuf_r+0x84>
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	b36b      	cbz	r3, 8009b2c <__swbuf_r+0x84>
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	6820      	ldr	r0, [r4, #0]
 8009ad4:	b2f6      	uxtb	r6, r6
 8009ad6:	1ac0      	subs	r0, r0, r3
 8009ad8:	6963      	ldr	r3, [r4, #20]
 8009ada:	4637      	mov	r7, r6
 8009adc:	4283      	cmp	r3, r0
 8009ade:	dc04      	bgt.n	8009aea <__swbuf_r+0x42>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f7ff fcf6 	bl	80094d4 <_fflush_r>
 8009ae8:	bb30      	cbnz	r0, 8009b38 <__swbuf_r+0x90>
 8009aea:	68a3      	ldr	r3, [r4, #8]
 8009aec:	3001      	adds	r0, #1
 8009aee:	3b01      	subs	r3, #1
 8009af0:	60a3      	str	r3, [r4, #8]
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	6022      	str	r2, [r4, #0]
 8009af8:	701e      	strb	r6, [r3, #0]
 8009afa:	6963      	ldr	r3, [r4, #20]
 8009afc:	4283      	cmp	r3, r0
 8009afe:	d004      	beq.n	8009b0a <__swbuf_r+0x62>
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	07db      	lsls	r3, r3, #31
 8009b04:	d506      	bpl.n	8009b14 <__swbuf_r+0x6c>
 8009b06:	2e0a      	cmp	r6, #10
 8009b08:	d104      	bne.n	8009b14 <__swbuf_r+0x6c>
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f7ff fce1 	bl	80094d4 <_fflush_r>
 8009b12:	b988      	cbnz	r0, 8009b38 <__swbuf_r+0x90>
 8009b14:	4638      	mov	r0, r7
 8009b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b18:	4b0a      	ldr	r3, [pc, #40]	; (8009b44 <__swbuf_r+0x9c>)
 8009b1a:	429c      	cmp	r4, r3
 8009b1c:	d101      	bne.n	8009b22 <__swbuf_r+0x7a>
 8009b1e:	68ac      	ldr	r4, [r5, #8]
 8009b20:	e7cf      	b.n	8009ac2 <__swbuf_r+0x1a>
 8009b22:	4b09      	ldr	r3, [pc, #36]	; (8009b48 <__swbuf_r+0xa0>)
 8009b24:	429c      	cmp	r4, r3
 8009b26:	bf08      	it	eq
 8009b28:	68ec      	ldreq	r4, [r5, #12]
 8009b2a:	e7ca      	b.n	8009ac2 <__swbuf_r+0x1a>
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f000 f80c 	bl	8009b4c <__swsetup_r>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d0cb      	beq.n	8009ad0 <__swbuf_r+0x28>
 8009b38:	f04f 37ff 	mov.w	r7, #4294967295
 8009b3c:	e7ea      	b.n	8009b14 <__swbuf_r+0x6c>
 8009b3e:	bf00      	nop
 8009b40:	0800a314 	.word	0x0800a314
 8009b44:	0800a334 	.word	0x0800a334
 8009b48:	0800a2f4 	.word	0x0800a2f4

08009b4c <__swsetup_r>:
 8009b4c:	4b32      	ldr	r3, [pc, #200]	; (8009c18 <__swsetup_r+0xcc>)
 8009b4e:	b570      	push	{r4, r5, r6, lr}
 8009b50:	681d      	ldr	r5, [r3, #0]
 8009b52:	4606      	mov	r6, r0
 8009b54:	460c      	mov	r4, r1
 8009b56:	b125      	cbz	r5, 8009b62 <__swsetup_r+0x16>
 8009b58:	69ab      	ldr	r3, [r5, #24]
 8009b5a:	b913      	cbnz	r3, 8009b62 <__swsetup_r+0x16>
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f7ff fd4d 	bl	80095fc <__sinit>
 8009b62:	4b2e      	ldr	r3, [pc, #184]	; (8009c1c <__swsetup_r+0xd0>)
 8009b64:	429c      	cmp	r4, r3
 8009b66:	d10f      	bne.n	8009b88 <__swsetup_r+0x3c>
 8009b68:	686c      	ldr	r4, [r5, #4]
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b70:	0719      	lsls	r1, r3, #28
 8009b72:	d42c      	bmi.n	8009bce <__swsetup_r+0x82>
 8009b74:	06dd      	lsls	r5, r3, #27
 8009b76:	d411      	bmi.n	8009b9c <__swsetup_r+0x50>
 8009b78:	2309      	movs	r3, #9
 8009b7a:	6033      	str	r3, [r6, #0]
 8009b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295
 8009b84:	81a3      	strh	r3, [r4, #12]
 8009b86:	e03e      	b.n	8009c06 <__swsetup_r+0xba>
 8009b88:	4b25      	ldr	r3, [pc, #148]	; (8009c20 <__swsetup_r+0xd4>)
 8009b8a:	429c      	cmp	r4, r3
 8009b8c:	d101      	bne.n	8009b92 <__swsetup_r+0x46>
 8009b8e:	68ac      	ldr	r4, [r5, #8]
 8009b90:	e7eb      	b.n	8009b6a <__swsetup_r+0x1e>
 8009b92:	4b24      	ldr	r3, [pc, #144]	; (8009c24 <__swsetup_r+0xd8>)
 8009b94:	429c      	cmp	r4, r3
 8009b96:	bf08      	it	eq
 8009b98:	68ec      	ldreq	r4, [r5, #12]
 8009b9a:	e7e6      	b.n	8009b6a <__swsetup_r+0x1e>
 8009b9c:	0758      	lsls	r0, r3, #29
 8009b9e:	d512      	bpl.n	8009bc6 <__swsetup_r+0x7a>
 8009ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ba2:	b141      	cbz	r1, 8009bb6 <__swsetup_r+0x6a>
 8009ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ba8:	4299      	cmp	r1, r3
 8009baa:	d002      	beq.n	8009bb2 <__swsetup_r+0x66>
 8009bac:	4630      	mov	r0, r6
 8009bae:	f7fe fd95 	bl	80086dc <_free_r>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bbc:	81a3      	strh	r3, [r4, #12]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	6063      	str	r3, [r4, #4]
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	f043 0308 	orr.w	r3, r3, #8
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	b94b      	cbnz	r3, 8009be6 <__swsetup_r+0x9a>
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bdc:	d003      	beq.n	8009be6 <__swsetup_r+0x9a>
 8009bde:	4621      	mov	r1, r4
 8009be0:	4630      	mov	r0, r6
 8009be2:	f000 f84d 	bl	8009c80 <__smakebuf_r>
 8009be6:	89a0      	ldrh	r0, [r4, #12]
 8009be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bec:	f010 0301 	ands.w	r3, r0, #1
 8009bf0:	d00a      	beq.n	8009c08 <__swsetup_r+0xbc>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	60a3      	str	r3, [r4, #8]
 8009bf6:	6963      	ldr	r3, [r4, #20]
 8009bf8:	425b      	negs	r3, r3
 8009bfa:	61a3      	str	r3, [r4, #24]
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	b943      	cbnz	r3, 8009c12 <__swsetup_r+0xc6>
 8009c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c04:	d1ba      	bne.n	8009b7c <__swsetup_r+0x30>
 8009c06:	bd70      	pop	{r4, r5, r6, pc}
 8009c08:	0781      	lsls	r1, r0, #30
 8009c0a:	bf58      	it	pl
 8009c0c:	6963      	ldrpl	r3, [r4, #20]
 8009c0e:	60a3      	str	r3, [r4, #8]
 8009c10:	e7f4      	b.n	8009bfc <__swsetup_r+0xb0>
 8009c12:	2000      	movs	r0, #0
 8009c14:	e7f7      	b.n	8009c06 <__swsetup_r+0xba>
 8009c16:	bf00      	nop
 8009c18:	20000014 	.word	0x20000014
 8009c1c:	0800a314 	.word	0x0800a314
 8009c20:	0800a334 	.word	0x0800a334
 8009c24:	0800a2f4 	.word	0x0800a2f4

08009c28 <abort>:
 8009c28:	2006      	movs	r0, #6
 8009c2a:	b508      	push	{r3, lr}
 8009c2c:	f000 f898 	bl	8009d60 <raise>
 8009c30:	2001      	movs	r0, #1
 8009c32:	f7f8 f9f8 	bl	8002026 <_exit>

08009c36 <__swhatbuf_r>:
 8009c36:	b570      	push	{r4, r5, r6, lr}
 8009c38:	460e      	mov	r6, r1
 8009c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c3e:	4614      	mov	r4, r2
 8009c40:	2900      	cmp	r1, #0
 8009c42:	461d      	mov	r5, r3
 8009c44:	b096      	sub	sp, #88	; 0x58
 8009c46:	da07      	bge.n	8009c58 <__swhatbuf_r+0x22>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	602b      	str	r3, [r5, #0]
 8009c4c:	89b3      	ldrh	r3, [r6, #12]
 8009c4e:	061a      	lsls	r2, r3, #24
 8009c50:	d410      	bmi.n	8009c74 <__swhatbuf_r+0x3e>
 8009c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c56:	e00e      	b.n	8009c76 <__swhatbuf_r+0x40>
 8009c58:	466a      	mov	r2, sp
 8009c5a:	f000 f89d 	bl	8009d98 <_fstat_r>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	dbf2      	blt.n	8009c48 <__swhatbuf_r+0x12>
 8009c62:	9a01      	ldr	r2, [sp, #4]
 8009c64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c6c:	425a      	negs	r2, r3
 8009c6e:	415a      	adcs	r2, r3
 8009c70:	602a      	str	r2, [r5, #0]
 8009c72:	e7ee      	b.n	8009c52 <__swhatbuf_r+0x1c>
 8009c74:	2340      	movs	r3, #64	; 0x40
 8009c76:	2000      	movs	r0, #0
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	b016      	add	sp, #88	; 0x58
 8009c7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c80 <__smakebuf_r>:
 8009c80:	898b      	ldrh	r3, [r1, #12]
 8009c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c84:	079d      	lsls	r5, r3, #30
 8009c86:	4606      	mov	r6, r0
 8009c88:	460c      	mov	r4, r1
 8009c8a:	d507      	bpl.n	8009c9c <__smakebuf_r+0x1c>
 8009c8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	6123      	str	r3, [r4, #16]
 8009c94:	2301      	movs	r3, #1
 8009c96:	6163      	str	r3, [r4, #20]
 8009c98:	b002      	add	sp, #8
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	466a      	mov	r2, sp
 8009c9e:	ab01      	add	r3, sp, #4
 8009ca0:	f7ff ffc9 	bl	8009c36 <__swhatbuf_r>
 8009ca4:	9900      	ldr	r1, [sp, #0]
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7fe fd63 	bl	8008774 <_malloc_r>
 8009cae:	b948      	cbnz	r0, 8009cc4 <__smakebuf_r+0x44>
 8009cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cb4:	059a      	lsls	r2, r3, #22
 8009cb6:	d4ef      	bmi.n	8009c98 <__smakebuf_r+0x18>
 8009cb8:	f023 0303 	bic.w	r3, r3, #3
 8009cbc:	f043 0302 	orr.w	r3, r3, #2
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	e7e3      	b.n	8009c8c <__smakebuf_r+0xc>
 8009cc4:	4b0d      	ldr	r3, [pc, #52]	; (8009cfc <__smakebuf_r+0x7c>)
 8009cc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	6020      	str	r0, [r4, #0]
 8009ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd0:	81a3      	strh	r3, [r4, #12]
 8009cd2:	9b00      	ldr	r3, [sp, #0]
 8009cd4:	6120      	str	r0, [r4, #16]
 8009cd6:	6163      	str	r3, [r4, #20]
 8009cd8:	9b01      	ldr	r3, [sp, #4]
 8009cda:	b15b      	cbz	r3, 8009cf4 <__smakebuf_r+0x74>
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ce2:	f000 f86b 	bl	8009dbc <_isatty_r>
 8009ce6:	b128      	cbz	r0, 8009cf4 <__smakebuf_r+0x74>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	f023 0303 	bic.w	r3, r3, #3
 8009cee:	f043 0301 	orr.w	r3, r3, #1
 8009cf2:	81a3      	strh	r3, [r4, #12]
 8009cf4:	89a0      	ldrh	r0, [r4, #12]
 8009cf6:	4305      	orrs	r5, r0
 8009cf8:	81a5      	strh	r5, [r4, #12]
 8009cfa:	e7cd      	b.n	8009c98 <__smakebuf_r+0x18>
 8009cfc:	08009595 	.word	0x08009595

08009d00 <_malloc_usable_size_r>:
 8009d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d04:	1f18      	subs	r0, r3, #4
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	bfbc      	itt	lt
 8009d0a:	580b      	ldrlt	r3, [r1, r0]
 8009d0c:	18c0      	addlt	r0, r0, r3
 8009d0e:	4770      	bx	lr

08009d10 <_raise_r>:
 8009d10:	291f      	cmp	r1, #31
 8009d12:	b538      	push	{r3, r4, r5, lr}
 8009d14:	4604      	mov	r4, r0
 8009d16:	460d      	mov	r5, r1
 8009d18:	d904      	bls.n	8009d24 <_raise_r+0x14>
 8009d1a:	2316      	movs	r3, #22
 8009d1c:	6003      	str	r3, [r0, #0]
 8009d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d22:	bd38      	pop	{r3, r4, r5, pc}
 8009d24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d26:	b112      	cbz	r2, 8009d2e <_raise_r+0x1e>
 8009d28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d2c:	b94b      	cbnz	r3, 8009d42 <_raise_r+0x32>
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f000 f830 	bl	8009d94 <_getpid_r>
 8009d34:	462a      	mov	r2, r5
 8009d36:	4601      	mov	r1, r0
 8009d38:	4620      	mov	r0, r4
 8009d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d3e:	f000 b817 	b.w	8009d70 <_kill_r>
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d00a      	beq.n	8009d5c <_raise_r+0x4c>
 8009d46:	1c59      	adds	r1, r3, #1
 8009d48:	d103      	bne.n	8009d52 <_raise_r+0x42>
 8009d4a:	2316      	movs	r3, #22
 8009d4c:	6003      	str	r3, [r0, #0]
 8009d4e:	2001      	movs	r0, #1
 8009d50:	e7e7      	b.n	8009d22 <_raise_r+0x12>
 8009d52:	2400      	movs	r4, #0
 8009d54:	4628      	mov	r0, r5
 8009d56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d5a:	4798      	blx	r3
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	e7e0      	b.n	8009d22 <_raise_r+0x12>

08009d60 <raise>:
 8009d60:	4b02      	ldr	r3, [pc, #8]	; (8009d6c <raise+0xc>)
 8009d62:	4601      	mov	r1, r0
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	f7ff bfd3 	b.w	8009d10 <_raise_r>
 8009d6a:	bf00      	nop
 8009d6c:	20000014 	.word	0x20000014

08009d70 <_kill_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	2300      	movs	r3, #0
 8009d74:	4d06      	ldr	r5, [pc, #24]	; (8009d90 <_kill_r+0x20>)
 8009d76:	4604      	mov	r4, r0
 8009d78:	4608      	mov	r0, r1
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	602b      	str	r3, [r5, #0]
 8009d7e:	f7f8 f942 	bl	8002006 <_kill>
 8009d82:	1c43      	adds	r3, r0, #1
 8009d84:	d102      	bne.n	8009d8c <_kill_r+0x1c>
 8009d86:	682b      	ldr	r3, [r5, #0]
 8009d88:	b103      	cbz	r3, 8009d8c <_kill_r+0x1c>
 8009d8a:	6023      	str	r3, [r4, #0]
 8009d8c:	bd38      	pop	{r3, r4, r5, pc}
 8009d8e:	bf00      	nop
 8009d90:	200003c8 	.word	0x200003c8

08009d94 <_getpid_r>:
 8009d94:	f7f8 b930 	b.w	8001ff8 <_getpid>

08009d98 <_fstat_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	4d06      	ldr	r5, [pc, #24]	; (8009db8 <_fstat_r+0x20>)
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	4611      	mov	r1, r2
 8009da4:	602b      	str	r3, [r5, #0]
 8009da6:	f7f8 f98c 	bl	80020c2 <_fstat>
 8009daa:	1c43      	adds	r3, r0, #1
 8009dac:	d102      	bne.n	8009db4 <_fstat_r+0x1c>
 8009dae:	682b      	ldr	r3, [r5, #0]
 8009db0:	b103      	cbz	r3, 8009db4 <_fstat_r+0x1c>
 8009db2:	6023      	str	r3, [r4, #0]
 8009db4:	bd38      	pop	{r3, r4, r5, pc}
 8009db6:	bf00      	nop
 8009db8:	200003c8 	.word	0x200003c8

08009dbc <_isatty_r>:
 8009dbc:	b538      	push	{r3, r4, r5, lr}
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	4d05      	ldr	r5, [pc, #20]	; (8009dd8 <_isatty_r+0x1c>)
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	4608      	mov	r0, r1
 8009dc6:	602b      	str	r3, [r5, #0]
 8009dc8:	f7f8 f98a 	bl	80020e0 <_isatty>
 8009dcc:	1c43      	adds	r3, r0, #1
 8009dce:	d102      	bne.n	8009dd6 <_isatty_r+0x1a>
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	b103      	cbz	r3, 8009dd6 <_isatty_r+0x1a>
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	bd38      	pop	{r3, r4, r5, pc}
 8009dd8:	200003c8 	.word	0x200003c8

08009ddc <_init>:
 8009ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dde:	bf00      	nop
 8009de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de2:	bc08      	pop	{r3}
 8009de4:	469e      	mov	lr, r3
 8009de6:	4770      	bx	lr

08009de8 <_fini>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	bf00      	nop
 8009dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dee:	bc08      	pop	{r3}
 8009df0:	469e      	mov	lr, r3
 8009df2:	4770      	bx	lr
